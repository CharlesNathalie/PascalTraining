@page "/vocabulary_en"

@using Microsoft.Extensions.Localization
@using System.Globalization;

@rendermode InteractiveServer

<PageTitle>Vocabulary</PageTitle>

<p class="h2 text-center">Vocabulary</p>
<p>&nbsp;</p>
<p class="h4">
    Here is some vocabulary to help you understand the terms used in this tutorial.
</p>
<p>&nbsp;</p>
<div class="container mt-5">
    <h1 class="text-center text-primary mb-4">Web Development Vocabulary</h1>

    <div class="accordion">
        <!-- HTML Section -->
        <div class="accordion-item">
            <h2 class="accordion-header">
                <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#htmlSection" 
                aria-expanded="true" aria-controls="htmlSection">
                    HTML (HyperText Markup Language)
                </button>
            </h2>
            <div id="htmlSection" class="accordion-collapse collapse">
                <div class="accordion-body">
                    <ul class="list-group">
                        <li class="list-group-item">
                            <strong>&lt;html&gt;</strong> : Root element of an HTML document (contains all other HTML elements). It encapsulates all the HTML content of the page and must contain two main elements: <code>&lt;head&gt;</code> and <code>&lt;body&gt;</code>. Example:
                            <pre>
                            <code>
&lt;html&gt;
&lt;head&gt;
&lt;title&gt;Page Title&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;p&gt;Page content&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>&lt;head&gt;</strong> : Document metadata (contains information like the title, links to stylesheets, scripts, etc.). Metadata includes details such as character set, document authors, and instructions for search engines. Example:
                            <pre>
                            <code>
&lt;head&gt;
&lt;meta charset="UTF-8"&gt;
&lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
&lt;title&gt;Page Title&lt;/title&gt;
&lt;link rel="stylesheet" href="styles.css"&gt;
&lt;/head&gt;
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>&lt;body&gt;</strong> : Visible page content (contains all elements visible to the user, such as paragraphs, images, links, etc.). This is where you place HTML tags that define the structure and content of the page. Example:
                            <pre>
                            <code>
&lt;body&gt;
&lt;h1&gt;Welcome&lt;/h1&gt;
&lt;p&gt;This is a paragraph of text.&lt;/p&gt;
&lt;img src="image.jpg" alt="Image description"&gt;
&lt;/body&gt;
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>&lt;h1&gt; to &lt;h6&gt;</strong> : Heading levels (used to define headings, <code>&lt;h1&gt;</code> being the most important and <code>&lt;h6&gt;</code> the least important). Headings are used to structure content and improve readability. Example:
                            <pre>
                            <code>
&lt;h1&gt;Main Title&lt;/h1&gt;
&lt;h2&gt;Subtitle&lt;/h2&gt;
&lt;h3&gt;Sub-subtitle&lt;/h3&gt;
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>&lt;p&gt;</strong> : Paragraph (used to define a block of text). Each paragraph is automatically separated by vertical space, improving text readability. Example:
                            <pre>
                            <code>
&lt;p&gt;This is a paragraph of text.&lt;/p&gt;
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>&lt;a&gt;</strong> : Hyperlink (used to create links to other pages or resources). The <code>href</code> attribute defines the destination URL. Example:
                            <pre>
                            <code>
&lt;a href="https://example.com"&gt;Visit Example&lt;/a&gt;
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>&lt;img&gt;</strong> : Image (used to display images on the page, requires the <code>src</code> attribute to specify the image source). The <code>alt</code> attribute provides an alternative description for screen readers and for cases where the image cannot be displayed. Example:
                            <pre>
                            <code>
&lt;img src="image.jpg" alt="Image description"&gt;
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>&lt;div&gt;</strong> : Content division (used to group elements and apply styles or scripts). It is often used with classes or IDs to apply CSS styles or JavaScript scripts. Example:
                            <pre>
                            <code>
&lt;div class="container"&gt;
&lt;h2&gt;Section Title&lt;/h2&gt;
&lt;p&gt;Section content.&lt;/p&gt;
&lt;/div&gt;
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>&lt;form&gt;</strong> : Form (used to collect data from users, contains elements like text fields, buttons, etc.). Forms are used to send data to a server for processing. Example:
                            <pre>
                            <code>
&lt;form action="/submit" method="post"&gt;
&lt;label for="name"&gt;Name:&lt;/label&gt;
&lt;input type="text" id="name" name="name"&gt;
&lt;input type="submit" value="Submit"&gt;
&lt;/form&gt;
                            </code>
                            </pre>
                        </li>
                    </ul>
                </div>
            </div>
        </div>

        <!-- CSS Section -->
        <div class="accordion-item">
            <h2 class="accordion-header">
                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#cssSection" aria-expanded="false" aria-controls="cssSection">
                    CSS (Cascading Style Sheets)
                </button>
            </h2>
            <div id="cssSection" class="accordion-collapse collapse">
                <div class="accordion-body">
                    <ul class="list-group">
                        <li class="list-group-item">
                            <strong>color</strong> : Text color (sets the color of an element's text, can be specified by color name, hexadecimal code, RGB, etc.). Used to style text and improve readability or aesthetics. Example:
                            <pre>
                            <code>
p {
    color: red; /* Uses color name */
    color: #ff0000; /* Uses hexadecimal code */
    color: rgb(255, 0, 0); /* Uses RGB code */
}
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>background-color</strong> : Background color (sets the background color of an element, can be specified by color name, hexadecimal code, RGB, etc.). Used to highlight sections or specific elements. Example:
                            <pre>
                            <code>
div {
    background-color: blue; /* Uses color name */
    background-color: #0000ff; /* Uses hexadecimal code */
    background-color: rgb(0, 0, 255); /* Uses RGB code */
}
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>padding</strong> : Internal spacing (space between the content of an element and its borders, can be specified in pixels, percentages, etc.). Used to create space around content inside an element. Example:
                            <pre>
                            <code>
div {
    padding: 10px; /* 10 pixels spacing */
    padding: 5%; /* 5% of the element's width */
}
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>margin</strong> : External spacing (space around an element, separating it from its neighbors, can be specified in pixels, percentages, etc.). Used to create space around elements. Example:
                            <pre>
                            <code>
div {
    margin: 20px; /* 20 pixels spacing */
    margin: 10%; /* 10% of the element's width */
}
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>border</strong> : Element border (sets the border around an element, can include width, style, and color). Used to frame elements and visually distinguish them. Example:
                            <pre>
                            <code>
div {
    border: 2px solid black; /* 2px solid black border */
    border: 1px dashed red; /* 1px dashed red border */
}
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>display</strong> : Display control (defines how an element is displayed, common values: <code>block</code> for a block, <code>inline</code> for an inline element, <code>flex</code> for a flexible container). Used to manage the layout of elements. Example:
                            <pre>
                            <code

>
div {
    display: block; /* Displays the element as a block */
    display: inline; /* Displays the element inline */
    display: flex; /* Uses the flexible box model */
}
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>position</strong> : Element positioning (defines how an element is positioned in the document, common values: <code>static</code> for normal positioning, <code>absolute</code> for absolute positioning, <code>relative</code> for positioning relative to its normal position). Used to control the position of elements on the page. Example:
                            <pre>
                            <code>
div {
    position: static; /* Normal positioning */
    position: absolute; /* Absolute positioning */
    position: relative; /* Relative positioning */
}
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>media queries</strong> : Style adaptation based on screen size (allows applying specific CSS styles based on device characteristics, such as screen width, resolution, etc.). Used to create responsive designs. Example:
                            <pre>
                            <code>
&#64;media (max-width: 600px) {
body {
    background-color: lightblue;
}
                              }
                            </code>
                            </pre>
                        </li>
                    </ul>
                </div>
            </div>
        </div>

        <!-- JavaScript Section -->
        <div class="accordion-item">
            <h2 class="accordion-header">
                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#jsSection" aria-expanded="false" aria-controls="jsSection">
                    JavaScript (JS)
                </button>
            </h2>
            <div id="jsSection" class="accordion-collapse collapse">
                <div class="accordion-body">
                    <ul class="list-group">
                        <li class="list-group-item">
                            <strong>let</strong>, <strong>const</strong>, <strong>var</strong> : Variable declaration. Used to declare variables in JavaScript with different scopes. Example:
                            <pre>
                            <code>
let x = 10; // Block scope
const y = 20; // Block scope, constant value
var z = 30; // Function scope
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>function</strong> : Function definition. Used to declare functions in JavaScript. Example:
                            <pre>
                            <code>
function greet(name) {
    return `Hello, ${name}!`;
}
console.log(greet("Alice")); // Displays "Hello, Alice!"
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>DOM</strong> : Document Object Model, for manipulating HTML. Used to access and manipulate HTML elements through JavaScript. Example:
                            <pre>
                            <code>
document.getElementById("myElement").innerHTML = "New content";
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>addEventListener</strong> : Event handling. Used to attach event listeners to HTML elements. Example:
                            <pre>
                            <code>
document.getElementById("myButton").addEventListener("click", function() {
    alert("Button clicked!");
});
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>fetch</strong> : HTTP request to retrieve data. Used to perform HTTP requests and retrieve data asynchronously. Example:
                            <pre>
                            <code>
fetch("https://api.example.com/data")
    .then(response => response.json())
    .then(data => console.log(data))
    .catch(error => console.error("Error:", error));
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>localStorage</strong>, <strong>sessionStorage</strong> : Local storage in the browser. Used to store client-side data. Example:
                            <pre>
                            <code>
localStorage.setItem("key", "value");
let value = localStorage.getItem("key");
sessionStorage.setItem("sessionKey", "sessionValue");
let sessionValue = sessionStorage.getItem("sessionKey");
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>JSON</strong> : JavaScript Object Notation data format. Used to exchange data between a client and a server. Example:
                            <pre>
                            <code>
let jsonString = '{"name": "Alice", "age": 25}';
let jsonObject = JSON.parse(jsonString);
console.log(jsonObject.name); // Displays "Alice"
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>promise</strong>, <strong>async/await</strong> : Asynchronous handling. Used to manage asynchronous operations in JavaScript. Example:
                            <pre>
                            <code>
function fetchData() {
    return new Promise((resolve, reject) => {
        setTimeout(() => resolve("Data retrieved"), 2000);
    });
}

async function getData() {
    try {
        let data = await fetchData();
        console.log(data); // Displays "Data retrieved" after 2 seconds
    } catch (error) {
        console.error("Error:", error);
    }
}

getData();
                            </code>
                            </pre>
                        </li>
                    </ul>
                </div>
            </div>
        </div>

        <!-- JavaScript Frameworks Section -->
        <div class="accordion-item">
            <h2 class="accordion-header">
                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#frameworksSection" aria-expanded="false" aria-controls="frameworksSection">
                    JavaScript Frameworks and Libraries
                </button>
            </h2>
            <div id="frameworksSection" class="accordion-collapse collapse">
                <div class="accordion-body">
                    <ul class="list-group">
                        <li class="list-group-item">
                            <strong>jQuery</strong> : Simplifies DOM manipulation and AJAX requests. Used to write less JavaScript code for common tasks. Example:
                            <pre>
                            <code>
$(document).ready(function() {
    $("#myButton").click(function() {
        alert("Button clicked!");
    });
});
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>React.js</strong> : Library for building user interfaces. Used to create reusable components and manage application state. Example:
                            <pre>
                            <code>
import React, { useState } from 'react';

function App() {
    const [count, setCount] = useState(0);

    return (
                            <div>
                            <p>You clicked {count} times</p>
                            <button onClick={() => setCount(count + 1)}>
                Click here
            </button>
        </div>
    );
}

export default App;
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>Vue.js</strong> : Framework for building reactive user interfaces. Used to build interactive web applications. Example:
                            <pre>
                            <code>
                            <template>
                            <div id="app">
                            <p>{{ message }}</p>
                            <button @click="reverseMessage">Reverse Message</button>
                          </div>
                        </template>

                            <script>
                                export default {
                                    data() {
                                        return {
                                            message: 'Hello Vue!'
                                        }
                                    },
                                    methods: {
                                        reverseMessage() {
                                            this.message = this.message.split('').reverse().join('')
                                        }
                                    }
                                }
</script>
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>Angular</strong> : Full framework for complex web applications. Used to build robust, maintainable web applications. Example:
                            <pre>
                            <code>
import { Component } from '&#64;angular/core';

&#64;Component({
    selector: 'app-root',
    template: `
    &lt;h1&gt;{{ title }}&lt;/h1&gt;
                            <button (click)="changeTitle()">Change Title</button>
    `
})
export class AppComponent {
    title = 'Welcome to Angular';

    changeTitle() {
    this.title = 'Title changed!';
    }
}
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>Node.js</strong> : Runs JavaScript on the server side. Used to build fast and scalable server applications. Example:
                            <pre>
                            <code>
const http = require('http');

const server = http.createServer((req, res) => {
    res.statusCode = 200;
    res.setHeader('Content-Type', 'text/plain');
    res.end('Hello World\n');
});

server.listen(3000, '127.0.0.1', () => {
    console.log('Server running at http://127.0.0.1:3000/');
});
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>Express.js</strong> : Minimal framework for Node.js applications. Used to build web applications and APIs. Example:
                            <pre>
                            <code>
const express = require('express');
const app = express();

app.get('/', (req, res) => {
res.send('Hello World!');
});

app.listen(3000, () => {
console.log('Server running at http://localhost:3000/');
});
                            </code>
                            </pre>
                        </li>
                    </ul>
                </div>
            </div>
        </div>

        <!-- Database Section -->
        <div class="accordion-item">
            <h2 class="accordion-header">
                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#dbSection" aria-expanded="false" aria-controls="dbSection">
                    Databases (Back-end)
                </button>
            </h2>
            <div id="dbSection" class="accordion-collapse collapse">
                <div class="accordion-body">
                    <ul class="list-group">
                        <li class="list-group-item">
                            <strong>SQL</strong> : Language to interact with relational databases. Used to query structured databases. Example:
                            <pre>
                            <code>
SELECT * FROM users WHERE age > 30;
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>NoSQL</strong> : Non-relational databases (e.g., MongoDB). Used to store unstructured or semi-structured data. Example:
                            <pre>
                            <code>
db.users.insert({ name: "Alice", age: 25 });
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>CRUD</strong> : Create, Read, Update, Delete (basic operations). Used for basic data operations. Example:
                            <pre>
                            <code>
// Create
INSERT INTO users (name, age) VALUES ('Alice', 25);

// Read
SELECT * FROM users;

// Update
UPDATE users SET age = 26 WHERE name = 'Alice';

// Delete
DELETE FROM users WHERE name = 'Alice';
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>ORM</strong> : Object-Relational Mapping to interact with databases via objects. Used to simplify database interactions using objects. Example:
                            <pre>
                            <code>
class User {
    constructor(name, age) {
        this.name = name;
        this.age = age;
    }
}

let user = new User('Alice', 25);
user.save(); // Saves the user in the database
                            </code>
                            </pre>
                        </li>
                    </ul>
                </div>
            </div>
        </div>

        <!-- Hosting Section -->
        <div class="accordion-item">
            <h2 class="accordion-header">
                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#hostingSection" aria-expanded="false" aria-controls="hostingSection">
                    Hosting and Deployment
                </button>
            </h2>
            <div id="hostingSection" class="accordion-collapse collapse">
                <div class="accordion-body">
                    <ul class="list-group">
                        <li class="list-group-item">
                            <strong>FTP</strong> : File Transfer Protocol. Used to transfer files between a client and a server over a network. FTP is commonly used to upload files to a web server or to download files from a server. Example:
                            <pre>
                            <code>
ftp&gt; open ftp.example.com
ftp&gt; login
ftp&gt; put localfile.txt remotefile.txt
ftp&gt; get remotefile.txt localfile.txt
ftp&gt; bye
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>CDN</strong> : Content Delivery Network. A geographically distributed network of servers that work together to quickly deliver Internet content to users. CDNs are used to improve website loading times and reduce latency. Example:
                            <pre>
                            <code>
&lt;script src="https://cdn.example.com/library.js"&gt;&lt;/script&gt;
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>SSL/TLS</strong> : Protocols for securing communications on the web. SSL (Secure Sockets Layer) and TLS (Transport Layer Security) encrypt the data exchanged between a client and a server, ensuring the confidentiality and integrity of the data. Example:
                            <pre>
                            <code>
https://www.example.com
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>Hosting Providers</strong> : Service providers offering hosting services. Companies that offer services to host websites, applications, and databases. Examples: AWS (Amazon Web Services), Azure (Microsoft), Heroku, Netlify. Example:
                            <pre>
                            <code>
# Deploying on Heroku
$ git init
$ heroku create
$ git add .
$ git commit -m "Initial commit"
$ git push heroku master
                            </code>
                            </pre>
                        </li>
                    </ul>
                </div>
            </div>
        </div>
    </div>
</div>
<p>&nbsp;</p>
<div class="container mt-5">
    <h1 class="text-center text-primary mb-4">HTML Vocabulary</h1>

    <div class="accordion">
        <!-- Section Basic Structure Elements -->
        <div class="accordion-item">
            <h2 class="accordion-header">
                <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#htmlBasicsSection" aria-expanded="false" aria-controls="htmlBasicsSection">
                    Basic Structure Elements
                </button>
            </h2>
            <div id="htmlBasicsSection" class="accordion-collapse collapse">
                <div class="accordion-body">
                    <ul class="list-group">
                        <li class="list-group-item">
                            <strong>&lt;html&gt;</strong> : Root element that encapsulates all the HTML content of the page. It must contain two main elements: <code>&lt;head&gt;</code> and <code>&lt;body&gt;</code>. The <code>&lt;html&gt;</code> element defines the beginning and the end of an HTML document. For example:
                            <pre>
                            <code>
&lt;html&gt;
&lt;head&gt;
&lt;title&gt;Page Title&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;p&gt;Page content&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
                                </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>&lt;head&gt;</strong> : Contains metadata, links to CSS files, <code>&lt;meta&gt;</code> tags, and the page title <code>&lt;title&gt;</code>. Metadata includes information such as the character set, document authors, and search engine instructions. CSS files linked in the <code>&lt;head&gt;</code> define the page's style. For example:
                            <pre>
                            <code>
&lt;head&gt;
&lt;meta charset="UTF-8"&gt;
&lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
&lt;title&gt;Page Title&lt;/title&gt;
&lt;link rel="stylesheet" href="styles.css"&gt;
&lt;/head&gt;
                                </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>&lt;body&gt;</strong> : Contains all the visible content of a web page (text, images, videos, etc.). This element holds the HTML tags that define the structure and content of the page, such as paragraphs, headings, lists, images, and links. For example:
                            <pre>
                            <code>
&lt;body&gt;
&lt;h1&gt;Welcome&lt;/h1&gt;
&lt;p&gt;This is a paragraph of text.&lt;/p&gt;
&lt;img src="image.jpg" alt="Image description"&gt;
&lt;/body&gt;
                                </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>&lt;h1&gt; to &lt;h6&gt;</strong> : Heading tags, with <code>&lt;h1&gt;</code> being the most important and <code>&lt;h6&gt;</code> the least. Headings are used to structure content and improve readability. They also play an important role in SEO by helping search engines understand the page's hierarchy and content. For example:
                            <pre>
                            <code>
&lt;h1&gt;Main Title&lt;/h1&gt;
&lt;h2&gt;Subtitle&lt;/h2&gt;
&lt;h3&gt;Sub-subtitle&lt;/h3&gt;
                                </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>&lt;p&gt;</strong> : Element used to create paragraphs of text. Each paragraph is automatically separated by vertical space, improving text readability. Paragraphs are used to structure textual content into logical blocks. For example:
                            <pre><code>&lt;p&gt;This is a paragraph of text.&lt;/p&gt;</code></pre>
                        </li>
                        <li class="list-group-item">
                            <strong>&lt;div&gt;</strong> : Generic container element used to group other elements into blocks. It is often used with classes or IDs to apply CSS styles or JavaScript scripts. <code>&lt;div&gt;</code> elements are essential for layout and content organization. For example:
                            <pre>
                            <code>
&lt;div class="container"&gt;
&lt;h2&gt;Section Title&lt;/h2&gt;
&lt;p&gt;Section content.&lt;/p&gt;
&lt;/div&gt;
                                </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>&lt;span&gt;</strong> : Generic inline container element used to group parts of text or inline elements. Unlike <code>&lt;div&gt;</code>, <code>&lt;span&gt;</code> does not introduce a line break. It is often used to apply styles or scripts to a specific part of text without affecting the overall layout. For example:
                            <pre><code>&lt;p&gt;Text with a &lt;span style="color: red;"&gt;red word&lt;/span&gt;.&lt;/p&gt;</code></pre>
                        </li>
                    </ul>
                </div>
            </div>
        </div>

        <!-- Section Links and Images -->
        <div class="accordion-item">
            <h2 class="accordion-header">
                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#linksImagesSection" aria-expanded="false" aria-controls="linksImagesSection">
                    Links and Images
                </button>
            </h2>
            <div id="linksImagesSection" class="accordion-collapse collapse">
                <div class="accordion-body">
                    <ul class="list-group">
                        <li class="list-group-item">
                            <strong>&lt;a&gt;</strong> : Tag used to create hyperlinks. The <code>href</code> attribute defines the destination URL. You can also use attributes like <code>target</code> to open the link in a new tab (<code>_blank</code>) and <code>rel</code> to define the relationship between the current document and the linked document (e.g., <code>noopener</code> for security reasons). For example:
                            <pre><code>&lt;a href="https://example.com" target="_blank" rel="noopener"&gt;Visit Example&lt;/a&gt;</code></pre>
                        </li>
                        <li class="list-group-item">
                            <strong>&lt;img&gt;</strong> : Element to insert images. The <code>src</code> attribute specifies the image source, and <code>alt</code> provides an alternative description for screen readers and cases where the image cannot be displayed. You can also use attributes like <code>width</code> and <code>height</code> to set the image dimensions, and <code>loading="lazy"</code> to defer the loading of off-screen images. For example:
                            <pre><code>&lt;img src="image.jpg" alt="Image description" width="600" height="400" loading="lazy" /&gt;</code></pre>
                        </li>
                        <li class="list-group-item">
                            <strong>&lt;figure&gt;</strong> : Element used to group elements like an image with a caption. It is often used to improve the semantics and accessibility of visual content. The <code>&lt;figure&gt;</code> element can contain images, charts, diagrams, or any other visual content, along with their associated caption. For example:
                            <pre>
                            <code>
&lt;figure&gt;
&lt;img src="diagram.png" alt="Explanatory diagram" /&gt;
&lt;figcaption&gt;Diagram showing the process steps.&lt;/figcaption&gt;
&lt;/figure&gt;
                                </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>&lt;figcaption&gt;</strong> : Caption associated with a <code>&lt;figure&gt;</code> element. It provides a description or explanation of the visual content within the <code>&lt;figure&gt;</code>. The <code>&lt;figcaption&gt;</code> tag should be placed directly after the visual element or at the end of the <code>&lt;figure&gt;</code> element. For example:
                            <pre>
                            <code>
&lt;figure&gt;
&lt;img src="photo.jpg" alt="Landscape photo" /&gt;
&lt;figcaption&gt;A beautiful view of the mountain at sunrise.&lt;/figcaption&gt;
&lt;/figure&gt;
                                </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>&lt;nav&gt;</strong> : Semantic element for defining navigation sections, containing links to other parts of the site or external pages. It improves accessibility by allowing screen readers and search engines to understand the site’s navigation structure. The <code>&lt;nav&gt;</code> element is generally used for main navigation menus, sidebar navigation, and footer links. For example:
                            <pre>
                            <code>
&lt;nav&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href

="/home"&gt;Home&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/about"&gt;About&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/contact"&gt;Contact&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/nav&gt;                    
                                </code>
                            </pre>
                        </li>
                    </ul>
                </div>
            </div>
        </div>

        <!-- Section Lists and Tables -->
        <div class="accordion-item">
            <h2 class="accordion-header">
                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#listsTablesSection" aria-expanded="false" aria-controls="listsTablesSection">
                    Lists and Tables
                </button>
            </h2>
            <div id="listsTablesSection" class="accordion-collapse collapse">
                <div class="accordion-body">
                    <ul class="list-group">
                        <li class="list-group-item">
                            <strong>&lt;ul&gt;</strong> : Unordered list with bullet points. List items are created with <code>&lt;li&gt;</code>. Used to group elements without a particular order. For example:
                            <pre>
                            <code>
&lt;ul&gt;
&lt;li&gt;Item 1&lt;/li&gt;
&lt;li&gt;Item 2&lt;/li&gt;
&lt;li&gt;Item 3&lt;/li&gt;
&lt;/ul&gt;
                                </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>&lt;ol&gt;</strong> : Ordered list with numbers or letters for each item. Used to group elements in a specific order. For example:
                            <pre>
                            <code>
&lt;ol&gt;
&lt;li&gt;First item&lt;/li&gt;
&lt;li&gt;Second item&lt;/li&gt;
&lt;li&gt;Third item&lt;/li&gt;
&lt;/ol&gt;
                                </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>&lt;li&gt;</strong> : List item element used within <code>&lt;ul&gt;</code> or <code>&lt;ol&gt;</code>. Represents an individual item in a list. For example:
                            <pre>
                            <code>
&lt;ul&gt;
&lt;li&gt;Unordered list item&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;Ordered list item&lt;/li&gt;
&lt;/ol&gt;
                                </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>&lt;table&gt;</strong> : Element used to create tables. It is used with <code>&lt;tr&gt;</code> (row), <code>&lt;td&gt;</code> (cell), and <code>&lt;th&gt;</code> (table header). It allows structuring data in rows and columns. For example:
                            <pre>
                            <code>
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Header 1&lt;/th&gt;
&lt;th&gt;Header 2&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Data 1&lt;/td&gt;
&lt;td&gt;Data 2&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
                                </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>&lt;thead&gt;</strong> : Element used to group column headers in a table. Generally placed at the beginning of the table to define the column titles. For example:
                            <pre>
                            <code>
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Title 1&lt;/th&gt;
&lt;th&gt;Title 2&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;/table&gt;
                                </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>&lt;tbody&gt;</strong> : Section used to group the table’s content inside the <code>&lt;table&gt;</code>. Contains the table’s data rows, separated from the headers. For example:
                            <pre>
                            <code>
&lt;table&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Data 1&lt;/td&gt;
&lt;td&gt;Data 2&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
                                </code>
                            </pre>
                        </li>
                    </ul>
                </div>
            </div>
        </div>

        <!-- Section Forms -->
        <div class="accordion-item">
            <h2 class="accordion-header">
                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#formsSection" aria-expanded="false" aria-controls="formsSection">
                    Forms
                </button>
            </h2>
            <div id="formsSection" class="accordion-collapse collapse">
                <div class="accordion-body">
                    <ul class="list-group">
                        <li class="list-group-item">
                            <strong>&lt;form&gt;</strong> : Element used to group user input fields and send data to a server. It can contain various form elements such as text fields, buttons, checkboxes, etc. The <code>action</code> attribute specifies the URL where the form data should be sent, and the <code>method</code> attribute specifies the HTTP method (GET or POST) used to send the data. For example:
                            <pre>
                            <code>
&lt;form action="/submit" method="post"&gt;
&lt;input type="text" name="username" placeholder="Username" /&gt;
&lt;button type="submit"&gt;Submit&lt;/button&gt;
&lt;/form&gt;
                                </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>&lt;input&gt;</strong> : Data input element, used to create different types of fields like text boxes, checkboxes, or radio buttons. The <code>type</code> attribute specifies the type of field (e.g., <code>text</code> for a text box, <code>checkbox</code> for a checkbox, <code>radio</code> for a radio button, etc.). Other attributes like <code>name</code>, <code>value</code>, and <code>placeholder</code> can be used to define additional properties. For example:
                            <pre><code>&lt;input type="text" name="email" placeholder="Email address" /&gt;</code></pre>
                            Another example for a checkbox:
                            <pre><code>&lt;input type="checkbox" name="subscribe" value="yes" /&gt; Subscribe to newsletter</code></pre>
                        </li>
                        <li class="list-group-item">
                            <strong>&lt;label&gt;</strong> : Label for a form element, often used with the <code>for</code> attribute, which refers to the ID of a form field. It improves accessibility by visually and functionally associating the label with the corresponding form field. For example:
                            <pre>
                            <code>
&lt;label for="username"&gt;Username&lt;/label&gt;
&lt;input type="text" id="username" name="username" /&gt;
                                </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>&lt;select&gt;</strong> : Element used to create a drop-down menu with multiple choices. Used with <code>&lt;option&gt;</code> tags to define the available options. The <code>name</code> attribute is used to identify the drop-down menu when the form is submitted, and the <code>multiple</code> attribute can be added to allow multiple selections. For example:
                            <pre>
                            <code>
&lt;select name="country"&gt;
&lt;option value="fr"&gt;France&lt;/option&gt;
&lt;option value="us"&gt;United States&lt;/option&gt;
&lt;/select&gt;
                                </code>
                            </pre>
                            Another example for multiple selections:
                            <pre>
                            <code>
&lt;select name="fruits" multiple&gt;
&lt;option value="apple"&gt;Apple&lt;/option&gt;
&lt;option value="banana"&gt;Banana&lt;/option&gt;
&lt;/select&gt;
                                </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>&lt;textarea&gt;</strong> : Multi-line text area for larger text input. Unlike <code>&lt;input&gt;</code> with <code>type="text"</code>, <code>&lt;textarea&gt;</code> allows users to enter text on multiple lines. The <code>rows</code> and <code>cols</code> attributes can be used to define the size of the text area. For example:
                            <pre><code>&lt;textarea name="message" rows="4" cols="50"&gt;Your message here...&lt;/textarea&gt;</code></pre>
                        </li>
                        <li class="list-group-item">
                            <strong>&lt;button&gt;</strong> : Element used to create interactive buttons. The <code>type</code> attribute can be used to specify the button type (e.g., <code>submit</code> to submit a form, <code>reset</code> to reset form fields, or <code>button</code> for a button with no default behavior). The content between the <code>&lt;button&gt;</code> and <code>&lt;/button&gt;</code> tags is displayed as the button label. For example:
                            <pre><code>&lt;button type="submit"&gt;Submit&lt;/button&gt;</code></pre>
                            Another example for a reset button:
                            <pre><code>&lt;button type="reset"&gt;Reset&lt;/button&gt;</code></pre>
                        </li>
                    </ul>
                </div>
            </div>
        </div>

        <!-- Section Semantic Elements -->
        <div class="accordion-item">
            <h2 class="accordion-header">
                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#semanticSection" aria-expanded="false" aria-controls="semanticSection">
                    Semantic Elements
                </button>
            </h2>
            <div id="semanticSection" class="accordion-collapse collapse">
                <div class="accordion-body">
                    <ul class="list-group">
                        <li class="list-group-item">
                            <strong>&lt;header&gt;</strong> : Header section for introductory information or navigation links. Typically used to group elements like the logo, site title, and navigation menus. It is placed at the top of the page or a section. For example:
                            <pre>
                            <code>
&lt;header&gt;
&lt;h1&gt;Site Title&lt;/h1&gt;
&lt;nav&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#"&gt;Home&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#"&gt;About&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/nav&gt;
&lt;/header&gt;
                                </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>&lt;footer&gt;</strong> : Footer section containing footer information, credits, or additional links. Often used to display contact information, legal notices, links to privacy policies, and credits. It is placed at the bottom of the page or a section. For example:
                            <pre>
                            <code>
&lt;footer&gt;
&lt;p&gt;© 2023 My Website&lt;/p&gt;
&lt;nav&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#"&gt;Legal Notice&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#"&gt;Privacy Policy&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/nav&gt;
&lt;/footer&gt;
                                </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>&lt;article&gt;</strong> : Standalone content that can be distributed independently, such as a blog post or journal entry. Used to encapsulate content that has complete meaning on its own and can be reused or syndicated. For example:
                            <pre>
                            <code>
&lt;article&gt;
&lt;h2&gt;Article Title&lt;/h2&gt;
&lt;p&gt;Article content...&lt;/p&gt;
&lt;/article&gt;
                                </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>&lt;section&gt;</strong> : Thematic section of a page that groups related elements. Used to divide content into logical sections, each section usually having a title. It helps structure the document semantically. For example:
                            <pre>
                            <code>
&lt;section&gt;
&lt;h2&gt;Section Title&lt;/h2&gt;
&lt;p&gt;Section content...&lt;/p&gt;
&lt;/section&gt;
                                </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>&lt;aside&gt;</strong> : Secondary or complementary content, such as sidebars or quotes. Used for information that is tangential to the main content, like advertisements, related links, or quotes. Often placed beside the main content. For example:
                            <pre>
                            <code>
&lt;aside&gt;
&lt;h2&gt;Related Links&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#"&gt;Link 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#"&gt;Link 2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/aside&gt;
                                </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>&lt;main&gt;</strong> : The main section of a document that contains the dominant content. Used to encapsulate the main content of the page, distinct from headers, footers, and sidebars. There should be only one <code>&lt;main&gt;</code> element per document. For example:
                            <pre>
                            <code>
&lt;main&gt;
&lt;h1&gt;Welcome to My Website&lt;/h1&gt;
&lt;p&gt;Main content of the page...&lt;/p&gt;
&lt;/main&gt;
                                </code>
                            </pre>
                        </li>
                    </ul>
                </div>
            </div>
        </div>

    </div>
</div>
<p>&nbsp;</p>
<div class="container mt-5">
    <h1 class="text-center text-primary mb-4">CSS Vocabulary</h1>

    <div class="accordion">
        <!-- Selectors Section -->
        <div class="accordion-item">
            <h2 class="accordion-header">
                <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#selectorsSection" aria-expanded="false" aria-controls="selectorsSection">
                    CSS Selectors
                </button>
            </h2>
            <div id="selectorsSection" class="accordion-collapse collapse">
                <div class="accordion-body">
                    <ul class="list-group">
                        <li class="list-group-item">
                            <strong>Universal Selector (*)</strong>: A selector that targets all elements on a page. It is used to apply general styles to all elements without exception. For example:
                            <pre>
                            <code>
* {
    margin: 0;
    padding: 0;
}
                            </code>
                            </pre>
                            This resets the margins and padding of all elements.
                        </li>
                        <li class="list-group-item">
                            <strong>Type Selector (p, h1, div, etc.)</strong>: Targets all elements of a certain type. For example:
                            <pre>
                            <code>
p {
    color: blue;
}
                            </code>
                            </pre>
                            This targets all paragraphs and sets their color to blue. Another example:
                            <pre>
                            <code>
h1 {
    font-size: 2em;
}
                            </code>
                            </pre>
                            This targets all level 1 headers and sets their font size to 2em.
                        </li>
                        <li class="list-group-item">
                            <strong>Class Selector (.classname)</strong>: Targets all elements with a specific class. For example:
                            <pre>
                            <code>
.menu {
    background-color: #f0f0f0;
}
                            </code>
                            </pre>
                            This targets all elements with the "menu" class and sets their background color to #f0f0f0.
                        </li>
                        <li class="list-group-item">
                            <strong>ID Selector (#idname)</strong>: Targets an element with a unique identifier. For example:
                            <pre>
                            <code>
#header {
    text-align: center;
}
                            </code>
                            </pre>
                            This targets the element with the "header" ID and centers its text.
                        </li>
                        <li class="list-group-item">
                            <strong>Descendant Selector (parent child)</strong>: Targets the child elements of a specific parent element. For example:
                            <pre>
                            <code>
div p {
    margin-bottom: 10px;
}
                            </code>
                            </pre>
                            This targets all paragraphs inside divs and sets a bottom margin of 10 pixels.
                        </li>
                        <li class="list-group-item">
                            <strong>Attribute Selector ([attribute=value])</strong>: Targets elements with a specific attribute. For example:
                            <pre>
                            <code>
[type="text"] {
    border: 1px solid #ccc;
}
                            </code>
                            </pre>
                            This targets all text fields and sets a solid 1-pixel border with color #ccc.
                        </li>
                    </ul>
                </div>
            </div>
        </div>

        <!-- Text Properties Section -->
        <div class="accordion-item">
            <h2 class="accordion-header">
                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#textPropertiesSection" aria-expanded="false" aria-controls="textPropertiesSection">
                    Text Properties
                </button>
            </h2>
            <div id="textPropertiesSection" class="accordion-collapse collapse">
                <div class="accordion-body">
                    <ul class="list-group">
                        <li class="list-group-item">
                            <strong>color</strong>: Defines the color of the text. It can be specified using color names (e.g., <code>red</code>), hexadecimal values (e.g., <code>#ff0000</code>), RGB values (e.g., <code>rgb(255, 0, 0)</code>), or HSL values (e.g., <code>hsl(0, 100%, 50%)</code>). For example:
                            <pre><code>color: blue;</code></pre>
                            This sets the text color to blue.
                        </li>
                        <li class="list-group-item">
                            <strong>font-size</strong>: Defines the font size. It can be specified in pixels (e.g., <code>16px</code>), em (e.g., <code>1em</code>), rem (e.g., <code>1rem</code>), percentages (e.g., <code>100%</code>), or points (e.g., <code>12pt</code>). For example:
                            <pre><code>font-size: 20px;</code></pre>
                            This sets the font size to 20 pixels.
                        </li>
                        <li class="list-group-item">
                            <strong>font-weight</strong>: Defines the weight (boldness) of the font. Common values include <code>normal</code>, <code>bold</code>, <code>bolder</code>, <code>lighter</code>, or numerical values ranging from 100 to 900. For example:
                            <pre><code>font-weight: bold;</code></pre>
                            This makes the text bold.
                        </li>
                        <li class="list-group-item">
                            <strong>text-align</strong>: Defines the alignment of the text. Common values include <code>left</code>, <code>center</code>, <code>right</code>, and <code>justify</code>. For example:
                            <pre><code>text-align: center;</code></pre>
                            This centers the text horizontally.
                        </li>
                        <li class="list-group-item">
                            <strong>line-height</strong>: Defines the spacing between lines of text. It can be specified using relative units (e.g., <code>1.5</code>), pixels (e.g., <code>24px</code>), or percentages (e.g., <code>150%</code>). For example:
                            <pre><code>line-height: 1.5;</code></pre>
                            This sets a line spacing of 1.5 times the font size.
                        </li>
                        <li class="list-group-item">
                            <strong>text-transform</strong>: Controls the capitalization of text. Common values include <code>uppercase</code> (all uppercase), <code>lowercase</code> (all lowercase), <code>capitalize</code> (first letter capitalized), and <code>none</code> (no transformation). For example:
                            <pre><code>text-transform: uppercase;</code></pre>
                            This converts all text to uppercase.
                        </li>
                    </ul>
                </div>
            </div>
        </div>

        <!-- Box Model Section -->
        <div class="accordion-item">
            <h2 class="accordion-header">
                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#boxModelSection" aria-expanded="false" aria-controls="boxModelSection">
                    Box Model
                </button>
            </h2>
            <div id="boxModelSection" class="accordion-collapse collapse">
                <div class="accordion-body">
                    <ul class="list-group">
                        <li class="list-group-item">
                            <strong>width / height</strong>: Defines the width and height of an element. The value can be specified in absolute units (like pixels, points) or relative units (like percentages, em, rem). For example:
                            <pre><code>width: 100px;</code></pre>
                            This sets the width to 100 pixels. Another example:
                            <pre><code>height: 50%;</code></pre>
                            This sets the height to 50% of the parent element's height.
                        </li>
                        <li class="list-group-item">
                            <strong>padding</strong>: Defines the inner space between the content and the border of an element. The values can be specified individually for each side (top, right, bottom, left) or in shorthand. For example:
                            <pre><code>padding: 10px 20px;</code></pre>
                            This sets 10 pixels of padding on the top and bottom, and 20 pixels on the right and left. Another example:
                            <pre>
                            <code>
padding-top: 5px;
padding-right: 15px;
padding-bottom: 5px;
padding-left: 15px;
                            </code>
                            </pre>
                            This sets specific padding values for each side.
                        </li>
                        <li class="list-group-item">
                            <strong>margin</strong>: Defines the outer space around an element. Like padding, the values can be specified for each side individually or in shorthand. For example:
                            <pre><code>margin: 15px 30px;</code></pre>
                            This sets 15 pixels of margin on the top and bottom, and 30 pixels on the right and left. Another example:
                            <pre>
                            <code>
margin-top: 

10px;
margin-right: 20px;
margin-bottom: 10px;
margin-left: 20px;
                            </code>
                            </pre>
                            This sets specific margin values for each side.
                        </li>
                        <li class="list-group-item">
                            <strong>border</strong>: Defines the border of an element, including its thickness, style, and color. For example:
                            <pre><code>border: 1px solid black;</code></pre>
                            This sets a black, solid border with a thickness of 1 pixel. Another example:
                            <pre>
                            <code>
border-width: 2px;
border-style: dashed;
border-color: red;
                            </code>
                            </pre>
                            This sets a red, dashed border with a thickness of 2 pixels.
                        </li>
                        <li class="list-group-item">
                            <strong>box-sizing</strong>: Defines how the width and height of an element are calculated. For example:
                            <pre><code>box-sizing: border-box;</code></pre>
                            This ensures that the width and height include the padding and border. Another example:
                            <pre><code>box-sizing: content-box;</code></pre>
                            This includes only the content in the width and height calculations.
                        </li>
                    </ul>
                </div>
            </div>
        </div>

        <!-- Layout and Positioning Section -->
        <div class="accordion-item">
            <h2 class="accordion-header">
                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#layoutPositioningSection" aria-expanded="false" aria-controls="layoutPositioningSection">
                    Layout and Positioning
                </button>
            </h2>
            <div id="layoutPositioningSection" class="accordion-collapse collapse">
                <div class="accordion-body">
                    <ul class="list-group">
                        <li class="list-group-item">
                            <strong>display</strong>: Controls how an element is displayed. For example:
                            <pre><code>display: block;</code></pre>
                            This makes the element take up the entire available width. Other examples:
                            <pre><code>display: inline;</code></pre>
                            This makes the element take up only the necessary space.
                            <pre><code>display: flex;</code></pre>
                            This allows for flexible layout.
                            <pre><code>display: grid;</code></pre>
                            This enables grid layout.
                        </li>
                        <li class="list-group-item">
                            <strong>position</strong>: Defines the positioning type of an element. For example:
                            <pre><code>position: static;</code></pre>
                            This is the default positioning. Other examples:
                            <pre><code>position: relative;</code></pre>
                            This allows positioning relative to the element's normal position.
                            <pre><code>position: absolute;</code></pre>
                            This positions the element relative to its closest positioned ancestor.
                            <pre><code>position: fixed;</code></pre>
                            This positions the element relative to the browser window.
                        </li>
                        <li class="list-group-item">
                            <strong>top / right / bottom / left</strong>: Defines an element's position relative to its positioning container. For example:
                            <pre>
                            <code>
position: absolute;
top: 10px;
left: 20px;
                            </code>
                            </pre>
                            This moves the element 10 pixels down and 20 pixels to the right from its container.
                        </li>
                        <li class="list-group-item">
                            <strong>float</strong>: Used to align an element to the left or right within its container. For example:
                            <pre><code>float: left;</code></pre>
                            This aligns the element to the left and allows text to wrap around it.
                        </li>
                        <li class="list-group-item">
                            <strong>flexbox</strong>: A layout model that allows elements to be aligned in a flexible container. For example:
                            <pre>
                            <code>
display: flex;
justify-content: center;
align-items: center;
                            </code>
                            </pre>
                            This centers the elements both horizontally and vertically within the container.
                        </li>
                        <li class="list-group-item">
                            <strong>grid</strong>: A grid system for layout, allowing elements to be placed in rows and columns. For example:
                            <pre>
                            <code>
display: grid;
grid-template-columns: repeat(3, 1fr);
grid-template-rows: auto;
                            </code>
                            </pre>
                            This creates a grid with three equally-sized columns and automatically-sized rows.
                        </li>
                    </ul>
                </div>
            </div>
        </div>

        <!-- Animation and Transition Section -->
        <div class="accordion-item">
            <h2 class="accordion-header">
                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#animationSection" aria-expanded="false" aria-controls="animationSection">
                    Animation and Transition
                </button>
            </h2>
            <div id="animationSection" class="accordion-collapse collapse">
                <div class="accordion-body">
                    <ul class="list-group">
                        <li class="list-group-item">
                            <strong>transition</strong>: Defines how CSS property changes are animated (e.g., duration and type of transition). For example:
                            <pre>
                            <code>
transition: all 0.3s ease;
                            </code>
                            </pre>
                            This means that all property changes will be animated over 0.3 seconds with an <code>ease</code> transition curve.
                        </li>
                        <li class="list-group-item">
                            <strong>animation</strong>: Allows defining animations using keyframes. For example:
                            <pre>
                            <code>
animation: slide 2s infinite;
                            </code>
                            </pre>
                            This means that the animation named <code>slide</code> will last 2 seconds and repeat indefinitely.
                        </li>
                        <li class="list-group-item">
                            <strong>keyframes</strong>: Defines the steps of the animation with key points where style changes occur. For example:
                            <pre>
                            <code>
&#64keyframes slide {
    from { left: 0; }
    to { left: 100px; }
}
                            </code>
                            </pre>
                            This defines an animation where an element moves from 0 to 100 pixels to the right.
                        </li>
                        <li class="list-group-item">
                            <strong>transform</strong>: Applies transformations to an element such as rotation, scaling, or translation. For example:
                            <pre>
                            <code>
transform: rotate(45deg);
                            </code>
                            </pre>
                            This rotates the element by 45 degrees. Another example:
                            <pre>
                            <code>
transform: scale(1.5);
                            </code>
                            </pre>
                            This scales the element by 1.5 times its original size.
                        </li>
                        <li class="list-group-item">
                            <strong>transition-delay</strong>: Defines the delay before the transition starts. For example:
                            <pre>
                            <code>
transition-delay: 0.5s;
                            </code>
                            </pre>
                            This means that the transition will start 0.5 seconds after the property change is triggered.
                        </li>
                        <li class="list-group-item">
                            <strong>transition-timing-function</strong>: Controls the pacing of the animation over time (e.g., <code>ease</code>, <code>linear</code>). For example:
                            <pre>
                            <code>
transition-timing-function: ease;
                            </code>
                            </pre>
                            This starts slowly, speeds up, and then slows down again. Another example:
                            <pre>
                            <code>
transition-timing-function: linear;
                            </code>
                            </pre>
                            This maintains a constant speed throughout the transition.
                        </li>
                    </ul>
                </div>
            </div>
        </div>

    </div>
</div>
<p>&nbsp;</p>
<div class="container mt-5">
    <h1 class="text-center text-primary mb-4">JavaScript Vocabulary</h1>

    <div class="accordion">
        <!-- Section Variables and Data Types -->
        <div class="accordion-item">
            <h2 class="accordion-header">
                <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#variablesSection" aria-expanded="false" aria-controls="variablesSection">
                    Variables and Data Types
                </button>
            </h2>
            <div id="variablesSection" class="accordion-collapse collapse">
                <div class="accordion-body">
                    <ul class="list-group">
                        <li class="list-group-item">
                            <strong>var</strong> : Declares a global or function-scoped variable. The scope of the variable is the entire function, even if it is declared inside a block. For example:
                            <pre>
                            <code>
function example() {
    if (true) {
        var x = 10;
    }
    console.log(x); // 10, because var is function-scoped
}
                                </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>let</strong> : Declares a block-scoped variable. Used to avoid hoisting, meaning the variable is only accessible in the block where it is declared. For example:
                            <pre>
                            <code>
function example() {
    if (true) {
        let y = 20;
        console.log(y); // 20
    }
    console.log(y); // Error, y is not defined
}
                                </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>const</strong> : Declares a constant, a variable whose value cannot be reassigned. The scope is also limited to the block where it is declared. For example:
                            <pre>
                            <code>
function example() {
    const z = 30;
    console.log(z); // 30
    z = 40; // Error, z cannot be reassigned
}
                                </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>String</strong> : Data type used to represent text. Strings can be created using single or double quotes. For example:
                            <pre>
                            <code>
let text = "Hello";
let anotherText = 'Hi';
                                </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>Number</strong> : Data type for representing numbers, both integers and floating-point. For example:
                            <pre>
                            <code>
let integer = 42;
let float = 3.14;
                                </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>Boolean</strong> : Logical data type that can be <code>true</code> or <code>false</code>. Used for conditions and comparisons. For example:
                            <pre>
                            <code>
let isTrue = true;
let isFalse = false;
                                </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>Array</strong> : Collection of elements that can be of any type. Elements are accessed by their index. For example:
                            <pre>
                            <code>
let array = [1, 2, 3];
console.log(array[0]); // 1
                                </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>Object</strong> : Collection of key-value pairs, where each key is a string and each value can be of any type. For example:
                            <pre>
                            <code>
let person = { name: "Alice", age: 25 };
console.log(person.name); // Alice
                                </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>null</strong> : Special value representing the absence of value. Used to indicate that a variable has no assigned value. For example:
                            <pre>
                            <code>
let a = null;
console.log(a); // null
                                </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>undefined</strong> : Represents a variable that has been declared but not yet assigned a value. For example:
                            <pre>
                            <code>
let b;
console.log(b); // undefined
                                </code>
                            </pre>
                        </li>
                    </ul>
                </div>
            </div>
        </div>

        <!-- Section Functions -->
        <div class="accordion-item">
            <h2 class="accordion-header">
                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#functionsSection" aria-expanded="false" aria-controls="functionsSection">
                    Functions
                </button>
            </h2>
            <div id="functionsSection" class="accordion-collapse collapse">
                <div class="accordion-body">
                    <ul class="list-group">
                        <li class="list-group-item">
                            <strong>function</strong> : Declares a function that can be called later. For example:
                            <pre>
                            <code>
function myFunction() {
    // Function code
}
                                </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>return</strong> : Statement that ends a function and returns a value. For example:
                            <pre>
                            <code>
function add(a, b) {
    return a + b;
}
                                </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>arrow function</strong> : Concise syntax for defining anonymous functions. For example:
                            <pre>
                            <code>
const add = (a, b) => a + b;
                                </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>callback</strong> : Function passed as an argument to another function and executed after an operation. For example:
                            <pre>
                            <code>
function asyncProcess(callback) {
    setTimeout(() => {
        // Asynchronous operation completed
        callback();
    }, 1000);
}
                                </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>closure</strong> : Function that has access to its external context variables even after the function has been executed. For example:
                            <pre>
                            <code>
function createCounter() {
    let count = 0;
    return function() {
        count++;
    return count;
    };
}
const counter = createCounter();
console.log(counter()); // 1
console.log(counter()); // 2
                                </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>async / await</strong> : Keywords for handling asynchronous operations in JavaScript. For example:
                            <pre>
                            <code>
async function fetchData() {
    let response = await fetch('https://api.example.com/data');
    let data = await response.json();
    console.log(data);
}
                                </code>
                            </pre>
                        </li>
                    </ul>
                </div>
            </div>
        </div>

        <!-- Section Loops and Conditions -->
        <div class="accordion-item">
            <h2 class="accordion-header">
                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#loopsConditionsSection" aria-expanded="false" aria-controls="loopsConditionsSection">
                    Loops and Conditions
                </button>
            </h2>
            <div id="loopsConditionsSection" class="accordion-collapse collapse">
                <div class="accordion-body">
                    <ul class="list-group">
                        <li class="list-group-item">
                            <strong>if / else</strong> : Executes a block of code if a condition is true, and another block if it is false. For example:
                            <pre>
                            <code>
if (condition) {
    // Code to execute if condition is true
} else {
    // Code to execute if condition is false
}
                        </code>
                        </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>switch</strong> : Evaluates an expression and executes a block of code corresponding to the value of the expression. For example:
                            <pre>
                            <code>
switch (expression) {
    case value1:
        // Code to execute if expression equals value1
    break;
    case value2:
        // Code to execute if expression equals value2
    break;
    default:
        // Code to execute if none of the values match
}
                        </code>
                        </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>for</strong> : Loop that runs a defined number of times. For example:
                            <pre>
                            <code>
for (int i = 0; i &lt; n; i++) {
    // Code to execute n times
}
                        </code>
                        </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>while</strong> : Loop that runs as long

 as a condition is true. For example:
                            <pre>
                            <code>
while (condition) {
    // Code to execute as long as the condition is true
}
                        </code>
                        </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>forEach</strong> : Method that executes a function for each element in an array. For example:
                            <pre>
                            <code>
array.forEach(element => {
    // Code to execute for each element
});
                        </code>
                        </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>map</strong> : Method that creates a new array by calling a function on each element of the original array. For example:
                            <pre>
                            <code>
let newArray = array.map(element => {
    // Transform each element
    return newElement;
});
                        </code>
                        </pre>
                        </li>
                    </ul>
                </div>
            </div>
        </div>

        <!-- Section DOM Manipulation -->
        <div class="accordion-item">
            <h2 class="accordion-header">
                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#domSection" aria-expanded="false" aria-controls="domSection">
                    DOM Manipulation
                </button>
            </h2>
            <div id="domSection" class="accordion-collapse collapse">
                <div class="accordion-body">
                    <ul class="list-group">
                        <li class="list-group-item">
                            <strong>document.getElementById()</strong> : Retrieves an HTML element by its ID. For example:
                            <pre>
                            <code>
let element = document.getElementById("myId");
                                </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>document.querySelector()</strong> : Selects the first element that matches a given CSS selector. For example:
                            <pre>
                            <code>
let element = document.querySelector(".myClass");
                                </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>innerHTML</strong> : Property that sets or retrieves the HTML content of an element. For example:
                            <pre>
                            <code>
element.innerHTML = "New content";
                                </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>addEventListener()</strong> : Attaches an event listener to an element. For example:
                            <pre>
                            <code>
element.addEventListener("click", function() {
    // Code to execute on click
});
                                </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>removeEventListener()</strong> : Removes an event listener from an element. For example:
                            <pre>
                            <code>
element.removeEventListener("click", myFunction);
                                </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>createElement()</strong> : Creates a new HTML element. For example:
                            <pre>
                            <code>
let newElement = document.createElement("div");
                                </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>appendChild()</strong> : Adds a child element to a parent element. For example:
                            <pre>
                            <code>
parentElement.appendChild(newElement);
                                </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>removeChild()</strong> : Removes a child element from a parent element. For example:
                            <pre>
                            <code>
parentElement.removeChild(childElement);
                                </code>
                            </pre>
                        </li>
                    </ul>
                </div>
            </div>
        </div>

        <!-- Section Asynchronous and Promises -->
        <div class="accordion-item">
            <h2 class="accordion-header">
                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#asyncPromisesSection" aria-expanded="false" aria-controls="asyncPromisesSection">
                    Asynchronous and Promises
                </button>
            </h2>
            <div id="asyncPromisesSection" class="accordion-collapse collapse">
                <div class="accordion-body">
                    <ul class="list-group">
                        <li class="list-group-item">
                            <strong>Promise</strong> : Object representing an asynchronous operation and its future results. For example:
                            <pre>
                            <code>
let promise = new Promise((resolve, reject) => {
    // Asynchronous operation
    if (success) {
        resolve(result);
    } 
    else {
        reject(error);
    }
});
                                </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>then()</strong> : Method called when the promise is resolved. For example:
                            <pre>
                            <code>
promise.then(result => {
    // Code to execute when the promise is resolved
});
                                </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>catch()</strong> : Method called when the promise is rejected or an error occurred. For example:
                            <pre>
                            <code>
promise.catch(error => {
    // Code to execute when the promise is rejected
});
                                </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>async</strong> : Keyword that allows writing asynchronous functions in JavaScript. For example:
                            <pre>
                            <code>
async function myFunction() {
    // Asynchronous code
}
                                </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>await</strong> : Keyword used to wait for the resolution of a promise inside an <code>async</code> function. For example:
                            <pre>
                            <code>
async function myFunction() {
    let result = await promise;
    // Code to execute after the promise is resolved
}
                                </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>setTimeout()</strong> : Function that executes code after a specified delay. For example:
                            <pre>
                            <code>
setTimeout(() => {
    // Code to execute after the delay
}, delayInMilliseconds);
                                </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>setInterval()</strong> : Function that executes code at regular intervals. For example:
                            <pre>
                            <code>
setInterval(() => {
    // Code to execute at each interval
}, intervalInMilliseconds);
                                </code>
                            </pre>
                        </li>
                    </ul>
                </div>
            </div>
        </div>

    </div>
</div>
<p>&nbsp;</p>
<div class="container mt-5">
    <h1 class="text-center text-primary mb-4">TypeScript Vocabulary</h1>

    <div class="accordion">
        <!-- Section Typing -->
        <div class="accordion-item">
            <h2 class="accordion-header">
                <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#typesSection" aria-expanded="false" aria-controls="typesSection">
                    Typing in TypeScript
                </button>
            </h2>
            <div id="typesSection" class="accordion-collapse collapse">
                <div class="accordion-body">
                    <ul class="list-group">
                        <li class="list-group-item">
                            <strong>any</strong>: A type that allows a variable to contain any value. Used when the type of the variable is unknown beforehand. Example:
                            <pre>
                            <code>
let value: any = "Hello";
value = 42; // Type can be changed
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>string</strong>: A type used for strings. Example:
                            <pre><code>let name: string = "Alice";</code></pre>
                        </li>
                        <li class="list-group-item">
                            <strong>number</strong>: A type used for numbers. Can represent integers and floating-point numbers. Example:
                            <pre><code>let age: number = 30;</code></pre>
                        </li>
                        <li class="list-group-item">
                            <strong>boolean</strong>: A type used to represent boolean values (<code>true</code> or <code>false</code>). Example:
                            <pre><code>let isActive: boolean = true;</code></pre>
                        </li>
                        <li class="list-group-item">
                            <strong>void</strong>: A type used for functions that do not return a value. Example:
                            <pre>
                            <code>
function logMessage(message: string): void {
    console.log(message);
}
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>null / undefined</strong>: Types representing an absence of value. <code>null</code> is used to indicate an intentionally missing value, while <code>undefined</code> means a variable has not been initialized. Example:
                            <pre>
                            <code>
let value: null = null;
let notInitialized: undefined = undefined;
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>array</strong>: A typed array, defined for example with <code>number[]</code> or <code>Array&lt;number&gt;</code>. Used to store a collection of elements of the same type. Example:
                            <pre><code>let numbers: number[] = [1, 2, 3, 4, 5];</code></pre>
                        </li>
                        <li class="list-group-item">
                            <strong>tuple</strong>: A fixed-length array where each element can have a different type. Used to represent a set of values of different types. Example:
                            <pre><code>let person: [string, number] = ["Alice", 30];</code></pre>
                        </li>
                        <li class="list-group-item">
                            <strong>enum</strong>: An enumeration that allows defining a set of named values. Used to represent a set of constant values. Example:
                            <pre>
                            <code>
enum Color {
    Red,
    Green,
    Blue
}
let color: Color = Color.Green;
                            </code>
                            </pre>
                        </li>
                    </ul>
                </div>
            </div>
        </div>

        <!-- Section Functions -->
        <div class="accordion-item">
            <h2 class="accordion-header">
                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#functionsSection" aria-expanded="false" aria-controls="functionsSection">
                    Functions in TypeScript
                </button>
            </h2>
            <div id="functionsSection" class="accordion-collapse collapse">
                <div class="accordion-body">
                    <ul class="list-group">
                        <li class="list-group-item">
                            <strong>parameter types</strong>: You can specify the type of function parameters to ensure the arguments passed are of the expected type. Example:
                            <pre>
                            <code>
function greet(name: string): void {
    console.log("Hello, " + name);
}
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>return type</strong>: You can specify the return type of a function to indicate what type of value the function returns. Example:
                            <pre>
                            <code>
function sum(a: number, b: number): number {
    return a + b;
}
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>optional parameters</strong>: Use a question mark (<code>?</code>) to indicate that a parameter is optional. If the parameter is not provided, it will be <code>undefined</code>. Example:
                            <pre>
                            <code>
function log(message?: string): void {
    if (message) {
        console.log(message);
    } else {
        console.log("No message provided");
    }
}
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>default parameters</strong>: Allows you to define a default value for a parameter. If no argument is passed for that parameter, the default value will be used. Example:
                            <pre>
                            <code>
function increment(n: number = 1): number {
    return n + 1;
}
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>rest parameters</strong>: Use <code>...</code> to represent a variable number of arguments. Rest parameters are grouped into an array. Example:
                            <pre>
                            <code>
function sum(...numbers: number[]): number {
    return numbers.reduce((acc, curr) => acc + curr, 0);
}
                            </code>
                            </pre>
                        </li>
                    </ul>
                </div>
            </div>
        </div>

        <!-- Section Interfaces and Types -->
        <div class="accordion-item">
            <h2 class="accordion-header">
                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#interfacesSection" aria-expanded="false" aria-controls="interfacesSection">
                    Interfaces and Types
                </button>
            </h2>
            <div id="interfacesSection" class="accordion-collapse collapse">
                <div class="accordion-body">
                    <ul class="list-group">
                        <li class="list-group-item">
                            <strong>interface</strong>: Declares a structure that objects or classes must adhere to. Used to define a contract that objects must respect. Example:
                            <pre>
                            <code>
interface Person {
    name: string;
    age: number;
}
let alice: Person = { name: "Alice", age: 30 };
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>type alias</strong>: Allows you to create a name for an existing type. Used to simplify complex types or give meaningful names to types. Example:
                            <pre>
                            <code>
type ID = string | number;
let userId: ID = "12345"; // Can be a string or number
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>readonly</strong>: A property or parameter that cannot be changed after initialization. Used to create immutable properties. Example:
                            <pre>
                            <code>
interface Person {
    readonly id: number;
    name: string;
}
let alice: Person = { id: 1, name: "Alice" };
// alice.id = 2; // Error: id is read-only
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>optional properties</strong>: Optional properties in an interface. Used to indicate that a property may or may not be present. Example:
                            <pre>
                            <code>
interface Person {
    name: string;
    age?: number; // Optional property
}
let alice: Person = { name: "Alice" }; // age is optional
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>index signatures</strong>: Allows defining dynamic types for object keys. Used to represent objects with dynamic keys. Example:
                            <pre>
                            <code>
interface StringArray {
    [index: number]: string;
}
let myArray: StringArray = ["Alice", "Bob"];
let firstElement: string = myArray[0]; // Accesses the first element
                            </code>
                            </pre>
                        </li>
                    </ul>
                </div>
            </div>
        </div>

        <!-- Section Classes -->
        <div class="accordion-item">
            <h2 class="accordion-header">
                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#classesSection" aria-expanded="false" aria-controls="classesSection">
                    Classes in TypeScript
                </button>
            </h2>
            <div id="classesSection" class="accordion-collapse collapse">
                <div class="accordion-body">
                    <ul class="list-group">
                        <li class="list-group-item">
                            <strong>class</strong>: Declares a class with properties and methods. Used to create objects with defined properties and behaviors. Example:
                            <pre>
                            <code>
class Person {
    name: string;
    constructor(name: string) {
        this.name = name;
    }
    greet() {
        console.log("Hello, " + this.name);
    }
}
let alice = new Person("Alice");
alice.greet(); // Displays "Hello, Alice"
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>constructor</strong>: A special method used to create an instance of a class. Initializes the object's properties. Example:
                            <pre>
                            <code>
class Person {
    name: string;
    constructor(name: string) {
        this.name = name;
    }
}
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>public / private / protected</strong>: Access modifiers for class members. <code>public</code> is accessible everywhere, <code>private</code> is only accessible within the class, and <code>protected</code> is accessible within the class and its subclasses. Example:
                            <pre>
                            <code>
class Person {
    public name: string;
    private age: number;
    protected address: string;
    constructor(name: string, age: number, address: string) {
        this.name = name;
        this.age = age;
        this.address = address;
    }
}
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>readonly</strong>: Properties that cannot be modified after initialization. Used to create immutable properties. Example:
                            <pre>
                            <code>
class Person {
    readonly id: number;
    name: string;
    constructor(id: number, name: string) {
        this.id = id;
        this.name = name;
    }
}
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>static</strong>: Defines class members that are shared across all instances of the class. Used for properties or methods that belong to the class itself rather than a specific instance. Example:
                            <pre>
                            <code>
class Counter {
    static count: number = 0;
    static increment() {
        Counter.count++;
    }
}
Counter.increment();
console.log(Counter.count); // Displays 1
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>extends</strong>: Used to inherit from another class. Allows a class to derive from another class and reuse its properties and methods. Example:
                            <pre>
                            <code>
class Employee extends Person {
    constructor(name: string, age: number, address: string, public jobTitle: string) {
        super(name, age, address);
    }
}
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>super</strong>: Allows calling the constructor or methods of a parent class from a child class. Used to access the parent class's members. Example:
                            <pre>
                            <code>
class Employee extends Person {
    constructor(name: string, age: number, address: string, public jobTitle: string) {
        super(name, age, address);
    }
    displayJobTitle() {
        console.log(this.jobTitle);
    }
}
                            </code>
                            </pre>
                        </li>
                    </ul>
                </div>
            </div>
        </div>

        <!-- Section Generics -->
        <div class="accordion-item">
            <h2 class="accordion-header">
                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#genericsSection" aria-expanded="false" aria-controls="genericsSection">
                    Generics in TypeScript
                </button>
            </h2>
            <div id="genericsSection" class="accordion-collapse collapse">
                <div class="accordion-body">
                    <ul class="list-group">
                        <li class="list-group-item">
                            <strong>generics</strong>: Allows creating functions or classes that can work with multiple types. Used to write reusable and type-safe code. Example:
                            <pre>
                            <code>
function identity&lt;T&gt;(arg: T): T {
    return arg;
}
let output1 = identity&lt;string&gt;("Hello"); // Uses 'string' as the type
let output2 = identity&lt;number&gt;(42); // Uses 'number' as the type
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>generic constraints</strong>: Restricts the types used with generics. Used to impose constraints on generic types to ensure they possess certain properties or methods. Example:
                            <pre>
                            <code>
function logLength&lt;T extends { length: number }&gt;(arg: T): void {
    console.log(arg.length);
}
logLength("Hello"); // Works because 'string' has a 'length' property
logLength([1, 2, 3]); // Works because 'array' has a 'length' property
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>generics in classes</strong>: Using generics in classes to make methods and properties more flexible. Used to create reusable and type-safe classes. Example:
                            <pre>
                            <code>
class GenericNumber&lt;T&gt; {
    zeroValue: T;
    add: (x: T, y: T) =&gt; T;
}
let myGenericNumber = new GenericNumber&lt;number&gt;();
myGenericNumber.zeroValue = 0;
myGenericNumber.add = (x, y) => x + y;
                            </code>
                            </pre>
                        </li>
                    </ul>
                </div>
            </div>
        </div>
    </div>
</div>
<p>&nbsp;</p>
<div class="container mt-5">
    <h1 class="text-center text-primary mb-4">Bootstrap Vocabulary</h1>

    <div class="accordion">
        <!-- Bootstrap Grid System Section -->
        <div class="accordion-item">
            <h2 class="accordion-header">
                <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#gridSystemSection" aria-expanded="false" aria-controls="gridSystemSection">
                    Bootstrap Grid System
                </button>
            </h2>
            <div id="gridSystemSection" class="accordion-collapse collapse">
                <div class="accordion-body">
                    <ul class="list-group">
                        <li class="list-group-item">
                            <strong>container</strong> : Central container element that contains and centers content in the Bootstrap grid. Used to create a responsive layout and align content consistently. Example:
                            <pre>
                            <code>
&lt;div class="container"&gt;
    &lt;h1&gt;Welcome&lt;/h1&gt;
    &lt;p&gt;This is a Bootstrap container.&lt;/p&gt;
&lt;/div&gt;
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>row</strong> : Defines a row in the Bootstrap grid to organize columns. Used to align columns horizontally. Example:
                            <pre>
                            <code>
&lt;div class="container"&gt;
    &lt;div class="row"&gt;
        &lt;div class="col"&gt;
            Column 1
        &lt;/div&gt;
        &lt;div class="col"&gt;
            Column 2
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>col</strong> : Defines a column in the grid. Bootstrap uses a 12-column grid system, and you can adjust the width using classes like <code>.col-6</code> (width of 6 columns out of 12). Used to create responsive layouts. Example:
                            <pre>
                            <code>
&lt;div class="container"&gt;
    &lt;div class="row"&gt;
        &lt;div class="col-6"&gt;
            Column of 6 units
        &lt;/div&gt;
        &lt;div class="col-6"&gt;
            Column of 6 units
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>col-sm, col-md, col-lg, col-xl</strong> : Column classes that adjust the width based on the screen size. For example, <code>col-md-6</code> will take up half the width on a medium or larger screen. Used to create responsive layouts for different screen sizes. Example:
                            <pre>
                            <code>
&lt;div class="container"&gt;
    &lt;div class="row"&gt;
        &lt;div class="col-sm-12 col-md-6 col-lg-4"&gt;
            Responsive Column
        &lt;/div&gt;
        &lt;div class="col-sm-12 col-md-6 col-lg-8"&gt;
            Responsive Column
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>offset</strong> : Offsets a column by a certain number of columns, for example <code>.offset-md-3</code> offsets a column by 3 units on a medium screen. Used to create empty space to the left of columns. Example:
                            <pre>
                            <code>
&lt;div class="container"&gt;
    &lt;div class="row"&gt;
        &lt;div class="col-md-6 offset-md-3"&gt;
            Column offset by 3 units
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
                            </code>
                            </pre>
                        </li>
                    </ul>
                </div>
            </div>
        </div>

        <!-- Typography Section -->
        <div class="accordion-item">
            <h2 class="accordion-header">
                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#typographySection" aria-expanded="false" aria-controls="typographySection">
                    Typography
                </button>
            </h2>
            <div id="typographySection" class="accordion-collapse collapse">
                <div class="accordion-body">
                    <ul class="list-group">
                        <li class="list-group-item">
                            <strong>h1, h2, h3, h4, h5, h6</strong> : Title classes corresponding to their respective HTML tags. Used to apply Bootstrap styles to titles. Example:
                            <pre>
                            <code>
&lt;h1 class="h1"&gt;Main Title&lt;/h1&gt;
&lt;h2 class="h2"&gt;Subtitle&lt;/h2&gt;
&lt;h3 class="h3"&gt;Sub-subtitle&lt;/h3&gt;
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>display-1, display-2, ... display-6</strong> : Classes for larger and bolder titles compared to <code>&lt;h1&gt;</code> to <code>&lt;h6&gt;</code>. Used to draw attention to important titles. Example:
                            <pre>
                            <code>
&lt;h1 class="display-1"&gt;Display Title 1&lt;/h1&gt;
&lt;h2 class="display-2"&gt;Display Title 2&lt;/h2&gt;
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>lead</strong> : Used for larger introductory texts, often a descriptive paragraph. Example:
                            <pre>
                            <code>
&lt;p class="lead"&gt;This is a larger introductory text.&lt;/p&gt;
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>text-center, text-left, text-right</strong> : Aligns text to the center, left, or right, respectively. Used to control text alignment. Example:
                            <pre>
                            <code>
&lt;p class="text-center"&gt;Centered text&lt;/p&gt;
&lt;p class="text-left"&gt;Left-aligned text&lt;/p&gt;
&lt;p class="text-right"&gt;Right-aligned text&lt;/p&gt;
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>text-muted</strong> : Used to make text more subdued or pale. Example:
                            <pre>
                            <code>
&lt;p class="text-muted"&gt;Muted text&lt;/p&gt;
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>blockquote</strong> : Used to style quotes with an indentation compared to normal text. Example:
                            <pre>
                            <code>
&lt;blockquote class="blockquote"&gt;
    &lt;p class="mb-0"&gt;This is a quote.&lt;/p&gt;
    &lt;footer class="blockquote-footer"&gt;Source of the quote&lt;/footer&gt;
&lt;/blockquote&gt;
                            </code>
                            </pre>
                        </li>
                    </ul>
                </div>
            </div>
        </div>

        <!-- Buttons Section -->
        <div class="accordion-item">
            <h2 class="accordion-header">
                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#buttonsSection" aria-expanded="false" aria-controls="buttonsSection">
                    Buttons
                </button>
            </h2>
            <div id="buttonsSection" class="accordion-collapse collapse">
                <div class="accordion-body">
                    <ul class="list-group">
                        <li class="list-group-item">
                            <strong>btn</strong> : Base class used to style Bootstrap buttons. Used to apply basic styles to buttons. Example:
                            <pre>
                            <code>
&lt;button class="btn"&gt;Button&lt;/button&gt;
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>btn-primary</strong> : Used to style a button with the primary color. Example:
                            <pre>
                            <code>
&lt;button class="btn btn-primary"&gt;Primary Button&lt;/button&gt;
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>btn-secondary, btn-success, btn-danger, btn-warning</strong> : Button classes for specific colors, such as success (green), warning (yellow), etc. Used to indicate different actions or states. Example:
                            <pre>
                            <code>
&lt;button class="btn btn-secondary"&gt;

Secondary Button&lt;/button&gt;
&lt;button class="btn btn-success"&gt;Success Button&lt;/button&gt;
&lt;button class="btn btn-danger"&gt;Danger Button&lt;/button&gt;
&lt;button class="btn btn-warning"&gt;Warning Button&lt;/button&gt;
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>btn-outline-*</strong> : Button versions with only stylized outlines, such as <code>btn-outline-primary</code> for a blue outline button. Used for less prominent buttons. Example:
                            <pre>
                            <code>
&lt;button class="btn btn-outline-primary"&gt;Blue Outline Button&lt;/button&gt;
&lt;button class="btn btn-outline-secondary"&gt;Gray Outline Button&lt;/button&gt;
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>btn-lg, btn-sm</strong> : Classes used to adjust the size of a button (large or small). Used to fit buttons to different UI sizes. Example:
                            <pre>
                            <code>
&lt;button class="btn btn-primary btn-lg"&gt;Large Button&lt;/button&gt;
&lt;button class="btn btn-primary btn-sm"&gt;Small Button&lt;/button&gt;
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>btn-block</strong> : Used to make a button full width relative to its parent. Example:
                            <pre>
                            <code>
&lt;button class="btn btn-primary btn-block"&gt;Full-width Button&lt;/button&gt;
                            </code>
                            </pre>
                        </li>
                    </ul>
                </div>
            </div>
        </div>

        <!-- Bootstrap Components Section -->
        <div class="accordion-item">
            <h2 class="accordion-header">
                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#componentsSection" aria-expanded="false" aria-controls="componentsSection">
                    Bootstrap Components
                </button>
            </h2>
            <div id="componentsSection" class="accordion-collapse collapse">
                <div class="accordion-body">
                    <ul class="list-group">
                        <li class="list-group-item">
                            <strong>Navbar</strong> : Navigation bar at the top of the page, often used for menus and navigation links. Used to improve site navigation and accessibility. Example:
                            <pre>
                            <code>
&lt;nav class="navbar navbar-expand-lg navbar-light bg-light"&gt;
    &lt;a class="navbar-brand" href="#"&gt;Brand&lt;/a&gt;
    &lt;button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation"&gt;
        &lt;span class="navbar-toggler-icon"&gt;&lt;/span&gt;
    &lt;/button&gt;
    &lt;div class="collapse navbar-collapse" id="navbarNav"&gt;
        &lt;ul class="navbar-nav"&gt;
            &lt;li class="nav-item active"&gt;
                &lt;a class="nav-link" href="#"&gt;Home &lt;span class="sr-only"&gt;(current)&lt;/span&gt;&lt;/a&gt;
            &lt;/li&gt;
            &lt;li class="nav-item"&gt;
                &lt;a class="nav-link" href="#"&gt;Features&lt;/a&gt;
            &lt;/li&gt;
            &lt;li class="nav-item"&gt;
                &lt;a class="nav-link" href="#"&gt;Pricing&lt;/a&gt;
            &lt;/li&gt;
        &lt;/ul&gt;
    &lt;/div&gt;
&lt;/nav&gt;
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>Card</strong> : Component containing content within a box with optional header, body, and footer. Used to display information concisely and attractively. Example:
                            <pre>
                            <code>
&lt;div class="card" style="width: 18rem;"&gt;
    &lt;img src="image.jpg" class="card-img-top" alt="..."&gt;
    &lt;div class="card-body"&gt;
        &lt;h5 class="card-title"&gt;Card title&lt;/h5&gt;
        &lt;p class="card-text"&gt;Some quick example text to build on the card title and make up the bulk of the card's content.&lt;/p&gt;
        &lt;a href="#" class="btn btn-primary"&gt;Go somewhere&lt;/a&gt;
    &lt;/div&gt;
&lt;/div&gt;
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>Modal</strong> : Overlay window on the user interface for displaying additional information or user actions. Used to focus user attention on a specific task. Example:
                            <pre>
                            <code>
&lt;!-- Button trigger modal --&gt;
&lt;button type="button" class="btn btn-primary" data-toggle="modal" data-target="#exampleModal"&gt;
    Launch demo modal
&lt;/button&gt;

&lt;!-- Modal --&gt;
&lt;div class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true"&gt;
    &lt;div class="modal-dialog"&gt;
        &lt;div class="modal-content"&gt;
            &lt;div class="modal-header"&gt;
                &lt;h5 class="modal-title" id="exampleModalLabel"&gt;Modal title&lt;/h5&gt;
                &lt;button type="button" class="close" data-dismiss="modal" aria-label="Close"&gt;
                    &lt;span aria-hidden="true"&gt;&times;&lt;/span&gt;
                &lt;/button&gt;
            &lt;/div&gt;
            &lt;div class="modal-body"&gt;
                ...
            &lt;/div&gt;
            &lt;div class="modal-footer"&gt;
                &lt;button type="button" class="btn btn-secondary" data-dismiss="modal"&gt;Close&lt;/button&gt;
                &lt;button type="button" class="btn btn-primary"&gt;Save changes&lt;/button&gt;
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>Alert</strong> : Notification box to inform the user of an action or important message. Used to display success, error, or warning messages. Example:
                            <pre>
                            <code>
&lt;div class="alert alert-warning" role="alert"&gt;
    This is a warning alert—check it out!
&lt;/div&gt;
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>Badge</strong> : Small component indicating a number or label, usually used next to links or buttons. Used to display notifications or additional information. Example:
                            <pre>
                            <code>
&lt;button type="button" class="btn btn-primary"&gt;
    Notifications &lt;span class="badge badge-light"&gt;4&lt;/span&gt;
&lt;/button&gt;
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>Dropdown</strong> : Dropdown menu to display additional options or actions on a button or link. Used to organize options compactly. Example:
                            <pre>
                            <code>
&lt;div class="dropdown"&gt;
    &lt;button class="btn btn-secondary dropdown-toggle" type="button" id="dropdownMenuButton" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false"&gt;
        Dropdown button
    &lt;/button&gt;
    &lt;div class="dropdown-menu" aria-labelledby="dropdownMenuButton"&gt;
        &lt;a class="dropdown-item" href="#"&gt;Action&lt;/a&gt;
        &lt;a class="dropdown-item" href="#"&gt;Another action&lt;/a&gt;
        &lt;a class="dropdown-item" href="#"&gt;Something else here&lt;/a&gt;
    &lt;/div&gt;
&lt;/div&gt;
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>Accordion</strong> : Accordion display component where one element is expanded at a time, used to show or hide content. Used to organize content compactly and interactively. Example:
                            <pre>
                            <code>
&lt;div class="accordion" id="accordionExample"&gt;
    &lt;div class="card"&gt;
        &lt;div class="card-header" id="headingOne"&gt;
            &lt;h2 class="mb-0"&gt;
                &lt;button class="btn btn-link" type="button" data-toggle="collapse" data-target="#collapseOne" aria-expanded="false" aria-controls="collapseOne"&gt;
                    Collapsible Group Item #1
                &lt;/button&gt;
            &lt;/h2&gt;
        &lt;/div&gt;

        &lt;div id="collapseOne"

 class="collapse show" aria-labelledby="headingOne" data-parent="#accordionExample"&gt;
            &lt;div class="card-body"&gt;
                Some placeholder content for the first accordion panel. This panel is shown by default, thanks to the &lt;code&gt;.show&lt;/code&gt; class.
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="card"&gt;
        &lt;div class="card-header" id="headingTwo"&gt;
            &lt;h2 class="mb-0"&gt;
                &lt;button class="btn btn-link collapsed" type="button" data-toggle="collapse" data-target="#collapseTwo" aria-expanded="false" aria-controls="collapseTwo"&gt;
                    Collapsible Group Item #2
                &lt;/button&gt;
            &lt;/h2&gt;
        &lt;/div&gt;
        &lt;div id="collapseTwo" class="collapse" aria-labelledby="headingTwo" data-parent="#accordionExample"&gt;
            &lt;div class="card-body"&gt;
                Some placeholder content for the second accordion panel. This panel is hidden by default.
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>Carousel</strong> : Component to display a series of elements (images or content) as a slideshow. Used to present multiple elements interactively and attractively. Example:
                            <pre>
                            <code>
&lt;div id="carouselExampleIndicators" class="carousel slide" data-ride="carousel"&gt;
    &lt;ol class="carousel-indicators"&gt;
        &lt;li data-target="#carouselExampleIndicators" data-slide-to="0" class="active"&gt;&lt;/li&gt;
        &lt;li data-target="#carouselExampleIndicators" data-slide-to="1"&gt;&lt;/li&gt;
        &lt;li data-target="#carouselExampleIndicators" data-slide-to="2"&gt;&lt;/li&gt;
    &lt;/ol&gt;
    &lt;div class="carousel-inner"&gt;
        &lt;div class="carousel-item active"&gt;
            &lt;img class="d-block w-100" src="image1.jpg" alt="First slide"&gt;
        &lt;/div&gt;
        &lt;div class="carousel-item"&gt;
            &lt;img class="d-block w-100" src="image2.jpg" alt="Second slide"&gt;
        &lt;/div&gt;
        &lt;div class="carousel-item"&gt;
            &lt;img class="d-block w-100" src="image3.jpg" alt="Third slide"&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;a class="carousel-control-prev" href="#carouselExampleIndicators" role="button" data-slide="prev"&gt;
        &lt;span class="carousel-control-prev-icon" aria-hidden="true"&gt;&lt;/span&gt;
        &lt;span class="sr-only"&gt;Previous&lt;/span&gt;
    &lt;/a&gt;
    &lt;a class="carousel-control-next" href="#carouselExampleIndicators" role="button" data-slide="next"&gt;
        &lt;span class="carousel-control-next-icon" aria-hidden="true"&gt;&lt;/span&gt;
        &lt;span class="sr-only"&gt;Next&lt;/span&gt;
    &lt;/a&gt;
&lt;/div&gt;
                            </code>
                            </pre>
                        </li>
                    </ul>
                </div>
            </div>
        </div>

        <!-- Forms Section -->
        <div class="accordion-item">
            <h2 class="accordion-header">
                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#formsSection" aria-expanded="false" aria-controls="formsSection">
                    Forms
                </button>
            </h2>
            <div id="formsSection" class="accordion-collapse collapse">
                <div class="accordion-body">
                    <ul class="list-group">
                        <li class="list-group-item">
                            <strong>form-control</strong> : Base class used to style input fields such as <code>&lt;input&gt;</code> and <code>&lt;textarea&gt;</code>. Used to make input fields more attractive and consistent. Example:
                            <pre>
                            <code>
&lt;input type="text" class="form-control" placeholder="Enter your name"&gt;
&lt;textarea class="form-control" rows="3" placeholder="Enter your message"&gt;&lt;/textarea&gt;
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>form-group</strong> : Used to group input fields with labels and other related elements in a form. Used to structure input fields clearly. Example:
                            <pre>
                            <code>
&lt;div class="form-group"&gt;
    &lt;label for="exampleInputEmail1"&gt;Email address&lt;/label&gt;
    &lt;input type="email" class="form-control" id="exampleInputEmail1" aria-describedby="emailHelp" placeholder="Enter your email"&gt;
    &lt;small id="emailHelp" class="form-text text-muted"&gt;We'll never share your email with anyone else.&lt;/small&gt;
&lt;/div&gt;
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>form-check</strong> : Class for styling checkboxes and radio buttons. Used to make checkboxes and radio buttons more attractive and consistent. Example:
                            <pre>
                            <code>
&lt;div class="form-check"&gt;
    &lt;input class="form-check-input" type="checkbox" value="" id="defaultCheck1"&gt;
    &lt;label class="form-check-label" for="defaultCheck1"&gt;
        Default option
    &lt;/label&gt;
&lt;/div&gt;
&lt;div class="form-check"&gt;
    &lt;input class="form-check-input" type="radio" name="exampleRadios" id="exampleRadios1" value="option1" checked&gt;
    &lt;label class="form-check-label" for="exampleRadios1"&gt;
        First option
    &lt;/label&gt;
&lt;/div&gt;
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>form-select</strong> : Class for styling a <code>&lt;select&gt;</code> dropdown menu. Used to make dropdown menus more attractive and consistent. Example:
                            <pre>
                            <code>
&lt;select class="form-select" aria-label="Default select example"&gt;
    &lt;option selected&gt;Open this select menu&lt;/option&gt;
    &lt;option value="1"&gt;One&lt;/option&gt;
    &lt;option value="2"&gt;Two&lt;/option&gt;
    &lt;option value="3"&gt;Three&lt;/option&gt;
&lt;/select&gt;
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>input-group</strong> : Used to group an input field with buttons or icons (such as a search bar with a search button). Used to create more functional and interactive input fields. Example:
                            <pre>
                            <code>
&lt;div class="input-group mb-3"&gt;
    &lt;input type="text" class="form-control" placeholder="Search"&gt;
    &lt;div class="input-group-append"&gt;
        &lt;button class="btn btn-outline-secondary" type="button"&gt;Button&lt;/button&gt;
    &lt;/div&gt;
&lt;/div&gt;
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>form-floating</strong> : Class for styling input fields with floating labels inside the field. Used to create modern and attractive input fields. Example:
                            <pre>
                            <code>
&lt;div class="form-floating mb-3"&gt;
    &lt;input type="email" class="form-control" id="floatingInput" placeholder="name@example.com"&gt;
    &lt;label for="floatingInput"&gt;Email address&lt;/label&gt;
&lt;/div&gt;
&lt;div class="form-floating"&gt;
    &lt;textarea class="form-control" placeholder="Leave a comment here" id="floatingTextarea"&gt;&lt;/textarea&gt;
    &lt;label for="floatingTextarea"&gt;Comments&lt;/label&gt;
&lt;/div&gt;
                            </code>
                            </pre>
                        </li>
                    </ul>
                </div>
            </div>
        </div>

        <!-- Utilities Section -->
        <div class="accordion-item">
            <h2 class="accordion-header">
                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#utilitiesSection" aria-expanded="false" aria-controls="utilitiesSection">
                    Utilities
                </button>
            </h2>
            <div id="utilitiesSection" class="accordion-collapse collapse">
                <div class="accordion

-body">
                    <ul class="list-group">
                        <li class="list-group-item">
                            <strong>text-center, text-start, text-end</strong> : Utilities for aligning text to the left, center, or right. Used to control text alignment within elements. Example:
                            <pre>
                            <code>
&lt;p class="text-center"&gt;Centered text&lt;/p&gt;
&lt;p class="text-start"&gt;Left-aligned text&lt;/p&gt;
&lt;p class="text-end"&gt;Right-aligned text&lt;/p&gt;
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>bg-primary, bg-secondary</strong> : Background color classes for elements (e.g., blue for <code>bg-primary</code>). Used to apply predefined background colors to elements. Example:
                            <pre>
                            <code>
&lt;div class="bg-primary text-white"&gt;Blue background with white text&lt;/div&gt;
&lt;div class="bg-secondary text-white"&gt;Gray background with white text&lt;/div&gt;
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>p-1, p-2, ... p-5</strong> : Classes to define the padding (inner spacing) of an element, where the number corresponds to the size. Used to add space inside elements. Example:
                            <pre>
                            <code>
&lt;div class="p-1"&gt;Padding of 1 unit&lt;/div&gt;
&lt;div class="p-3"&gt;Padding of 3 units&lt;/div&gt;
&lt;div class="p-5"&gt;Padding of 5 units&lt;/div&gt;
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>m-1, m-2, ... m-5</strong> : Classes to define the margin (outer spacing) of an element. Used to add space outside elements. Example:
                            <pre>
                            <code>
&lt;div class="m-1"&gt;Margin of 1 unit&lt;/div&gt;
&lt;div class="m-3"&gt;Margin of 3 units&lt;/div&gt;
&lt;div class="m-5"&gt;Margin of 5 units&lt;/div&gt;
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>shadow-sm, shadow-lg</strong> : Classes to add shadows to elements. Used to add different sizes of shadow effects to elements. Example:
                            <pre>
                            <code>
&lt;div class="shadow-sm p-3 mb-5 bg-white rounded"&gt;Small shadow&lt;/div&gt;
&lt;div class="shadow-lg p-3 mb-5 bg-white rounded"&gt;Large shadow&lt;/div&gt;
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>rounded, rounded-circle</strong> : Classes to round the corners of an element or turn it into a circle. Used to apply rounded corners or circular shapes to elements. Example:
                            <pre>
                            <code>
&lt;div class="rounded p-3 mb-5 bg-white"&gt;Rounded corners&lt;/div&gt;
&lt;div class="rounded-circle p-3 mb-5 bg-white"&gt;Circular shape&lt;/div&gt;
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>d-flex, d-block, d-none</strong> : Classes to control the display of elements (flexbox, block, none). Used to manage the layout and visibility of elements. Example:
                            <pre>
                            <code>
&lt;div class="d-flex"&gt;Flexbox display&lt;/div&gt;
&lt;div class="d-block"&gt;Block display&lt;/div&gt;
&lt;div class="d-none"&gt;Hidden display&lt;/div&gt;
                            </code>
                            </pre>
                        </li>
                    </ul>
                </div>
            </div>
        </div>

    </div>
</div>
<p>&nbsp;</p>
<div class="container mt-5">
    <h1 class="text-primary text-center mb-4">C# Programming Vocabulary</h1>

    <div class="accordion">

        <!-- Data Types -->
        <div class="accordion-item">
            <h2 class="accordion-header">
                <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#collapseOne" aria-expanded="false" aria-controls="collapseOne">
                    1. Data Types
                </button>
            </h2>
            <div id="collapseOne" class="accordion-collapse collapse">
                <div class="accordion-body">
                    <ul class="list-group">
                        <li class="list-group-item">
                            <code>int</code>: Integer (32 bits, range from -2,147,483,648 to 2,147,483,647). Used to represent whole numbers. Example:
                            <pre><code>int age = 30;</code></pre>
                        </li>
                        <li class="list-group-item">
                            <code>float</code>: Floating-point number (single precision, 32 bits, approximately 7 significant digits). Used to represent floating-point numbers with single precision. Example:
                            <pre><code>float temperature = 36.6f;</code></pre>
                        </li>
                        <li class="list-group-item">
                            <code>double</code>: Floating-point number (double precision, 64 bits, approximately 15-16 significant digits). Used to represent floating-point numbers with double precision. Example:
                            <pre><code>double distance = 12345.6789;</code></pre>
                        </li>
                        <li class="list-group-item">
                            <code>bool</code>: Boolean value (<code>true</code> or <code>false</code>, 1 bit). Used to represent boolean values. Example:
                            <pre><code>bool isActive = true;</code></pre>
                        </li>
                        <li class="list-group-item">
                            <code>string</code>: String (sequence of Unicode characters, variable length). Used to represent sequences of characters. Example:
                            <pre><code>string name = "Alice";</code></pre>
                        </li>
                        <li class="list-group-item">
                            <code>char</code>: Single character (16 bits, represents a Unicode character). Used to represent a single character. Example:
                            <pre><code>char initial = 'A';</code></pre>
                        </li>
                        <li class="list-group-item">
                            <code>decimal</code>: High-precision floating-point number (128 bits, mainly used for financial calculations, approximately 28-29 significant digits). Example:
                            <pre><code>decimal price = 19.99m;</code></pre>
                        </li>
                        <li class="list-group-item">
                            <code>var</code>: Type inference (the compiler deduces the variable type from the assigned expression). Example:
                            <pre><code>var count = 10; // 'count' is inferred as 'int'</code></pre>
                        </li>
                    </ul>
                </div>
            </div>
        </div>

        <!-- Control Structures -->
        <div class="accordion-item">
            <h2 class="accordion-header">
                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseTwo" aria-expanded="false" aria-controls="collapseTwo">
                    2. Control Structures
                </button>
            </h2>
            <div id="collapseTwo" class="accordion-collapse collapse">
                <div class="accordion-body">
                    <ul class="list-group">
                        <li class="list-group-item">
                            <code>if</code>, <code>else if</code>, <code>else</code>: Conditional statements (execute code based on the truth value of a boolean expression). Example:
                            <pre>
                            <code>
int number = 10;
if (number > 0)
{
    Console.WriteLine("Positive number");
}
else if (number &lt; 0)
{
    Console.WriteLine("Negative number");
}
else
{
    Console.WriteLine("Zero");
}
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <code>switch</code>, <code>case</code>: Conditional structure (selects a block of code to execute based on the value of an expression). Example:
                            <pre>
                            <code>
int day = 3;
switch (day)
{
    case 1:
        Console.WriteLine("Monday");
        break;
    case 2:
        Console.WriteLine("Tuesday");
        break;
    case 3:
        Console.WriteLine("Wednesday");
        break;
    default:
        Console.WriteLine("Another day");
        break;
}
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <code>for</code>, <code>foreach</code>: Loops for iterating over collections (<code>for</code> uses a counter, <code>foreach</code> iterates directly over elements in a collection). Example:
                            <pre>
                            <code>
// For loop
for (int i = 0; i &lt; 5; i++)
{
    Console.WriteLine(i);
}

// Foreach loop
int[] numbers = { 1, 2, 3, 4, 5 };
foreach (int number in numbers)
{
    Console.WriteLine(number);
}
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <code>while</code>, <code>do-while</code>: Loops (<code>while</code> continues as long as a condition is true, <code>do-while</code> executes at least once before checking the condition). Example:
                            <pre>
                            <code>
// While loop
int i = 0;
while (i &lt; 5)
{
    Console.WriteLine(i);
    i++;
}

// Do-while loop
int j = 0;
do
{
    Console.WriteLine(j);
    j++;
} while (j &lt; 5);
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <code>break</code>: Exits a loop or <code>switch</code> (stops execution of the current loop or <code>switch</code>). Example:
                            <pre>
                            <code>
for (int i = 0; i &lt; 10; i++)
{
    if (i == 5)
    {
        break; // Stops the loop when i is 5
    }
    Console.WriteLine(i);
}
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <code>continue</code>: Skip to the next iteration (skips the remaining code in the current iteration and proceeds to the next iteration). Example:
                            <pre>
                            <code>
for (int i = 0; i &lt; 10; i++)
{
    if (i % 2 == 0)
    {
        continue; // Skip the iteration if i is even
    }
    Console.WriteLine(i);
}
                            </code>
                            </pre>
                        </li>
                    </ul>
                </div>
            </div>
        </div>

        <!-- Classes and Objects -->
        <div class="accordion-item">
            <h2 class="accordion-header">
                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseThree" aria-expanded="false" aria-controls="collapseThree">
                    3. Classes and Objects
                </button>
            </h2>
            <div id="collapseThree" class="accordion-collapse collapse">
                <div class="accordion-body">
                    <ul class="list-group">
                        <li class="list-group-item">
                            <code>class</code>: Declares a class (a blueprint defining the properties and methods of an object). Example:
                            <pre>
                            <code>
public class Person
{
    public string Name { get; set; }
    public int Age { get; set; }
}
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <code>object</code>: Instance of a class (a concrete representation of a class in memory). Example:
                            <pre>
                            <code>
Person person = new Person();
person.Name = "Alice";
person.Age = 30;
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <code>constructor</code>: Special method called when creating an object (initializes object properties). Example:
                            <pre>
                            <code>
public class Person
{
    public string Name { get; set; }
    public int Age { get; set; }

    // Constructor
    public Person(string name, int age)
    {
        Name = name;
        Age = age;
    }
}
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <code>this</code>: Reference to the current instance (used to access members of the current instance). Example:
                            <pre>
                            <code>
public class Person
{
    public string Name { get; set; }
    public int Age { get; set; }

    public

 Person(string name, int age)
    {
        this.Name = name;
        this.Age = age;
    }
}
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <code>new</code>: Instantiate an object (creates a new instance of a class). Example:
                            <pre>
                            <code>
Person person = new Person("Alice", 30);
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <code>static</code>: Shared member (belongs to the class rather than to a specific instance). Example:
                            <pre>
                            <code>
public class MathUtilities
{
public static int Add(int a, int b)
    {
    return a + b;
    }
}

// Usage
int sum = MathUtilities.Add(5, 3);
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <code>abstract</code>: Abstract class or method (cannot be instantiated directly, must be inherited and implemented). Example:
                            <pre>
                            <code>
public abstract class Animal
{
    public abstract void MakeSound();
}

public class Dog : Animal
{
    public override void MakeSound()
    {
        Console.WriteLine("Woof");
    }
}
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <code>interface</code>: Declares an interface (defines a contract that implementing classes must follow). Example:
                            <pre>
                            <code>
public interface IMovable
{
    void Move();
}

public class Car : IMovable
{
    public void Move()
    {
        Console.WriteLine("The car is moving");
    }
}
                            </code>
                            </pre>
                        </li>
                    </ul>
                </div>
            </div>
        </div>

        <!-- Methods and Functions -->
        <div class="accordion-item">
            <h2 class="accordion-header">
                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseFour" aria-expanded="false" aria-controls="collapseFour">
                    4. Methods and Functions
                </button>
            </h2>
            <div id="collapseFour" class="accordion-collapse collapse">
                <div class="accordion-body">
                    <ul class="list-group">
                        <li class="list-group-item">
                            <code>void</code>: Method with no return value (used for actions that don’t need a result). Example:
                            <pre>
                            <code>
public void DisplayMessage()
{
    Console.WriteLine("Hello, World!");
}
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <code>return</code>: Return a value (ends the method’s execution and returns a value to the caller). Example:
                            <pre>
                            <code>
public int Add(int a, int b)
{
    return a + b;
}
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <code>public</code>, <code>private</code>, <code>protected</code>, <code>internal</code>: Access modifiers (define the visibility and accessibility of class members). Example:
                            <pre>
                            <code>
public class MyClass
{
    public int PublicProperty { get; set; } // Accessible everywhere
    private int PrivateProperty { get; set; } // Accessible only in this class
    protected int ProtectedProperty { get; set; } // Accessible in this class and derived classes
    internal int InternalProperty { get; set; } // Accessible within the same assembly
}
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <code>params</code>: Variable parameters (allows passing a variable number of arguments to a method). Example:
                            <pre>
                            <code>
public void PrintNumbers(params int[] numbers)
{
    foreach (int number in numbers)
    {
        Console.WriteLine(number);
    }
}
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <code>async</code> / <code>await</code>: Asynchronous (allows executing operations asynchronously without blocking the main thread). Example:
                            <pre>
                            <code>
public async Task&lt;int&gt; GetDataAsync()
{
    await Task.Delay(1000); // Simulates an asynchronous operation
    return 42;
}
                            </code>
                            </pre>
                        </li>
                    </ul>
                </div>
            </div>
        </div>

        <!-- Collections and Arrays -->
        <div class="accordion-item">
            <h2 class="accordion-header">
                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseFive" aria-expanded="false" aria-controls="collapseFive">
                    5. Collections and Arrays
                </button>
            </h2>
            <div id="collapseFive" class="accordion-collapse collapse">
                <div class="accordion-body">
                    <ul class="list-group">
                        <li class="list-group-item">
                            <code>Array[]</code>: Array (collection of elements of the same type, fixed size, fast access by index). Example:
                            <pre>
                            <code>
int[] numbers = new int[5]; // Declares an array of 5 integers
numbers[0] = 1; // Assigns the value 1 to the first element
int firstNumber = numbers[0]; // Accesses the first element
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <code>List&lt;T&gt;</code>: Generic list (collection of elements of the same type, dynamic size, access by index). Example:
                            <pre>
                            <code>
List&lt;int&gt; numbers = new List&lt;int&gt;(); // Declares a list of integers
numbers.Add(1); // Adds an element to the list
int firstNumber = numbers[0]; // Accesses the first element
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <code>Dictionary&lt;TKey, TValue&gt;</code>: Key-value pair collection (allows storing elements associated with a unique key, fast access by key). Example:
                            <pre>
                            <code>
Dictionary&lt;string, int&gt; ages = new Dictionary&lt;string, int&gt;(); // Declares a dictionary with strings as keys and integers as values
ages["Alice"] = 30; // Assigns the value 30 to the key "Alice"
int aliceAge = ages["Alice"]; // Accesses the value associated with the key "Alice"
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <code>Queue&lt;T&gt;</code>: Queue (FIFO - First In, First Out, elements are added at the end and removed from the beginning). Example:
                            <pre>
                            <code>
Queue&lt;int&gt; queue = new Queue&lt;int&gt;(); // Declares a queue of integers
queue.Enqueue(1); // Adds an element to the end of the queue
int firstInQueue = queue.Dequeue(); // Removes and returns the element at the front of the queue
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <code>Stack&lt;T&gt;</code>: Stack (LIFO - Last In, First Out, elements are added and removed from the top). Example:
                            <pre>
                            <code>
Stack&lt;int&gt; stack = new Stack&lt;int&gt;(); // Declares a stack of integers
stack.Push(1); // Adds an element to the top of the stack
int topOfStack = stack.Pop(); // Removes and returns the element at the top of the stack
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <code>IEnumerable&lt;T&gt;</code>: Interface for enumerables (allows iteration over a collection, used with <code>foreach</code>). Example:
                            <pre>
                            <code>
IEnumerable&lt;int&gt; numbers = new List&lt;int&gt; { 1, 2, 3 }; // Declares an enumerable collection of integers
foreach (int number in numbers)
{
    Console.WriteLine(number); // Iterates over each element in the collection
}
                            </code>
                            </pre>
                        </li>
                    </ul>
                </div>
            </div>
        </div>

        <!-- Exceptions and Error Handling -->
        <div class="accordion-item">
            <h2 class="accordion-header">
                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseSix" aria-expanded="false" aria-controls="collapseSix">
                    6. Exceptions and Error Handling
                </button>
            </h2>
            <div id="collapseSix" class="accordion-collapse collapse">
                <div class="accordion-body">
                    <ul class="list-group">
                        <li class="list-group-item">
                            <code>try</code>, <code>catch</code>, <code>finally</code>: Exception handling (allows controlled error handling, <code>try</code> encapsulates code that might throw an exception

, <code>catch</code> catches and handles the exception, and <code>finally</code> executes code after the <code>try</code> and <code>catch</code>, whether an exception was thrown or not). Example:
                            <pre>
                            <code>
try
{
    // Code that might throw an exception
}
catch (Exception ex)
{
    // Code to handle the exception
}
finally
{
    // Code that always runs, whether an exception was thrown or not
}
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <code>throw</code>: Throw an exception (used to manually raise an exception). Example:
                            <pre>
                            <code>
if (someCondition)
{
    throw new InvalidOperationException("Error message");
}   
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <code>Exception</code>: Base class (base class for all exceptions in C#, provides error information such as the error message and stack trace). Example:
                            <pre>
                            <code>
try
{
    // Code that might throw an exception
}
catch (Exception ex)
{
    Console.WriteLine(ex.Message); // Displays the error message
    Console.WriteLine(ex.StackTrace); // Displays the stack trace
}
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <code>NullReferenceException</code>: Null reference exception (thrown when attempting to access an object through a null reference). Example:
                            <pre>
                            <code>
object obj = null;
try
{
    int length = obj.ToString().Length; // Throws a NullReferenceException
}
catch (NullReferenceException ex)
{
    Console.WriteLine("A null reference was encountered.");
}
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <code>ArgumentNullException</code>: Null argument (thrown when a method argument is <code>null</code> when it should not be). Example:
                            <pre>
                            <code>
void SomeMethod(string param)
{
    if (param == null)
    {
        throw new ArgumentNullException(nameof(param), "The parameter cannot be null");
    }
    // Other code
}
                            </code>
                            </pre>
                        </li>
                    </ul>
                </div>
            </div>
        </div>

    </div>
</div>
<p>&nbsp;</p>
<div class="container mt-5">
    <h1 class="text-center text-primary mb-4">Web Server (Backend) Vocabulary</h1>

    <div class="accordion">
        <!-- Server Section -->
        <div class="accordion-item">
            <h2 class="accordion-header">
                <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#serverSection" aria-expanded="false" aria-controls="serverSection">
                    Web Servers
                </button>
            </h2>
            <div id="serverSection" class="accordion-collapse collapse">
                <div class="accordion-body">
                    <ul class="list-group">
                        <li class="list-group-item">
                            <strong>Apache</strong>: Open-source web server, widely used to host websites. It is known for its flexibility and broad adoption. Example configuration:
                            <pre>
                            <code>
&lt;VirtualHost *:80&gt;
ServerAdmin webmaster@dummy-host.example.com
DocumentRoot "/www/docs/dummy-host.example.com"
ServerName dummy-host.example.com
ErrorLog "logs/dummy-host.example.com-error_log"
CustomLog "logs/dummy-host.example.com-access_log" common
&lt;/VirtualHost&gt;
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>Nginx</strong>: High-performance web server used to handle large amounts of traffic. It is often used as a reverse proxy and load balancer. Example configuration:
                            <pre>
                            <code>
server {
listen 80;
server_name example.com;
location / {
    proxy_pass http://localhost:8080;
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
}
}
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>IIS</strong> (Internet Information Services): Microsoft's web server. It is integrated into Windows Server and offers easy management of websites and applications. Example configuration:
                            <pre>
                            <code>
&lt;configuration&gt;
    &lt;system.webServer&gt;
        &lt;handlers&gt;
            &lt;add name="iisnode" path="app.js" verb="*" modules="iisnode" /&gt;
        &lt;/handlers&gt;
        &lt;rewrite&gt;
            &lt;rules&gt;
                &lt;rule name="DynamicContent" patternSyntax="ECMAScript" stopProcessing="true"&gt;
                    &lt;match url=".*" /&gt;
                    &lt;conditions&gt;
                        &lt;add input="{REQUEST_FILENAME}" matchType="IsFile" negate="true" /&gt;
                    &lt;/conditions&gt;
                    &lt;action type="Rewrite" url="app.js" /&gt;
                &lt;/rule&gt;
            &lt;/rules&gt;
        &lt;/rewrite&gt;
    &lt;/system.webServer&gt;
&lt;/configuration&gt;
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>Reverse Proxy</strong>: A server that forwards requests to other backend servers. Used to improve security, performance, and load distribution. Example with Nginx:
                            <pre>
                            <code>
server {
    listen 80;
    server_name example.com;
    location / {
        proxy_pass http://backend_server;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    }
}
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>Load Balancer</strong>: A tool that distributes requests between multiple servers to balance the load. Used to improve the availability and performance of applications. Example with Nginx:
                            <pre>
                            <code>
upstream backend {
    server backend1.example.com;
    server backend2.example.com;
}
server {
    listen 80;
    server_name example.com;
    location / {
        proxy_pass http://backend;
    }
}
                            </code>
                            </pre>
                        </li>
                    </ul>
                </div>
            </div>
        </div>

        <!-- API Section -->
        <div class="accordion-item">
            <h2 class="accordion-header">
                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#apiSection" aria-expanded="false" aria-controls="apiSection">
                    API (Application Programming Interface)
                </button>
            </h2>
            <div id="apiSection" class="accordion-collapse collapse">
                <div class="accordion-body">
                    <ul class="list-group">
                        <li class="list-group-item">
                            <strong>REST</strong>: API architecture style using HTTP methods (GET, POST, PUT, DELETE). Used to create lightweight and scalable web services. Example of a GET request:
                            <pre>
                            <code>
GET /api/users/1 HTTP/1.1
Host: example.com
Accept: application/json
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>SOAP</strong>: More structured protocol for exchanging data via web services. Used for more formal and secure communications. Example of a SOAP request:
                            <pre>
                            <code>
&lt;soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:web="http://example.com/webservices"&gt;
    &lt;soapenv:Header/&gt;
    &lt;soapenv:Body&gt;
        &lt;web:GetUser&gt;
            &lt;web:UserId&gt;1&lt;/web:UserId&gt;
        &lt;/web:GetUser&gt;
    &lt;/soapenv:Body&gt;
&lt;/soapenv:Envelope&gt;
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>GraphQL</strong>: Query language for APIs, allowing you to request precise data. Used to optimize queries and reduce data overhead. Example of a GraphQL query:
                            <pre>
                            <code>
{
    user(id: "1") {
    name
    email
    }
}
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>JSON</strong>: Data exchange format used for REST APIs. Known for its simplicity and compatibility with many languages. Example of JSON data:
                            <pre>
                            <code>
{
    "name": "Alice",
    "age": 30,
    "email": "alice@example.com"
}
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>XML</strong>: Structured data format often used with SOAP. Known for its ability to represent hierarchical data. Example of XML data:
                            <pre>
                            <code>
&lt;user&gt;
    &lt;name&gt;Alice&lt;/name&gt;
    &lt;age&gt;30&lt;/age&gt;
    &lt;email&gt;alice@example.com&lt;/email&gt;
&lt;/user&gt;
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>OAuth</strong>: Authentication protocol used to secure APIs. Allows third-party applications to access user resources without sharing user credentials. Example OAuth flow:
                            <pre>
                            <code>
1. The user logs in and authorizes the application.
2. The application receives an authorization code.
3. The application exchanges the code for an access token.
4. The application uses the access token to access protected resources.
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>JWT</strong> (JSON Web Token): Standard for creating secure access tokens for APIs. Used to securely transmit information between parties. Example of a JWT:
                            <pre><code>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c</code></pre>
                        </li>
                    </ul>
                </div>
            </div>
        </div>

        <!-- Database Section -->
        <div class="accordion-item">
            <h2 class="accordion-header">
                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#dbSection" aria-expanded="false" aria-controls="dbSection">
                    Databases
                </button>
            </h2>
            <div id="dbSection" class="accordion-collapse collapse">
                <div class="accordion-body">
                    <ul class="list-group">
                        <li class="list-group-item">
                            <strong>SQL</strong>: Language for interacting with relational databases (MySQL, PostgreSQL, SQL Server). Used to manage and manipulate data in structured databases. Example

 SQL query:
                            <pre><code>SELECT * FROM Users WHERE Age &gt; 30;</code></pre>
                        </li>
                        <li class="list-group-item">
                            <strong>NoSQL</strong>: Non-relational database type (MongoDB, Cassandra, Redis). Used for unstructured or semi-structured data, often for applications requiring high scalability. Example MongoDB document:
                            <pre>
                            <code>
{
    "name": "Alice",
    "age": 30,
    "email": "alice@example.com"
}
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>ORM</strong> (Object-Relational Mapping): Tool for manipulating database data through objects (e.g., Entity Framework, Hibernate). Used to simplify database interactions by mapping tables to classes. Example with Entity Framework:
                            <pre>
                            <code>
public class User
{
    public int Id { get; set; }
    public string Name { get; set; }
    public int Age { get; set; }
}
using (var context = new MyDbContext())
{
    var users = context.Users.Where(u => u.Age &gt; 30).ToList();
}
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>CRUD</strong>: Acronym for Create, Read, Update, Delete, the basic operations on a database. Used to define fundamental data manipulation operations. Example CRUD queries:
                            <pre>
                            <code>
// Create
INSERT INTO Users (Name, Age) VALUES ('Alice', 30);

// Read
SELECT * FROM Users WHERE Id = 1;

// Update
UPDATE Users SET Age = 31 WHERE Id = 1;

// Delete
DELETE FROM Users WHERE Id = 1;
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>ACID</strong>: Properties of transactions in relational databases (Atomicity, Consistency, Isolation, Durability). Used to ensure transaction reliability in a database. Example:
                            <pre>
                            <code>
// Atomicity: All operations in a transaction are executed, or none are.
// Consistency: The database moves from one valid state to another.
// Isolation: Concurrent transactions do not interfere with each other.
// Durability: The results of a transaction are permanent, even in case of failure.
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>Sharding</strong>: Data partitioning technique to improve database performance. Used to distribute data across multiple servers to balance load and improve scalability. Example:
                            <pre>
                            <code>
// Horizontal sharding: Rows of a table are split across multiple databases.
// Vertical sharding: Columns of a table are split across multiple databases.
                            </code>
                            </pre>
                        </li>
                    </ul>
                </div>
            </div>
        </div>

        <!-- Authentication and Security Section -->
        <div class="accordion-item">
            <h2 class="accordion-header">
                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#securitySection" aria-expanded="false" aria-controls="securitySection">
                    Authentication and Security
                </button>
            </h2>
            <div id="securitySection" class="accordion-collapse collapse">
                <div class="accordion-body">
                    <ul class="list-group">
                        <li class="list-group-item">
                            <strong>HTTPS</strong>: Secure protocol for communication between the client and the web server. Used to protect exchanged data from interception and attacks. Example HTTPS URL:
                            <pre><code>https://example.com</code></pre>
                        </li>
                        <li class="list-group-item">
                            <strong>SSL/TLS</strong>: Encryption protocol used to secure HTTP communications. Used to establish a secure connection between the client and the server. Example Nginx configuration for SSL/TLS:
                            <pre>
                            <code>
server {
    listen 443 ssl;
    server_name example.com;
    ssl_certificate /etc/ssl/certs/example.com.crt;
    ssl_certificate_key /etc/ssl/private/example.com.key;
}
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>OAuth</strong>: Protocol for authorizing access to secure resources. Used to allow third-party applications to access user resources without sharing user credentials. Example OAuth flow:
                            <pre>
                            <code>
1. The user logs in and authorizes the application.
2. The application receives an authorization code.
3. The application exchanges the code for an access token.
4. The application uses the access token to access protected resources.
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>JWT</strong>: Tokens used to secure API access and authentication. Used to securely transmit information between parties. Example of a JWT:
                            <pre><code>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c</code></pre>
                        </li>
                        <li class="list-group-item">
                            <strong>Basic Auth</strong>: Authentication method using basic credentials (username/password). Used for simple scenarios where security is not a major concern. Example HTTP Basic Auth header:
                            <pre><code>Authorization: Basic dXNlcm5hbWU6cGFzc3dvcmQ=</code></pre>
                        </li>
                        <li class="list-group-item">
                            <strong>CSRF</strong>: Cross-Site Request Forgery, an injection-based attack. Used to trick an authenticated user into performing unwanted actions. Example CSRF protection in ASP.NET:
                            <pre><code>&#64Html.AntiForgeryToken()</code></pre>
                        </li>
                        <li class="list-group-item">
                            <strong>XSS</strong>: Cross-Site Scripting, an attack that injects malicious code into a web page. Used to steal sensitive information or manipulate page content. Example XSS protection in ASP.NET:
                            <pre><code>&#64Html.Encode(userInput)</code></pre>
                        </li>
                    </ul>
                </div>
            </div>
        </div>

        <!-- DevOps and Deployment Section -->
        <div class="accordion-item">
            <h2 class="accordion-header">
                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#devOpsSection" aria-expanded="false" aria-controls="devOpsSection">
                    DevOps and Deployment
                </button>
            </h2>
            <div id="devOpsSection" class="accordion-collapse collapse">
                <div class="accordion-body">
                    <ul class="list-group">
                        <li class="list-group-item">
                            <strong>CI/CD</strong> (Continuous Integration/Continuous Deployment): Automating build and deployment processes. Used to improve code quality and speed up development cycles. Example CI/CD tool: Jenkins, GitHub Actions.
                            <pre>
                            <code>
// Example CI/CD pipeline with GitHub Actions
name: CI/CD Pipeline

on: [push]

jobs:
    build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up .NET
        uses: actions/setup-dotnet@v1
        with:
        dotnet-version: '5.0.x'
    - name: Build with dotnet
        run: dotnet build --configuration Release
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>Docker</strong>: Containerization of applications for standardized deployment. Used to isolate applications and their dependencies in lightweight containers. Example Dockerfile:
                            <pre>
                            <code>
# Use a base .NET image
FROM mcr.microsoft.com/dotnet/aspnet:5.0
COPY . /app
WORKDIR /app
EXPOSE 80
ENTRYPOINT ["dotnet", "MyApp.dll"]
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>Kubernetes</strong>: Container orchestration to manage deployment and scaling. Used to automate the deployment, management, and scaling of containerized applications. Example Kubernetes deployment file:
                            <pre>
                            <code>
apiVersion: apps/v1
kind: Deployment
metadata:
    name: myapp-deployment
spec:
    replicas: 3
    selector:
    matchLabels:
        app: myapp
    template:
    metadata:
        labels:
        app: myapp
    spec:
        containers:
        - name: myapp
        image: myapp:latest
        ports:
        - containerPort: 80
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>Ansible</strong>: Automation tool for managing infrastructure. Used to automate server configuration, management, and deployment tasks. Example Ansible playbook:
                            <pre>
                            <code>
- name: Install and start Apache
    hosts: webservers
   

 become: yes
    tasks:
    - name: Install Apache
        apt:
        name: apache2
        state: present
    - name: Start Apache
        service:
        name: apache2
        state: started
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>Terraform</strong>: Infrastructure as code tool to create and manage cloud infrastructure. Used to define and provision infrastructure declaratively. Example Terraform configuration:
                            <pre>
                            <code>
provider "aws" {
    region = "us-west-2"
}

resource "aws_instance" "example" {
    ami           = "ami-0c55b159cbfafe1f0"
    instance_type = "t2.micro"

    tags = {
    Name = "example-instance"
    }
}
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>Load Balancer</strong>: Distributes traffic between multiple servers to balance load. Used to improve the availability and performance of applications. Example Nginx load balancer configuration:
                            <pre>
                            <code>
http {
    upstream myapp {
        server app1.example.com;
        server app2.example.com;
    }

    server {
        listen 80;
        location / {
            proxy_pass http://myapp;
        }
    }
}
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>Monitoring</strong>: Monitoring applications and servers to detect anomalies (e.g., Prometheus, Grafana). Used to ensure system availability and performance. Example Prometheus configuration:
                            <pre>
                            <code>
global:
    scrape_interval: 15s

scrape_configs:
    - job_name: 'prometheus'
    static_configs:
        - targets: ['localhost:9090']
                            </code>
                            </pre>
                        </li>
                    </ul>
                </div>
            </div>
        </div>
    </div>
</div>
<p>&nbsp;</p>
<div class="container mt-5">
    <h1 class="text-center text-primary mb-4">Microsoft Vocabulary: Controllers, Testing, Models, Enums, Resources</h1>

    <div class="accordion">
        <!-- Section Controllers -->
        <div class="accordion-item">
            <h2 class="accordion-header">
                <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#controllersSection" aria-expanded="false" aria-controls="controllersSection">
                    Controllers
                </button>
            </h2>
            <div id="controllersSection" class="accordion-collapse collapse">
                <div class="accordion-body">
                    <ul class="list-group">
                        <li class="list-group-item">
                            <strong>Controller</strong>: A component that handles HTTP requests and returns responses. Used in ASP.NET MVC and ASP.NET Core. Controllers contain actions that are invoked in response to HTTP requests. Example of a controller:
                            <pre>
                            <code>
public class HomeController : Controller
{
    public IActionResult Index()
    {
        return View();
    }
}
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>ActionResult</strong>: The return type of an action method in a controller, representing various results (view, JSON, redirect). It allows returning different types of HTTP responses based on application needs. Example of ActionResult usage:
                            <pre>
                            <code>
public IActionResult GetUser(int id)
{
    var user = _userService.GetUserById(id);
    if (user == null)
    {
        return NotFound();
    }
    return Ok(user);
}
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>ApiController</strong>: Used to define API controllers in ASP.NET Core. It simplifies creating RESTful services by providing features like automatic model validation and error handling. Example of an API controller:
                            <pre>
                            <code>
[ApiController]
[Route("api/[controller]")]
public class UsersController : ControllerBase
{
    [HttpGet("{id}")]
    public IActionResult GetUser(int id)
    {
        var user = _userService.GetUserById(id);
        if (user == null)
        {
            return NotFound();
        }
        return Ok(user);
    }
}
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>Route</strong>: Defines the HTTP request path associated with a controller/action. Routes can be defined conventionally or through attributes to specify how URLs map to controller actions. Example of attribute-based routing:
                            <pre>
                            <code>
[Route("api/[controller]")]
public class ProductsController : ControllerBase
{
    [HttpGet("{id}")]
    public IActionResult GetProduct(int id)
    {
        var product = _productService.GetProductById(id);
        if (product == null)
        {
            return NotFound();
        }
        return Ok(product);
    }
}
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>HttpGet, HttpPost, HttpPut, HttpDelete</strong>: Attributes that specify the HTTP request type to which an action should respond. <code>HttpGet</code> is used for reading, <code>HttpPost</code> for creating, <code>HttpPut</code> for updating, and <code>HttpDelete</code> for deleting. Example of HTTP attribute usage:
                            <pre>
                            <code>
[HttpGet("{id}")]
public IActionResult GetItem(int id)
{
    var item = _itemService.GetItemById(id);
    if (item == null)
    {
        return NotFound();
    }
    return Ok(item);
}

[HttpPost]
public IActionResult CreateItem([FromBody] Item item)
{
    if (!ModelState.IsValid)
    {
        return BadRequest(ModelState);
    }
    _itemService.AddItem(item);
    return CreatedAtAction(nameof(GetItem), new { id = item.Id }, item);
}

[HttpPut("{id}")]
public IActionResult UpdateItem(int id, [FromBody] Item item)
{
    if (id != item.Id || !ModelState.IsValid)
    {
        return BadRequest();
    }
    _itemService.UpdateItem(item);
    return NoContent();
}

[HttpDelete("{id}")]
public IActionResult DeleteItem(int id)
{
    var item = _itemService.GetItemById(id);
    if (item == null)
    {
        return NotFound();
    }
    _itemService.DeleteItem(id);
    return NoContent();
}
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>Model Binding</strong>: The process of mapping HTTP request data to action parameters. It automatically converts request data (such as form inputs or JSON) into C# objects for use in controller actions. Example of model binding:
                            <pre>
                            <code>
public IActionResult CreateUser([FromBody] User user)
{
    if (!ModelState.IsValid)
    {
        return BadRequest(ModelState);
    }
    _userService.AddUser(user);
    return CreatedAtAction(nameof(GetUser), new { id = user.Id }, user);
}
                            </code>
                            </pre>
                        </li>
                    </ul>
                </div>
            </div>
        </div>

        <!-- Section Testing -->
        <div class="accordion-item">
            <h2 class="accordion-header">
                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#testingSection" aria-expanded="false" aria-controls="testingSection">
                    Testing
                </button>
            </h2>
            <div id="testingSection" class="accordion-collapse collapse">
                <div class="accordion-body">
                    <ul class="list-group">
                        <li class="list-group-item">
                            <strong>Unit Test</strong>: Tests the smallest functional unit of code, typically a method or class. Unit tests verify that each unit of code works as expected in isolation. Example of a unit test with xUnit:
                            <pre>
                            <code>
public class CalculatorTests
{
    [Fact]
    public void Add_ReturnsSum()
    {
        // Arrange
        var calculator = new Calculator();

        // Act
        var result = calculator.Add(2, 3);

        // Assert
        Assert.Equal(5, result);
    }
}
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>Integration Test</strong>: Tests that verify the interaction between multiple components or services. Integration tests ensure that different modules of the application work together correctly. Example of an integration test with xUnit and ASP.NET Core:
                            <pre>
                            <code>
public class UsersControllerTests : IClassFixture&lt;WebApplicationFactory&lt;Startup&gt;&gt;
{
    private readonly HttpClient _client;

    public UsersControllerTests(WebApplicationFactory&lt;Startup&gt; factory)
    {
        _client = factory.CreateClient();
    }

    [Fact]
    public async Task GetUser_ReturnsUser()
    {
        // Act
        var response = await _client.GetAsync("/api/users/1");

        // Assert
        response.EnsureSuccessStatusCode();
        var user = await response.Content.ReadAsAsync&lt;User&gt;();
        Assert.Equal(1, user.Id);
    }
}
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>MSTest</strong>: Testing framework for .NET applications. MSTest is integrated into Visual Studio, allowing the creation and execution of unit and integration tests. Example of a unit test with MSTest:
                            <pre>
                            <code>
[TestClass]
public class CalculatorTests
{
    [TestMethod]
    public void Add_ReturnsSum()
    {
        // Arrange
        var calculator = new Calculator();

        // Act
        var result = calculator.Add(2, 3);

        // Assert
        Assert.AreEqual(5, result);
    }
}
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>xUnit</strong>: A popular testing framework for .NET, used for unit testing. xUnit is known for its simplicity and flexibility and is often used in open-source and professional projects. Example of a unit test with xUnit:
                            <pre>
                            <code>
public class CalculatorTests
{
    [Fact]
    public void Add_ReturnsSum()
    {
        // Arrange
        var calculator = new Calculator();

        // Act
        var result = calculator.Add(2, 3);

        // Assert
        Assert.Equal(5, result);
    }
}
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>Mocking</strong>: A technique for simulating objects or services in unit tests. Mocking allows creating fake objects that mimic the behavior of real ones, facilitating component testing in isolation. Example of mocking with Moq:
                            <pre>
                            <code>
var mockRepository = new Mock&lt;IUserRepository&gt;();
mockRepository.Setup(repo => repo.GetUserById(1)).Returns(new User { Id = 1, Name = "Alice" });

var userService = new UserService(mockRepository.Object);
var user = userService.GetUserById(1);

Assert.Equal("Alice", user.Name);
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>Arrange-Act-Assert (AAA)</strong>: A standard testing pattern to structure tests (setup, execute, verify). <strong>Arrange</strong>: Set up initial conditions and required objects. <strong>Act</strong>: Perform the action or method to be tested. <strong>Assert</strong>: Verify that the result matches the expected outcome. Example of a test structured in AAA:
                            <pre>
                            <code>
public class CalculatorTests
{
    [Fact]
    public void Add_ReturnsSum()
    {
        // Arrange
        var calculator = new Calculator();

        // Act
        var result = calculator.Add(2, 3);

        // Assert
        Assert.Equal(5, result);
    }
}
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>TestFixture</strong>: A class containing tests in a testing framework. A TestFixture groups multiple tests that share a common configuration, making it easier to organize and execute tests. Example of TestFixture with NUnit:
                            <pre>
                            <code>
[TestFixture]
public class CalculatorTests
{
    private Calculator _calculator;

    [SetUp]
    public void SetUp()
    {
        _calculator = new Calculator();
    }

    [Test]
    public void Add_ReturnsSum()
    {
        var result = _calculator.Add(2, 3);
        Assert.AreEqual(5, result);
    }
}
                            </code>
                            </pre>
                        </li>
                    </ul>
                </div>
            </div>
        </div>

        <!-- Section Models -->
        <div class="accordion-item">
            <h2 class="accordion-header">
                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#modelsSection" aria-expanded="false" aria-controls="modelsSection">
                    Models
                </button>
            </h2>
            <div id="modelsSection" class="accordion-collapse collapse">
                <div class="accordion-body">
                    <ul class="list-group">
                        <li class="list-group-item">
                            <strong>Model</strong>: A class representing data or business objects in an application. Models are used to transfer data between the various layers of the application, such as the presentation and data layers. Example of a model:
                            <pre>
                            <code>
public class User
{
    public int Id { get; set; }
    public string Name { get; set; }
    public string Email { get; set; }
}
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>ViewModel</strong>: An object that groups the data necessary to be displayed in a view. The ViewModel is used to prepare and format data before sending it to the view, facilitating data binding and presentation logic. Example of a ViewModel:
                            <pre>
                            <code>
public class UserViewModel
{
    public int Id { get; set; }
    public string Name { get; set; }
    public string Email { get; set; }
    public string DisplayName => $"{Name} ({Email})";
}
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>Data Annotations</strong>: Attributes used to validate data in models. For example, <code>[Required]</code> ensures that a property is not null, <code>[StringLength]</code> defines the maximum length of a string, and <code>[Range]</code> specifies an acceptable range of values. These annotations help ensure data integrity before saving it to the database. Example of data annotations:
                            <pre>
                            <code>
public class User
{
    [Required]
    public string Name { get; set; }

    [Required, EmailAddress]
    public string Email { get; set; }

    [Range(18, 99)]
    public int Age { get; set; }
}
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>Entity Framework</strong>: ORM (Object-Relational Mapping) used to interact with a database using models. Entity Framework allows working with databases using C# objects instead of SQL queries, simplifying the development and maintenance of applications. Example of using Entity Framework:
                            <pre>
                            <code>
public class ApplicationDbContext : DbContext
{
    public DbSet&lt;User&gt; Users { get; set; }
}

public class UserService
{
    private readonly ApplicationDbContext _context;

    public UserService(ApplicationDbContext context)
    {
        _context = context;
    }

    public async Task&lt;List&lt;User&gt;&gt; GetUsersAsync()
    {
        return await _context.Users.ToListAsync();
    }
}
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>Scaffold</strong>: A technique for automatically generating code for models, views, and controllers. Scaffolding allows quickly creating CRUD (Create, Read, Update, Delete) operations by generating the necessary code to interact with the database and display data in the user interface. Example of a scaffolding command:
                            <pre><code>dotnet ef dbcontext scaffold "Server=myServerAddress;Database=myDataBase;User Id=myUsername;Password=myPassword;" Microsoft.EntityFrameworkCore.SqlServer -o Models</code></pre>
                        </li>
                    </ul>
                </div>
            </div>
        </div>

        <!-- Section Enums -->
        <div class="accordion-item">
            <h2 class="accordion-header">
                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#enumsSection" aria-expanded="false" aria-controls="enumsSection">
                    Enums (Enumerations)
                </button>
            </h2>
            <div id="enumsSection" class="accordion-collapse collapse">
                <div class="accordion-body">
                    <ul class="list-group">
                        <li class="list-group-item">
                            <strong>Enum</strong>: A special type that defines a set of named constants. Enumerations are used to represent a set of possible values for a variable. Example:
                            <pre>
                            <code>
public enum Days
{
    Sunday,
    Monday,
    Tuesday,
    Wednesday,
    Thursday,
    Friday,
    Saturday
}
                            </code>
                            </pre>
                            This improves code readability and reduces errors by limiting the possible values.
                        </li>
                        <li class="list-group-item">
                            <strong>Flags Attribute</strong>: An attribute that allows an enum to be treated as a set of bits (combined values). This attribute is used to create enumerations that can be combined with bitwise operations. Example:
                            <pre>
                            <code>
[Flags]
public enum FileAccess
{
    Read = 1,
    Write = 2,
    Execute = 4
}
                            </code>
                            </pre>
                            This allows combining values like <code>FileAccess.Read | FileAccess.Write</code>.
                        </li>
                        <li class="list-group-item">
                            <strong>Enum.Parse()</strong>: A method that converts a string into an enum value. This method is useful for converting string values into enum types. Example:
                            <pre><code>Days day = (Days)Enum.Parse(typeof(Days), "Sunday");</code></pre>
                            This converts the string "Sunday" to its corresponding enum value.
                        </li>
                        <li class="list-group-item">
                            <strong>Enum.GetValues()</strong>: A method to retrieve all possible values of an enum. This method returns an array of all values defined in an enum. Example:
                            <pre><code>Days[] days = (Days[])Enum.GetValues(typeof(Days));</code></pre>
                            This allows iterating through all possible values of the <code>Days</code> enum.
                        </li>
                    </ul>
                </div>
            </div>
        </div>

        <!-- Section Resources -->
        <div class="accordion-item">
            <h2 class="accordion-header">
                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#resourcesSection" aria-expanded="false" aria-controls="resourcesSection">
                    Resources
                </button>
            </h2>
            <div id="resourcesSection" class="accordion-collapse collapse">
                <div class="accordion-body">
                    <ul class="list-group">
                        <li class="list-group-item">
                            <strong>Resource File (.resx)</strong>: An XML file used to store text strings, images, and other objects for localization. .resx files allow separating resources from the application code, making it easier to manage translations and resource management. Example:
                            <pre>
                            <code>
// strings.fr.resx
&lt;root&gt;
    &lt;data name="Hello" xml:space="preserve"&gt;
    &lt;value&gt;Bonjour&lt;/value&gt;
    &lt;/data&gt;
&lt;/root&gt;
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>Globalization</strong>: The concept of internationalizing and localizing an application for different markets or languages. Globalization involves designing and developing an application to be easily adapted to different cultures and languages without major code changes. Example:


                            <pre>
                            <code>
public void ConfigureServices(IServiceCollection services)
{
    services.AddLocalization(options => options.ResourcesPath = "Resources");
    services.Configure&lt;RequestLocalizationOptions&gt;(options =>
    {
        var supportedCultures = new[] { "en-US", "fr-FR" };
        options.SetDefaultCulture(supportedCultures[0])
                .AddSupportedCultures(supportedCultures)
                .AddSupportedUICultures(supportedCultures);
    });
}
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>Localization</strong>: The adaptation of an application to the cultural specifics of a region or country. Localization includes translating text strings, adapting date and currency formats, and handling cultural peculiarities. Example:
                            <pre>
                            <code>
&#64;inject IStringLocalizer&lt;Vocabulary_fr&gt; Localizer

&lt;p&gt;&#64;Localizer["Hello"]&lt;/p&gt;
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>ResourceManager</strong>: A class used to load resources from a .resx file. The <code>ResourceManager</code> helps retrieve localized text strings and other resources based on the application's current culture. Example:
                            <pre>
                            <code>
var resourceManager = new ResourceManager("MyApp.Resources.strings", typeof(Program).Assembly);
string hello = resourceManager.GetString("Hello", new CultureInfo("fr-FR"));
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>Satellite Assemblies</strong>: Assemblies containing resources for a specific culture. Satellite assemblies are used to deploy localized resources separately from the main application code, allowing for independent management of translations and resource updates. Example:
                            <pre>
                            <code>
// File structure
// MyApp.dll
// fr-FR/MyApp.resources.dll
// en-US/MyApp.resources.dll
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>CultureInfo</strong>: A class used to define cultural information, such as date, currency, and language formats. The <code>CultureInfo</code> class allows specifying the application's current culture and accessing associated cultural information. Example:
                            <pre>
                            <code>
CultureInfo.CurrentCulture = new CultureInfo("fr-FR");
CultureInfo.CurrentUICulture = new CultureInfo("fr-FR");
                            </code>
                            </pre>
                        </li>
                    </ul>
                </div>
            </div>
        </div>
    </div>
</div>
<p>&nbsp;</p>
<div class="container mt-5">
    <h1 class="text-center text-primary mb-4">Web API Vocabulary</h1>

    <div class="accordion">
        <!-- Basic Concepts Section -->
        <div class="accordion-item">
            <h2 class="accordion-header">
                <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#basicConceptsSection" aria-expanded="false" aria-controls="basicConceptsSection">
                    Basic Concepts
                </button>
            </h2>
            <div id="basicConceptsSection" class="accordion-collapse collapse">
                <div class="accordion-body">
                    <ul class="list-group">
                        <li class="list-group-item">
                            <strong>API</strong>: Application Programming Interface that allows two software systems to communicate with each other. An API defines a set of rules and conventions for interaction between software components. APIs are used to enable the integration of services and features between different applications. Example usage:
                            <pre>
                            <code>
// Example of a REST API call using HttpClient in C#
var client = new HttpClient();
var response = await client.GetAsync("https://api.example.com/data");
var data = await response.Content.ReadAsStringAsync();
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>Endpoint</strong>: URL or URI of a specific resource in an API. An endpoint is a unique address where an API can be accessed by HTTP requests. Each endpoint corresponds to a specific function or resource of the API. Example usage:
                            <pre>
                            <code>
// Example of calling a specific endpoint of a REST API
var client = new HttpClient();
var response = await client.GetAsync("https://api.example.com/users/1");
var user = await response.Content.ReadAsStringAsync();
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>REST (Representational State Transfer)</strong>: An architectural style based on resources accessible via standard HTTP methods (GET, POST, PUT, DELETE). REST is an architecture style for web services that uses HTTP methods to perform operations on resources identified by URIs. Example usage:
                            <pre>
                            <code>
// Example of using HTTP methods in a REST API
var client = new HttpClient();

// GET - Retrieve a resource
var getResponse = await client.GetAsync("https://api.example.com/items");

// POST - Create a new resource
var newItem = new StringContent("{\"name\":\"NewItem\"}", Encoding.UTF8, "application/json");
var postResponse = await client.PostAsync("https://api.example.com/items", newItem);

// PUT - Update an existing resource
var updatedItem = new StringContent("{\"name\":\"UpdatedItem\"}", Encoding.UTF8, "application/json");
var putResponse = await client.PutAsync("https://api.example.com/items/1", updatedItem);

// DELETE - Delete a resource
var deleteResponse = await client.DeleteAsync("https://api.example.com/items/1");
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>HTTP</strong>: Protocol used by Web APIs for communication between client and server. HTTP (HyperText Transfer Protocol) is the standard communication protocol for data exchanges on the web. It defines methods like GET, POST, PUT, DELETE to interact with resources. Example usage:
                            <pre>
                            <code>
// Example of using HttpClient to make an HTTP GET request
var client = new HttpClient();
var response = await client.GetAsync("https://api.example.com/data");
var data = await response.Content.ReadAsStringAsync();
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>Stateless</strong>: The principle that each request sent to an API must contain all the information necessary to be processed without retaining state between requests. REST APIs are designed to be stateless, meaning that the server does not retain any information about client state between requests. Example usage:
                            <pre>
                            <code>
// Example of a stateless request to a REST API
var client = new HttpClient();
var request = new HttpRequestMessage(HttpMethod.Get, "https://api.example.com/data");
request.Headers.Add("Authorization", "Bearer token");
var response = await client.SendAsync(request);
var data = await response.Content.ReadAsStringAsync();
                            </code>
                            </pre>
                        </li>
                    </ul>
                </div>
            </div>
        </div>

        <!-- HTTP Methods Section -->
        <div class="accordion-item">
            <h2 class="accordion-header">
                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#httpMethodsSection" aria-expanded="false" aria-controls="httpMethodsSection">
                    HTTP Methods
                </button>
            </h2>
            <div id="httpMethodsSection" class="accordion-collapse collapse">
                <div class="accordion-body">
                    <ul class="list-group">
                        <li class="list-group-item">
                            <strong>GET</strong>: Used to retrieve data or resources from a server. The <code>GET</code> method is one of the most commonly used HTTP methods to request data from a server. It is used to retrieve information without modifying the server's state. Example usage:
                            <pre>
                            <code>
// Example of using the GET method with HttpClient in C#
var client = new HttpClient();
var response = await client.GetAsync("https://api.example.com/data");
var data = await response.Content.ReadAsStringAsync();
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>POST</strong>: Used to send data to the server and create a new resource. The <code>POST</code> method is used to submit data to the server, often to create a new resource. The data is usually sent in the request body. Example usage:
                            <pre>
                            <code>
// Example of using the POST method with HttpClient in C#
var client = new HttpClient();
var content = new StringContent("{\"name\":\"NewItem\"}", Encoding.UTF8, "application/json");
var response = await client.PostAsync("https://api.example.com/items", content);
var result = await response.Content.ReadAsStringAsync();
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>PUT</strong>: Used to update an existing resource on the server. The <code>PUT</code> method is used to update an existing resource by sending updated data in the request body. Example usage:
                            <pre>
                            <code>
// Example of using the PUT method with HttpClient in C#
var client = new HttpClient();
var content = new StringContent("{\"name\":\"UpdatedItem\"}", Encoding.UTF8, "application/json");
var response = await client.PutAsync("https://api.example.com/items/1", content);
var result = await response.Content.ReadAsStringAsync();
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>DELETE</strong>: Used to delete an existing resource on the server. The <code>DELETE</code> method is used to delete a resource specified by the URI. Example usage:
                            <pre>
                            <code>
// Example of using the DELETE method with HttpClient in C#
var client = new HttpClient();
var response = await client.DeleteAsync("https://api.example.com/items/1");
var result = await response.Content.ReadAsStringAsync();
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>PATCH</strong>: Used to apply partial updates to a resource. The <code>PATCH</code> method is used to apply partial updates to an existing resource. Unlike <code>PUT</code>, <code>PATCH</code> does not require a complete representation of the resource. Example usage:
                            <pre>
                            <code>
// Example of using the PATCH method with HttpClient in C#
var client = new HttpClient();
var content = new StringContent("{\"name\":\"PartiallyUpdatedItem\"}", Encoding.UTF8, "application/json");
var response = await client.PatchAsync("https://api.example.com/items/1", content);
var result = await response.Content.ReadAsStringAsync();
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>HEAD</strong>: Similar to GET, but only returns the HTTP headers without the response body. The <code>HEAD</code> method is used to obtain the response headers of a resource without retrieving the response body. It is often used to check if a resource exists or to obtain metadata. Example usage:
                            <pre>
                            <code>
// Example of using the HEAD method with HttpClient in C#
var client = new HttpClient();
var response = await client.SendAsync(new HttpRequestMessage(HttpMethod.Head, "https://api.example.com/data"));
var headers = response.Headers;
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>OPTIONS</strong>: Asks the server to return the allowed HTTP methods for a given resource. The <code>OPTIONS</code> method is used to query the server about the supported HTTP methods for a specific resource. It is often used to check server capabilities before making an actual request. Example usage:
                            <pre>
                           

 <code>
// Example of using the OPTIONS method with HttpClient in C#
var client = new HttpClient();
var response = await client.SendAsync(new HttpRequestMessage(HttpMethod.Options, "https://api.example.com/data"));
var allowedMethods = response.Content.Headers.Allow;
                            </code>
                            </pre>
                        </li>
                    </ul>
                </div>
            </div>
        </div>

        <!-- HTTP Status Codes Section -->
        <div class="accordion-item">
            <h2 class="accordion-header">
                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#httpStatusCodesSection" aria-expanded="false" aria-controls="httpStatusCodesSection">
                    HTTP Status Codes
                </button>
            </h2>
            <div id="httpStatusCodesSection" class="accordion-collapse collapse">
                <div class="accordion-body">
                    <ul class="list-group">
                        <li class="list-group-item">
                            <strong>200 OK</strong>: The request succeeded, and the response contains the requested data. This HTTP status code indicates that the server successfully processed the request, and the requested information is returned in the response body. Example usage:
                            <pre>
                            <code>
// Example of handling a 200 OK response with HttpClient in C#
var client = new HttpClient();
var response = await client.GetAsync("https://api.example.com/data");
if (response.StatusCode == HttpStatusCode.OK)
{
    var data = await response.Content.ReadAsStringAsync();
    Console.WriteLine("Data received: " + data);
}
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>201 Created</strong>: The resource was successfully created after a POST. This HTTP status code indicates that the POST request was successfully processed and a new resource was created. The URI of the new resource is usually returned in the Location header of the response. Example usage:
                            <pre>
                            <code>
// Example of handling a 201 Created response with HttpClient in C#
var client = new HttpClient();
var content = new StringContent("{\"name\":\"NewItem\"}", Encoding.UTF8, "application/json");
var response = await client.PostAsync("https://api.example.com/items", content);
if (response.StatusCode == HttpStatusCode.Created)
{
    var location = response.Headers.Location;
    Console.WriteLine("New resource created at: " + location);
}
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>204 No Content</strong>: The request succeeded, but there is no content to return (used after an update or delete). This HTTP status code indicates that the request was successfully processed, but the server is returning no content in the response. Example usage:
                            <pre>
                            <code>
// Example of handling a 204 No Content response with HttpClient in C#
var client = new HttpClient();
var response = await client.DeleteAsync("https://api.example.com/items/1");
if (response.StatusCode == HttpStatusCode.NoContent)
{
    Console.WriteLine("Resource successfully deleted.");
}
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>400 Bad Request</strong>: The request is malformed or contains syntax errors. This HTTP status code indicates that the server cannot process the request due to a client error, such as incorrect syntax or invalid parameters. Example usage:
                            <pre>
                            <code>
// Example of handling a 400 Bad Request response with HttpClient in C#
var client = new HttpClient();
var response = await client.GetAsync("https://api.example.com/invalid-request");
if (response.StatusCode == HttpStatusCode.BadRequest)
{
    var error = await response.Content.ReadAsStringAsync();
    Console.WriteLine("Request error: " + error);
}
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>401 Unauthorized</strong>: The request requires user authentication or a valid access token. This HTTP status code indicates that authentication is required to access the requested resource. Example usage:
                            <pre>
                            <code>
// Example of handling a 401 Unauthorized response with HttpClient in C#
var client = new HttpClient();
var response = await client.GetAsync("https://api.example.com/protected-resource");
if (response.StatusCode == HttpStatusCode.Unauthorized)
{
    Console.WriteLine("Authentication required to access this resource.");
}
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>403 Forbidden</strong>: The request is legal, but the server refuses to perform the action. This HTTP status code indicates that the server understands the request but refuses to execute it. Example usage:
                            <pre>
                            <code>
// Example of handling a 403 Forbidden response with HttpClient in C#
var client = new HttpClient();
var response = await client.GetAsync("https://api.example.com/forbidden-resource");
if (response.StatusCode == HttpStatusCode.Forbidden)
{
    Console.WriteLine("Access denied to this resource.");
}
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>404 Not Found</strong>: The requested resource was not found on the server. This HTTP status code indicates that the server cannot find the requested resource. Example usage:
                            <pre>
                            <code>
// Example of handling a 404 Not Found response with HttpClient in C#
var client = new HttpClient();
var response = await client.GetAsync("https://api.example.com/nonexistent-resource");
if (response.StatusCode == HttpStatusCode.NotFound)
{
    Console.WriteLine("Resource not found.");
}
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>500 Internal Server Error</strong>: A generic error when a server-side failure prevents the request from being processed. This HTTP status code indicates that an internal server error prevented the request from being processed. Example usage:
                            <pre>
                            <code>
// Example of handling a 500 Internal Server Error response with HttpClient in C#
var client = new HttpClient();
var response = await client.GetAsync("https://api.example.com/server-error");
if (response.StatusCode == HttpStatusCode.InternalServerError)
{
    Console.WriteLine("Internal server error.");
}
                            </code>
                            </pre>
                        </li>
                    </ul>
                </div>
            </div>
        </div>

        <!-- Authentication and Authorization Section -->
        <div class="accordion-item">
            <h2 class="accordion-header">
                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#authSection" aria-expanded="false" aria-controls="authSection">
                    Authentication and Authorization
                </button>
            </h2>
            <div id="authSection" class="accordion-collapse collapse">
                <div class="accordion-body">
                    <ul class="list-group">
                        <li class="list-group-item">
                            <strong>API Key</strong>: Secret key generated to allow access to an API. Transmitted in the header or in the request to authenticate the user. API Keys are often used to track and control API usage, as well as authenticate requests. Example usage:
                            <pre>
                            <code>
// Example of using an API Key with HttpClient in C#
var client = new HttpClient();
client.DefaultRequestHeaders.Add("x-api-key", "your_api_key");
var response = await client.GetAsync("https://api.example.com/data");
var data = await response.Content.ReadAsStringAsync();
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>OAuth</strong>: Standard protocol to authorize third-party applications to access an API using secure access tokens. OAuth allows users to grant third-party applications limited access to their resources without sharing their credentials. Example usage:
                            <pre>
                            <code>
// Example of using OAuth to obtain an access token
var client = new HttpClient();
var tokenResponse = await client.PostAsync("https://auth.example.com/token", new FormUrlEncodedContent(new[]
{
    new KeyValuePair&lt;string, string&gt;("grant_type", "client_credentials"),
    new KeyValuePair&lt;string, string&gt;("client_id", "your_client_id"),
    new KeyValuePair&lt;string, string&gt;("client_secret", "your_client_secret")
}));
var token = await tokenResponse.Content.ReadAsStringAsync();
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>Bearer Token</strong>: Type of authentication token transmitted in the HTTP <code>Authorization</code> header. Bearer Tokens are often used with OAuth to access protected resources. Example usage:
                            <pre>
                            <code>
// Example of using a Bearer Token with HttpClient in C#
var client = new HttpClient();
client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", "your_bearer_token");
var response = await client.GetAsync("https://api.example.com/protected-resource");
var data = await response.Content.ReadAsStringAsync();
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>JWT (JSON Web Token)</strong>: Encoded token that carries session information between the client and the server to authenticate users. JWTs are often used for authentication and authorization in web applications. Example usage:
                            <pre>
                            <code>
// Example of generating and using a JWT in C

#
var tokenHandler = new JwtSecurityTokenHandler();
var key = Encoding.ASCII.GetBytes("your_secret_key");
var tokenDescriptor = new SecurityTokenDescriptor
{
    Subject = new ClaimsIdentity(new[] { new Claim("id", "user_id") }),
    Expires = DateTime.UtcNow.AddHours(1),
    SigningCredentials = new SigningCredentials(new SymmetricSecurityKey(key), SecurityAlgorithms.HmacSha256Signature)
};
var token = tokenHandler.CreateToken(tokenDescriptor);
var jwtToken = tokenHandler.WriteToken(token);

// Using the JWT with HttpClient
var client = new HttpClient();
client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", jwtToken);
var response = await client.GetAsync("https://api.example.com/protected-resource");
var data = await response.Content.ReadAsStringAsync();
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>Basic Auth</strong>: Authentication method where the client sends a username and password encoded in Base64 in the HTTP header. Basic Auth is simple to implement but less secure than other authentication methods. Example usage:
                            <pre>
                            <code>
// Example of using Basic Auth with HttpClient in C#
var client = new HttpClient();
var byteArray = Encoding.ASCII.GetBytes("username:password");
client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Basic", Convert.ToBase64String(byteArray));
var response = await client.GetAsync("https://api.example.com/protected-resource");
var data = await response.Content.ReadAsStringAsync();
                            </code>
                            </pre>
                        </li>
                    </ul>
                </div>
            </div>
        </div>

        <!-- Data Formats Section -->
        <div class="accordion-item">
            <h2 class="accordion-header">
                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#dataFormatsSection" aria-expanded="false" aria-controls="dataFormatsSection">
                    Data Formats
                </button>
            </h2>
            <div id="dataFormatsSection" class="accordion-collapse collapse">
                <div class="accordion-body">
                    <ul class="list-group">
                        <li class="list-group-item">
                            <strong>JSON (JavaScript Object Notation)</strong>: Lightweight, readable data format used for exchanging data between client and server. JSON is often used in web APIs to send and receive structured data. It is easy for humans to read and write and easy for machines to parse and generate. Example usage:
                            <pre>
                            <code>
// Example of JSON serialization and deserialization in C#
using System.Text.Json;

// Serialize an object to JSON
var person = new { Name = "John", Age = 30 };
string jsonString = JsonSerializer.Serialize(person);

// Deserialize a JSON string to an object
var deserializedPerson = JsonSerializer.Deserialize&lt;Person&gt;(jsonString);
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>XML (Extensible Markup Language)</strong>: Extensible data format used to structure and transport information. It is often used as an alternative to JSON. XML is more verbose than JSON but also more flexible and can represent complex hierarchical data. Example usage:
                            <pre>
                            <code>
// Example of XML serialization and deserialization in C#
using System.Xml.Serialization;
using System.IO;

// Serialize an object to XML
var person = new Person { Name = "John", Age = 30 };
var serializer = new XmlSerializer(typeof(Person));
using (var writer = new StringWriter())
{
    serializer.Serialize(writer, person);
    string xmlString = writer.ToString();
}

// Deserialize an XML string to an object
using (var reader = new StringReader(xmlString))
{
    var deserializedPerson = (Person)serializer.Deserialize(reader);
}
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>Form Data</strong>: Format used to send data in the body of a POST request via HTML forms. Form data is encoded as key-value pairs and can include files. This format is commonly used for submitting web forms. Example usage:
                            <pre>
                            <code>
// Example of sending form data with HttpClient in C#
var client = new HttpClient();
var formData = new MultipartFormDataContent();
formData.Add(new StringContent("John"), "name");
formData.Add(new StringContent("30"), "age");
var response = await client.PostAsync("https://api.example.com/submit", formData);
var responseString = await response.Content.ReadAsStringAsync();
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>Multipart</strong>: Data format used to send files and binary data in an HTTP request. The multipart format is often used for file uploads as it allows multiple parts of data to be sent in a single request. Example usage:
                            <pre>
                            <code>
// Example of sending multipart data with HttpClient in C#
var client = new HttpClient();
var multipartContent = new MultipartFormDataContent();
multipartContent.Add(new ByteArrayContent(fileBytes), "file", "filename.txt");
var response = await client.PostAsync("https://api.example.com/upload", multipartContent);
var responseString = await response.Content.ReadAsStringAsync();
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>URLEncoded</strong>: Format in which data is encoded in the URL of an HTTP request (often used in simple GET and POST requests). The data is encoded as key-value pairs and separated by ampersands (&). Example usage:
                            <pre>
                            <code>
// Example of sending URL-encoded data with HttpClient in C#
var client = new HttpClient();
var content = new FormUrlEncodedContent(new[]
{
    new KeyValuePair&lt;string, string&gt;("name", "John"),
    new KeyValuePair&lt;string, string&gt;("age", "30")
});
var response = await client.PostAsync("https://api.example.com/submit", content);
var responseString = await response.Content.ReadAsStringAsync();
                            </code>
                            </pre>
                        </li>
                    </ul>
                </div>
            </div>
        </div>

        <!-- API Security Section -->
        <div class="accordion-item">
            <h2 class="accordion-header">
                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#securitySection" aria-expanded="false" aria-controls="securitySection">
                    API Security
                </button>
            </h2>
            <div id="securitySection" class="accordion-collapse collapse">
                <div class="accordion-body">
                    <ul class="list-group">
                        <li class="list-group-item">
                            <strong>CORS (Cross-Origin Resource Sharing)</strong>: Security mechanism that allows or restricts HTTP requests between different domains (cross-origin). CORS is used to control which resources can be requested by scripts running in the browser on a different domain. Example usage:
                            <pre>
                            <code>
// Example of CORS configuration in an ASP.NET Core project
public void ConfigureServices(IServiceCollection services)
{
    services.AddCors(options =>
    {
        options.AddPolicy("AllowSpecificOrigin",
            builder => builder.WithOrigins("https://example.com")
                                .AllowAnyHeader()
                                .AllowAnyMethod());
    });
}

public void Configure(IApplicationBuilder app, IHostingEnvironment env)
{
    app.UseCors("AllowSpecificOrigin");
    app.UseMvc();
}
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>SSL/TLS</strong>: Protocols used to secure communication between the client and server via HTTPS. SSL (Secure Sockets Layer) and TLS (Transport Layer Security) encrypt exchanged data to ensure confidentiality and integrity of the information. Example usage:
                            <pre>
                            <code>
// Example of HTTPS configuration in an ASP.NET Core project
public class Program
{
    public static void Main(string[] args)
    {
        CreateHostBuilder(args).Build().Run();
    }

    public static IHostBuilder CreateHostBuilder(string[] args) =>
        Host.CreateDefaultBuilder(args)
            .ConfigureWebHostDefaults(webBuilder =>
            {
                webBuilder.UseStartup&lt;Startup&gt;()
                            .UseUrls("https://localhost:5001");
            });
}
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>Rate Limiting</strong>: A strategy that limits the number of requests a client can make to an API within a given time frame, to prevent abuse. Rate limiting is often used to protect APIs from denial-of-service (DoS) attacks and to ensure fair distribution of resources. Example usage:
                            <pre>
                            <code>
// Example of rate limiting configuration with ASP.NET Core
public void ConfigureServices(IServiceCollection services)
{
    services.AddRateLimiter(options =>
    {
        options.GlobalLimiter = RateLimitPartition.GetFixedWindowLimiter(
            partitionKey: "global",
            factory: partition => new FixedWindowRateLimiterOptions
            {
                PermitLimit = 100,
                Window = TimeSpan.FromMinutes(1)
            });
    });
}

public void Configure(IApplicationBuilder app, IHostingEnvironment env)
{
    app.UseRateLimiter();
    app.UseMvc();
}
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>IP Whitelisting</strong>: Restricts access to an API only to a specific list of IP addresses. IP whitelisting is

 used to enhance security by limiting access to sensitive resources only to approved IP addresses. Example usage:
                            <pre>
                            <code>
// Example of IP whitelisting configuration in an ASP.NET Core project
public void Configure(IApplicationBuilder app, IHostingEnvironment env)
{
    app.Use(async (context, next) =>
    {
        var allowedIps = new[] { "192.168.1.1", "192.168.1.2" };
        var remoteIp = context.Connection.RemoteIpAddress?.ToString();

        if (!allowedIps.Contains(remoteIp))
        {
            context.Response.StatusCode = StatusCodes.Status403Forbidden;
            await context.Response.WriteAsync("Forbidden");
            return;
        }

        await next();
    });

    app.UseMvc();
}
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>HMAC (Hash-Based Message Authentication Code)</strong>: Method of authentication and message integrity using a cryptographic hash and a secret key. HMAC is used to verify the integrity and authenticity of messages exchanged between the client and server. Example usage:
                            <pre>
                            <code>
// Example of generating an HMAC in C#
using System.Security.Cryptography;
using System.Text;

public string GenerateHmac(string message, string secretKey)
{
    var key = Encoding.UTF8.GetBytes(secretKey);
    using (var hmac = new HMACSHA256(key))
    {
        var messageBytes = Encoding.UTF8.GetBytes(message);
        var hash = hmac.ComputeHash(messageBytes);
        return Convert.ToBase64String(hash);
    }
}
                            </code>
                            </pre>
                        </li>
                    </ul>
                </div>
            </div>
        </div>

    </div>
</div>
<p>&nbsp;</p>
<div class="container mt-5">
    <h1 class="text-center text-primary mb-4">xUnit Vocabulary</h1>

    <div class="accordion">
        <!-- xUnit Basic Concepts Section -->
        <div class="accordion-item">
            <h2 class="accordion-header">
                <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#xunitBasicsSection" aria-expanded="false" aria-controls="xunitBasicsSection">
                    Basic Concepts of xUnit
                </button>
            </h2>
            <div id="xunitBasicsSection" class="accordion-collapse collapse">
                <div class="accordion-body">
                    <ul class="list-group">
                        <li class="list-group-item">
                            <strong>[Fact]</strong>: Attribute indicating that a method is a test that takes no parameters. Used in the xUnit testing framework, it marks a method as a standard unit test. Methods marked with <code>[Fact]</code> are executed by the test engine without requiring specific input data. Example usage:
                            <pre>
                            <code>
// Example of a unit test with [Fact]
public class CalculatorTests
{
    [Fact]
    public void Add_ReturnsCorrectSum()
    {
        // Arrange
        var calculator = new Calculator();

        // Act
        var result = calculator.Add(2, 3);

        // Assert
        Assert.Equal(5, result);
    }
}
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>[Theory]</strong>: Attribute used to mark a test method that takes parameterized data. Often used with the <code>[InlineData]</code> attribute to test different values within a single test. Theories allow testing a method with multiple sets of data, useful for verifying the behavior of the method under different conditions. Example usage:
                            <pre>
                            <code>
// Example of parameterized test with [Theory] and [InlineData]
public class CalculatorTests
{
    [Theory]
    [InlineData(2, 3, 5)]
    [InlineData(-1, 4, 3)]
    [InlineData(0, 0, 0)]
    public void Add_ReturnsCorrectSum(int a, int b, int expected)
    {
        // Arrange
        var calculator = new Calculator();

        // Act
        var result = calculator.Add(a, b);

        // Assert
        Assert.Equal(expected, result);
    }
}
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>Assert</strong>: Class containing methods used to verify conditions in a test. For example, <code>Assert.Equal()</code> checks if two values are equal, <code>Assert.True()</code> checks if a condition is true, and <code>Assert.NotNull()</code> checks if an object is not null. Assertions are essential to validate test results and ensure the code works as expected. Example usage:
                            <pre>
                            <code>
// Example of using assertions
public class CalculatorTests
{
    [Fact]
    public void Add_ReturnsCorrectSum()
    {
        // Arrange
        var calculator = new Calculator();

        // Act
        var result = calculator.Add(2, 3);

        // Assert
        Assert.Equal(5, result); // Checks if result is equal to 5
        Assert.True(result &gt; 0); // Checks if the result is positive
        Assert.NotNull(calculator); // Checks if calculator object is not null
    }
}
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>Test Runner</strong>: Tool or engine that runs xUnit tests and reports the results. For example, Visual Studio Test Runner or the <code>dotnet test</code> command can be used to run tests and display results. The Test Runner manages the execution of tests, collects the results, and provides reports on passed and failed tests. Example usage:
                            <pre>
                            <code>
// Running tests with the dotnet test command
// Open a console and run the following command in the test project directory
dotnet test
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>Test Fixture</strong>: A shared initialization set between multiple tests. This can include shared configuration or objects used in tests. Fixtures are used to reduce code duplication and set up a common state required for several tests. They can be defined using constructors or setup methods in test classes. Example usage:
                            <pre>
                            <code>
// Example of using a shared fixture
public class DatabaseFixture : IDisposable
{
    public DatabaseFixture()
    {
        // Database initialization
    }

    public void Dispose()
    {
        // Database cleanup
    }
}

public class DatabaseTests : IClassFixture&lt;DatabaseFixture&gt;
{
    private readonly DatabaseFixture _fixture;

    public DatabaseTests(DatabaseFixture fixture)
    {
        _fixture = fixture;
    }

    [Fact]
    public void TestDatabaseConnection()
    {
        // Using the fixture to test database connection
    }
}
                            </code>
                            </pre>
                        </li>
                    </ul>
                </div>
            </div>
        </div>

        <!-- Data Management Section -->
        <div class="accordion-item">
            <h2 class="accordion-header">
                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#dataManagementSection" aria-expanded="false" aria-controls="dataManagementSection">
                    Data Management in xUnit
                </button>
            </h2>
            <div id="dataManagementSection" class="accordion-collapse collapse">
                <div class="accordion-body">
                    <ul class="list-group">
                        <li class="list-group-item">
                            <strong>[InlineData]</strong>: Attribute that provides literal input values for a test marked with the <code>[Theory]</code> attribute. This allows testing different parameter combinations. For example, <code>[InlineData]</code> can be used to pass multiple sets of values to a test method, enabling verification of the method's behavior with different inputs without writing multiple separate tests. Example usage:
                            <pre>
                            <code>
// Example of parameterized test with [InlineData]
public class CalculatorTests
{
    [Theory]
    [InlineData(2, 3, 5)]
    [InlineData(-1, 4, 3)]
    [InlineData(0, 0, 0)]
    public void Add_ReturnsCorrectSum(int a, int b, int expected)
    {
        // Arrange
        var calculator = new Calculator();

        // Act
        var result = calculator.Add(a, b);

        // Assert
        Assert.Equal(expected, result);
    }
}
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>[ClassData]</strong>: Attribute that allows providing data to a <code>Theory</code> test through an external class that implements <code>IEnumerable</code>. This class can encapsulate complex data sets and provide them to the test in a structured manner. It is useful for tests requiring more elaborate or dynamically generated data. Example usage:
                            <pre>
                            <code>
// Data class for [ClassData]
public class CalculatorTestData : IEnumerable&lt;object[]&gt;
{
    public IEnumerator&lt;object[]&gt; GetEnumerator()
    {
        yield return new object[] { 2, 3, 5 };
        yield return new object[] { -1, 4, 3 };
        yield return new object[] { 0, 0, 0 };
    }

    IEnumerator IEnumerable.GetEnumerator() => GetEnumerator();
}

// Example of parameterized test with [ClassData]
public class CalculatorTests
{
    [Theory]
    [ClassData(typeof(CalculatorTestData))]
    public void Add_ReturnsCorrectSum(int a, int b, int expected)
    {
        // Arrange
        var calculator = new Calculator();

        // Act
        var result = calculator.Add(a, b);

        // Assert
        Assert.Equal(expected, result);
    }
}
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>[MemberData]</strong>: Attribute used to provide data from a static property or method of a class that returns a collection of objects or an array. <code>[MemberData]</code> allows reusing test data defined elsewhere in the code, making it easier to maintain and manage test data. Data can be stored in static properties, methods, or fields. Example usage:
                            <pre>
                            <code>
// Data property for [MemberData]
public static IEnumerable&lt;object[]&gt; CalculatorTestData =&gt;
    new List&lt;object[]&gt;
    {
        new object[] { 2, 3, 5 },
        new object[] { -1, 4, 3 },
        new object[] { 0, 0, 0 }
    };

// Example of parameterized test with [MemberData]
public class CalculatorTests
{
    [Theory]
    [MemberData(nameof(CalculatorTestData))]
    public void Add_ReturnsCorrectSum(int a, int b, int expected)
    {
        // Arrange
        var calculator = new Calculator();

        // Act
        var result = calculator.Add(a, b);

        // Assert
        Assert.Equal(expected, result);
    }
}
                            </code

>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>Data Driven Tests</strong>: Set of tests parameterized with multiple values, executed with attributes like <code>[InlineData]</code>, <code>[ClassData]</code>, or <code>[MemberData]</code>. Data-driven tests allow validating a method's behavior with a variety of inputs without duplicating test code. They are particularly useful for verifying the robustness and reliability of code against different input conditions. Example usage:
                            <pre>
                            <code>
// Example of data-driven test with [InlineData]
public class CalculatorTests
{
    [Theory]
    [InlineData(2, 3, 5)]
    [InlineData(-1, 4, 3)]
    [InlineData(0, 0, 0)]
    public void Add_ReturnsCorrectSum(int a, int b, int expected)
    {
        // Arrange
        var calculator = new Calculator();

        // Act
        var result = calculator.Add(a, b);

        // Assert
        Assert.Equal(expected, result);
    }
}
                            </code>
                            </pre>
                        </li>
                    </ul>
                </div>
            </div>
        </div>

        <!-- Setup and Teardown Section -->
        <div class="accordion-item">
            <h2 class="accordion-header">
                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#setupTeardownSection" aria-expanded="false" aria-controls="setupTeardownSection">
                    Setup and Teardown
                </button>
            </h2>
            <div id="setupTeardownSection" class="accordion-collapse collapse">
                <div class="accordion-body">
                    <ul class="list-group">
                        <li class="list-group-item">
                            <strong>IClassFixture</strong>: Interface that allows sharing initialization objects between different tests in the same class, used to manage configuration or state before running the tests. By implementing <code>IClassFixture</code>, you can define a fixture class that is instantiated only once per test class, allowing shared resources or complex setups across multiple tests. Example usage:
                            <pre>
                            <code>
// Defining a fixture
public class DatabaseFixture : IDisposable
{
    public DatabaseFixture()
    {
        // Resource initialization
    }

    public void Dispose()
    {
        // Resource cleanup
    }
}

// Using the fixture in a test class
public class MyTests : IClassFixture&lt;DatabaseFixture&gt;
{
    private readonly DatabaseFixture _fixture;

    public MyTests(DatabaseFixture fixture)
    {
        _fixture = fixture;
    }

    [Fact]
    public void Test1()
    {
        // Using shared resources
    }
}
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>ICollectionFixture</strong>: Interface that allows sharing initialization objects across multiple test classes. <code>ICollectionFixture</code> is useful for sharing resources or configurations between multiple test classes by defining a test collection that shares the same fixture instance. This helps reduce code duplication and improve test efficiency. Example usage:
                            <pre>
                            <code>
// Defining a fixture
public class DatabaseFixture : IDisposable
{
    public DatabaseFixture()
    {
        // Resource initialization
    }

    public void Dispose()
    {
        // Resource cleanup
    }
}

// Defining a test collection
[CollectionDefinition("Database collection")]
public class DatabaseCollection : ICollectionFixture&lt;DatabaseFixture&gt;
{
}

// Using the fixture in a test class
[Collection("Database collection")]
public class MyTests1
{
    private readonly DatabaseFixture _fixture;

    public MyTests1(DatabaseFixture fixture)
    {
        _fixture = fixture;
    }

    [Fact]
    public void Test1()
    {
        // Using shared resources
    }
}

[Collection("Database collection")]
public class MyTests2
{
    private readonly DatabaseFixture _fixture;

    public MyTests2(DatabaseFixture fixture)
    {
        _fixture = fixture;
    }

    [Fact]
    public void Test2()
    {
        // Using shared resources
    }
}
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>Dispose</strong>: Method used to clean up or release resources at the end of a test or fixture, by implementing the <code>IDisposable</code> interface. The <code>Dispose()</code> method is automatically called by the test framework at the end of the test execution, allowing you to release resources such as database connections, open files, or other expensive objects. Example usage:
                            <pre>
                            <code>
// Defining a fixture with Dispose
public class DatabaseFixture : IDisposable
{
    public DatabaseFixture()
    {
        // Resource initialization
    }

    public void Dispose()
    {
        // Resource cleanup
    }
}

// Using the fixture in a test class
public class MyTests : IClassFixture&lt;DatabaseFixture&gt;
{
    private readonly DatabaseFixture _fixture;

    public MyTests(DatabaseFixture fixture)
    {
        _fixture = fixture;
    }

    [Fact]
    public void Test1()
    {
        // Using shared resources
    }
}
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>Constructor and Dispose Pattern</strong>: Common approach for setting up shared state in the constructor of a test class and releasing resources with <code>Dispose()</code>. By using this pattern, you can initialize shared resources in the test class constructor and clean them up in the <code>Dispose()</code> method, ensuring efficient resource management and proper test isolation. Example usage:
                            <pre>
                            <code>
// Defining a fixture with constructor and Dispose
public class DatabaseFixture : IDisposable
{
    public DatabaseFixture()
    {
        // Resource initialization
    }

    public void Dispose()
    {
        // Resource cleanup
    }
}

// Using the fixture in a test class
public class MyTests : IClassFixture&lt;DatabaseFixture&gt;
{
    private readonly DatabaseFixture _fixture;

    public MyTests(DatabaseFixture fixture)
    {
        _fixture = fixture;
    }

    [Fact]
    public void Test1()
    {
        // Using shared resources
    }
}
                            </code>
                            </pre>
                        </li>
                    </ul>
                </div>
            </div>
        </div>

        <!-- Async and Advanced Tests Section -->
        <div class="accordion-item">
            <h2 class="accordion-header">
                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#asyncTestsSection" aria-expanded="false" aria-controls="asyncTestsSection">
                    Async and Advanced Tests
                </button>
            </h2>
            <div id="asyncTestsSection" class="accordion-collapse collapse">
                <div class="accordion-body">
                    <ul class="list-group">
                        <li class="list-group-item">
                            <strong>Async Test</strong>: A test that uses <code>async</code> and <code>await</code> to execute asynchronous methods in a test. xUnit natively supports async tests, allowing you to test methods that perform asynchronous operations like network calls or database access without blocking the test thread. Async tests are defined using the signature <code>public async Task TestMethod()</code>. Example usage:
                            <pre>
                            <code>
// Example of async test with xUnit
public class MyAsyncTests
{
    [Fact]
    public async Task TestAsyncMethod()
    {
        // Calling an async method
        var result = await SomeAsyncMethod();

        // Assertion on the result
        Assert.Equal(expectedResult, result);
    }

    private async Task&lt;int&gt; SomeAsyncMethod()
    {
        await Task.Delay(1000); // Simulates an async operation
        return 42;
    }
}
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>Assert.ThrowsAsync</strong>: Method used to verify that an exception is thrown during the execution of an asynchronous method. For example, <code>await Assert.ThrowsAsync&lt;InvalidOperationException&gt;(async () => await SomeAsyncMethod())</code> checks that <code>SomeAsyncMethod</code> throws an <code>InvalidOperationException</code>. This method is essential for testing the behavior of async methods in error scenarios. Example usage:
                            <pre>
                            <code>
// Example of using Assert.ThrowsAsync with xUnit
public class MyAsyncExceptionTests
{
    [Fact]
    public async Task TestAsyncMethodThrowsException()
    {
        // Verify that an InvalidOperationException is thrown
        await Assert.ThrowsAsync&lt;InvalidOperationException&gt;(async () => await SomeAsyncMethod());
    }

    private async Task SomeAsyncMethod()
    {
        await Task.Delay(1000); // Simulates an async operation
        throw new InvalidOperationException("An error occurred");
    }
}
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>Fluent Assertions</strong>: Popular extension for assertions in xUnit, allowing tests to be written more expressively with fluent syntax. Fluent Assertions offer a wide range of assertion methods that make tests more readable and maintainable. For example, instead of using <code>Assert.Equal(expected, actual)</code>, you can write <code>actual.Should().Be(expected)</code>, improving test clarity. Example usage:
                            <pre>
                            <code>
// Example of using Fluent Assertions with xUnit
public class MyFluentAssertionsTests
{
   

 [Fact]
    public void TestWithFluentAssertions()
    {
        int actual = 42;
        int expected = 42;

        // Using Fluent Assertions
        actual.Should().Be(expected);
    }
}
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>Mocking</strong>: Practice of simulating external objects or services in tests, often used with libraries like Moq or NSubstitute. Mocking allows creating fake objects that imitate the behavior of real dependencies, making it easier to test components in isolation. For example, you can use Moq to create a mock of a database service and define specific behaviors for that service's methods. Example usage:
                            <pre>
                            <code>
// Example of using Moq for mocking with xUnit
public class MyMockingTests
{
    [Fact]
    public void TestWithMocking()
    {
        // Create a mock of a service
        var mockService = new Mock&lt;IMyService&gt;();

        // Define the mock's behavior
        mockService.Setup(service => service.GetData()).Returns("Mocked Data");

        // Use the mock in a test
        var result = mockService.Object.GetData();

        // Assertion on the result
        result.Should().Be("Mocked Data");
    }
}

public interface IMyService
{
    string GetData();
}
                            </code>
                            </pre>
                        </li>
                    </ul>
                </div>
            </div>
        </div>

        <!-- Best Practices Section -->
        <div class="accordion-item">
            <h2 class="accordion-header">
                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#bestPracticesSection" aria-expanded="false" aria-controls="bestPracticesSection">
                    Best Practices with xUnit
                </button>
            </h2>
            <div id="bestPracticesSection" class="accordion-collapse collapse">
                <div class="accordion-body">
                    <ul class="list-group">
                        <li class="list-group-item">
                            <strong>Naming Tests</strong>: Use descriptive names that clearly explain what is being tested and the expected outcome. For example, instead of naming a test <code>Test1</code>, use a name like <code>ShouldReturnTrueWhenInputIsValid</code>. This makes tests more understandable and easier to diagnose when they fail. Example usage:
                            <pre>
                            <code>
// Example of explicit test naming with xUnit
public class MyTests
{
    [Fact]
    public void ShouldReturnTrueWhenInputIsValid()
    {
        // Test setup
        var input = "validInput";
        var expectedResult = true;

        // Execute the tested method
        var result = MyMethod(input);

        // Assertion on the result
        Assert.Equal(expectedResult, result);
    }

    private bool MyMethod(string input)
    {
        // Method logic
        return input == "validInput";
    }
}
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>Isolated Tests</strong>: Ensure that each test is independent of others and that there are no shared dependencies that could cause interference. Use mocks or stubs to isolate external dependencies and ensure tests are not affected by global state or side effects from other tests. Example usage:
                            <pre>
                            <code>
// Example of using Moq to isolate dependencies with xUnit
public class MyTests
{
    [Fact]
    public void TestMethod()
    {
        // Create a mock of a service
        var mockService = new Mock&lt;IMyService&gt;();

        // Define the mock's behavior
        mockService.Setup(service => service.GetData()).Returns("Mocked Data");

        // Use the mock in a test
        var result = mockService.Object.GetData();

        // Assertion on the result
        Assert.Equal("Mocked Data", result);
    }
}

public interface IMyService
{
    string GetData();
}
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>Coverage</strong>: Use code coverage tools like Coverlet to measure and improve test coverage. Code coverage indicates which parts of the code are executed by tests, helping to identify untested areas. High coverage doesn't guarantee bug-free code, but it increases confidence in code quality. Example usage:
                            <pre>
                            <code>
// Example of using Coverlet to measure code coverage
// Add Coverlet as a test tool in the .csproj file
&lt;ItemGroup&gt;
    &lt;PackageReference Include="coverlet.collector" Version="3.0.3" /&gt;
&lt;/ItemGroup&gt;

// Run tests with code coverage collection
dotnet test --collect:"XPlat Code Coverage"

// Generate a code coverage report
reportgenerator -reports:coverage.cobertura.xml -targetdir:coveragereport
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>Refactoring and Tests</strong>: Regularly refactor test code to make it more readable and maintainable. Refactoring tests includes removing duplications, improving method and variable names, and simplifying assertions. Clean, well-structured test code makes it easier to maintain and evolve tests as the production code changes. Example usage:
                            <pre>
                            <code>
// Example of test refactoring with xUnit
public class MyTests
{
    [Fact]
    public void ShouldReturnTrueWhenInputIsValid()
    {
        // Test setup
        var input = "validInput";
        var expectedResult = true;

        // Execute the tested method
        var result = MyMethod(input);

        // Assertion on the result
        Assert.Equal(expectedResult, result);
    }

    [Fact]
    public void ShouldReturnFalseWhenInputIsInvalid()
    {
        // Test setup
        var input = "invalidInput";
        var expectedResult = false;

        // Execute the tested method
        var result = MyMethod(input);

        // Assertion on the result
        Assert.Equal(expectedResult, result);
    }

    private bool MyMethod(string input)
    {
        // Method logic
        return input == "validInput";
    }
}
                            </code>
                            </pre>
                        </li>
                    </ul>
                </div>
            </div>
        </div>

    </div>
</div>
<p>&nbsp;</p>
<div class="container mt-5">
    <h1 class="text-center text-primary mb-4">Entity Framework Core Vocabulary</h1>

    <div class="accordion">
        <!-- DbContext Section -->
        <div class="accordion-item">
            <h2 class="accordion-header">
                <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#dbContextSection" aria-expanded="false" aria-controls="dbContextSection">
                    DbContext
                </button>
            </h2>
            <div id="dbContextSection" class="accordion-collapse collapse">
                <div class="accordion-body">
                    <ul class="list-group">
                        <li class="list-group-item">
                            <strong>DbContext</strong>: A central class that manages database queries and changes. The <code>DbContext</code> is responsible for managing the database connection, tracking changes made to entities, and coordinating data saving and retrieval operations. Example:
                            <pre>
                            <code>
public class ApplicationDbContext : DbContext
{
    public DbSet&lt;Product&gt; Products { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
    {
        optionsBuilder.UseSqlServer("YourConnectionString");
    }
}
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>DbSet&lt;T&gt;</strong>: Represents a collection of entities of a particular type within the context. A <code>DbSet</code> allows creating, reading, updating, and deleting entities from the database. Example:
                            <pre>
                            <code>
public class ApplicationDbContext : DbContext
{
    public DbSet&lt;Customer&gt; Customers { get; set; }
}
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>OnModelCreating</strong>: A method where data model configurations are defined (mapping between entities and the database). This method is used to configure relationships, constraints, and naming conventions for tables and columns. Example:
                            <pre>
                            <code>
protected override void OnModelCreating(ModelBuilder modelBuilder)
{
    modelBuilder.Entity&lt;Product&gt;().HasKey(p => p.ProductId);
    modelBuilder.Entity&lt;Product&gt;().Property(p => p.Name).IsRequired().HasMaxLength(100);
}
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>SaveChanges</strong>: Method to save changes made to entities in the database. This method sends all changes tracked by the <code>DbContext</code> to the database. Example:
                            <pre>
                            <code>
using (var context = new ApplicationDbContext())
{
    var product = new Product { Name = "New Product" };
    context.Products.Add(product);
    context.SaveChanges();
}
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>ChangeTracker</strong>: Tracks changes to entities managed by the DbContext. The <code>ChangeTracker</code> detects changes made to entities and determines what operations should be performed when <code>SaveChanges</code> is called. Example:
                            <pre>
                            <code>
using (var context = new ApplicationDbContext())
{
    var product = context.Products.First();
    product.Name = "Updated Product";
    var entries = context.ChangeTracker.Entries();
    foreach (var entry in entries)
    {
        Console.WriteLine($"{entry.Entity.GetType().Name} - {entry.State}");
    }
    context.SaveChanges();
}
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>Lazy Loading</strong>: Lazy data loading, where relationships are only retrieved when accessed. This optimizes performance by not immediately loading all related data. Example:
                            <pre>
                            <code>
public class Customer
{
    public int CustomerId { get; set; }
    public string Name { get; set; }
    public virtual ICollection&lt;Order&gt; Orders { get; set; } // Lazy loading enabled
}
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>Explicit Loading</strong>: Explicitly loading related data through methods like <code>Load()</code>. Used when lazy loading is disabled or for more precise control over when data is loaded. Example:
                            <pre>
                            <code>
using (var context = new ApplicationDbContext())
{
    var customer = context.Customers.First();
    context.Entry(customer).Collection(c => c.Orders).Load();
}
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>Query Tracking</strong>: Controls whether retrieved entities are tracked for changes. By default, retrieved entities are tracked, but this can be disabled to improve performance using <code>AsNoTracking()</code>. Example:
                            <pre>
                            <code>
using (var context = new ApplicationDbContext())
{
    var customers = context.Customers.AsNoTracking().ToList();
}
                            </code>
                            </pre>
                        </li>
                    </ul>
                </div>
            </div>
        </div>

        <!-- Migrations Section -->
        <div class="accordion-item">
            <h2 class="accordion-header">
                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#migrationsSection" aria-expanded="false" aria-controls="migrationsSection">
                    Migrations
                </button>
            </h2>
            <div id="migrationsSection" class="accordion-collapse collapse">
                <div class="accordion-body">
                    <ul class="list-group">
                        <li class="list-group-item">
                            <strong>Migration</strong>: A class representing a change to the database structure. A migration contains instructions to create, modify, or delete tables and columns. It allows syncing the data model with the database. Example:
                            <pre>
                            <code>
public partial class AddProductTable : Migration
{
    protected override void Up(MigrationBuilder migrationBuilder)
    {
        migrationBuilder.CreateTable(
            name: "Products",
            columns: table => new
            {
                Id = table.Column&lt;int&gt;(nullable: false)
                    .Annotation("SqlServer:Identity", "1, 1"),
                Name = table.Column&lt;string&gt;(nullable: true)
            },
            constraints: table =>
            {
                table.PrimaryKey("PK_Products", x => x.Id);
            });
    }

    protected override void Down(MigrationBuilder migrationBuilder)
    {
        migrationBuilder.DropTable(name: "Products");
    }
}
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>Add-Migration</strong>: Command to generate a new migration based on changes made to the model. This command creates a migration file containing instructions needed to apply changes to the database. Example:
                            <pre><code>dotnet ef migrations add AddProductTable</code></pre>
                        </li>
                        <li class="list-group-item">
                            <strong>Update-Database</strong>: Command to apply migrations to the database. It executes instructions contained in migration files to update the database structure. Example:
                            <pre><code>dotnet ef database update</code></pre>
                        </li>
                        <li class="list-group-item">
                            <strong>Down</strong>: A migration method that reverts applied changes. This method is used to undo the changes made by the <code>Up</code> method. Example:
                            <pre>
                            <code>
protected override void Down(MigrationBuilder migrationBuilder)
{
    migrationBuilder.DropTable(name: "Products");
}
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>Up</strong>: A migration method that defines changes to apply to the database. This method contains instructions to create, modify, or delete database elements. Example:
                            <pre>
                            <code>
protected override void Up(MigrationBuilder migrationBuilder)
{
    migrationBuilder.CreateTable(
        name: "Products",
        columns: table => new
        {
            Id = table.Column&lt;int&gt;(nullable: false)
                .Annotation("SqlServer:Identity", "1, 1"),
            Name = table.Column&lt;string&gt;(nullable: true)
        },
        constraints: table =>
        {
            table.PrimaryKey("PK_Products", x => x.Id);
        });
}
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>Rollback</strong>: Revert to a previous migration by undoing migrations applied after it. This operation uses the <code>Down</code> methods of migrations to undo changes. Example:
                            <pre><code>dotnet ef database update PreviousMigration</code></pre>
                        </li>
                    </ul>
                </div>
            </div>
        </div>

        <!-- Entities Section -->
        <div class="accordion-item">
            <h2 class="accordion-header">
                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#entitiesSection" aria-expanded="false" aria-controls="entitiesSection">
                    Entities
                </button>
            </h2>
            <div id="entitiesSection" class="accordion-collapse collapse">
                <div class="accordion-body">
                    <ul class="list-group">
                        <li class="list-group-item">
                            <strong>Entity</strong>: A C# class representing a table in the database. An entity contains properties corresponding to table columns. Example:
                            <pre>
                            <code>
public class Product
{
    public int Id { get; set; }
    public string Name { get; set; }
}
                            </code>
                            </pre>
                            This represents a "Product" table with "Id" and "Name" columns.
                        </li>
                        <li class="list-group-item">
                            <strong>Primary Key</strong>: A property or set of properties uniquely identifying an entity. The primary key ensures the uniqueness of each record in the table. Example:
                            <pre>
                            <code>
public class Product
{
    [Key]
    public int Id { get; set; }
}
                            </code>
                            </pre>
                            This defines "Id" as the primary key.
                        </li>
                        <li class="list-group-item">
                            <strong>Foreign Key</strong>: A foreign key establishes a relationship between two entities. It links one entity to another using a primary key from another table. Example:
                            <pre>
                            <code>
public class Order
{
    public int Id { get; set; }
    public int ProductId { get; set; }

    [ForeignKey("ProductId")]
    public Product Product { get; set; }
}
                            </code>
                            </pre>
                            This defines "ProductId" as a foreign key linking "Order" to "Product".
                        </li>
                        <li class="list-group-item">
                            <strong>Navigation Property</strong>: A property used to access related entities (relationships between tables). Navigation properties allow navigating between related entities. Example:
                            <pre>
                            <code>
public class Order
{
    public int Id { get; set; }
    public int ProductId { get; set; }
    public Product Product { get; set; }
}
                            </code>
                            </pre>
                            This allows accessing the "Product" entity from "Order".
                        </li>
                        <li class="list-group-item">
                            <strong>Data Annotations</strong>: Attributes used to configure the behavior of entity properties. Data annotations define constraints and validation rules. Example:
                            <pre>
                            <code>
public class Product
{
    [Key]
    public int Id { get; set; }

    [Required]
    [MaxLength(100)]
    public string Name { get; set; }
}
                            </code>
                            </pre>
                            This uses <code>[Key]</code>, <code>[Required]</code>, and <code>[MaxLength(100)]</code> annotations to configure the "Product" entity's properties.
                        </li>
                    </ul>
                </div>
            </div>
        </div>

        <!-- LINQ and Queries Section -->
        <div class="accordion-item">
            <h2 class="accordion-header">
                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#linqSection" aria-expanded="false" aria-controls="linqSection">
                    LINQ and Queries
                </button>
            </h2>
            <div id="linqSection" class="accordion-collapse collapse">
                <div class="accordion-body">
                    <ul class="list-group">
                        <li class="list-group-item">
                            <strong>LINQ</strong>: Language Integrated Query, used to write queries to retrieve collections of entities. LINQ offers a consistent syntax for querying data from various sources (in-memory collections, databases, XML, etc.). Example:
                            <pre>
                            <code>
var query = from p in products
where p.Price > 100
select p;
                            </code>
                            </pre>
                            This selects products with a price greater than 100.
                        </li>
                        <li class="list-group-item">
                            <strong>Where</strong>: Method to filter entities based on a condition. It allows selecting only the elements that meet a specified condition. Example:
                            <pre><code>var expensiveProducts = products.Where(p =&gt; p.Price &gt; 100);</code></pre>
                            This retrieves products with a price greater than 100.
                        </li>
                        <li class="list-group-item">
                            <strong>Include</strong>: Method to load related entities. Used with Entity Framework to include related data in query results. Example:
                            <pre><code>var orders = context.Orders.Include(o =&gt; o.Customer).ToList();</code></pre>
                            This loads orders with associated customer information.
                        </li>
                        <li class="list-group-item">
                            <strong>FirstOrDefault</strong>: Method that returns the first entity matching a condition or a default value if no entity matches. It's used to retrieve a single item from a collection. Example:
                            <pre><code>var firstProduct = products.FirstOrDefault(p =&gt; p.Name == "Laptop");</code></pre>
                            This retrieves the first product named "Laptop" or <code>null</code> if none exist.
                        </li>
                        <li class="list-group-item">
                            <strong>ToList</strong>: Method to execute a query and convert the result into a list. It forces the immediate execution of the query and returns the results as a list. Example:
                            <pre><code>var productList = products.Where(p =&gt; p.Price &gt; 100).ToList();</code></pre>
                            This retrieves a list of products with a price greater than 100.
                        </li>
                        <li class="list-group-item">
                            <strong>AsNoTracking</strong>: Executes a query without tracking retrieved entities in the ChangeTracker. Used to improve performance when change tracking is not needed. Example:
                            <pre><code>var customers = context.Customers.AsNoTracking().ToList();</code></pre>
                            This retrieves customers without tracking changes.
                        </li>
                        <li class="list-group-item">
                            <strong>GroupBy</strong>: Method to group results by a key. It creates groups of items sharing the same key value. Example:
                            <pre><code>var productsByCategory = products.GroupBy(p =&gt; p.Category);</code></pre>
                            This groups products by category.
                        </li>
                    </ul>
                </div>
            </div>
        </div>

        <!-- Advanced Configurations Section -->
        <div class="accordion-item">
            <h2 class="accordion-header">
                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#advancedConfigSection" aria-expanded="false" aria-controls="advancedConfigSection">
                    Advanced Configurations
                </button>
            </h2>
            <div id="advancedConfigSection" class="accordion-collapse collapse">
                <div class="accordion-body">
                    <ul class="list-group">
                        <li class="list-group-item">
                            <strong>Fluent API</strong>: API that allows configuring entity relationships and properties without using data annotations. It offers a fluid and expressive syntax for configuring the data model in the <code>OnModelCreating</code> method of <code>DbContext</code>. Example:
                            <pre>
                            <code>
protected override void OnModelCreating(ModelBuilder modelBuilder)
{
    modelBuilder.Entity&lt;Product&gt;()
        .HasKey(p =&gt; p.Id);

    modelBuilder.Entity&lt;Product&gt;()
        .Property(p =&gt; p.Name)
        .IsRequired()
        .HasMaxLength(100);
}
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>HasKey</strong>: Used to define the primary key of an entity. This method specifies which property or properties form the primary key. Example:
                            <pre>
                            <code>
modelBuilder.Entity&lt;Product&gt;()
.HasKey(p =&gt; p.Id);
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>HasOne</strong>: Used to configure a one-to-one or one-to-many relationship between entities. This method specifies that an entity has a relationship with another entity. Example:
                            <pre>
                            <code>
modelBuilder.Entity&lt;Order&gt;()
.HasOne(o =&gt; o.Customer)
.WithMany(c =&gt; c.Orders)
.HasForeignKey(o =&gt; o.CustomerId);
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>HasMany</strong>: Used to configure a many-to-one or many-to-many relationship between entities. This method specifies that an entity has multiple relationships with another entity. Example:
                            <pre>
                            <code>
modelBuilder.Entity&lt;Customer&gt;()
.HasMany(c =&gt; c.Orders)
.WithOne(o =&gt; o.Customer)
.HasForeignKey(o =&gt; o.CustomerId);
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>ToTable</strong>: Method used to specify the table name for an entity. It maps an entity to a specific table in the database. Example:
                            <pre>
                            <code>
modelBuilder.Entity&lt;Product&gt;()
.ToTable("Products");
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>Seed Data</strong>: A set of initial data

 automatically inserted into the database during migration. It is used to pre-fill the database with test data or default values. Example:
                            <pre>
                            <code>
modelBuilder.Entity&lt;Product&gt;().HasData(
new Product { Id = 1, Name = "Laptop" },
new Product { Id = 2, Name = "Smartphone" });
                            </code>
                            </pre>
                        </li>
                    </ul>
                </div>
            </div>
        </div>
    </div>
</div>
<p>&nbsp;</p>
<div class="container mt-5">
    <h1 class="text-center text-primary mb-4">LINQ (Language Integrated Query) Vocabulary</h1>

    <div class="accordion">
        <!-- Section LINQ Overview -->
        <div class="accordion-item">
            <h2 class="accordion-header">
                <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#linqOverviewSection" aria-expanded="false" aria-controls="linqOverviewSection">
                    LINQ Overview
                </button>
            </h2>
            <div id="linqOverviewSection" class="accordion-collapse collapse">
                <div class="accordion-body">
                    <ul class="list-group">
                        <li class="list-group-item">
                            <strong>LINQ</strong>: A set of .NET features for querying and manipulating data collections in a declarative manner. LINQ (Language Integrated Query) allows writing queries directly in C# code using a syntax similar to SQL. Example:
                            <pre>
                            <code>
var query = from p in products
where p.Price > 100
select p;
                            </code>
                            </pre>
                            This selects products where the price is greater than 100.
                        </li>
                        <li class="list-group-item">
                            <strong>LINQ to Objects</strong>: Using LINQ to query in-memory collections like lists, arrays, etc. This allows manipulating in-memory data declaratively. Example:
                            <pre>
                            <code>
List&lt;int&gt; numbers = new List&lt;int&gt; { 1, 2, 3, 4, 5 };
var evenNumbers = from n in numbers
                  where n % 2 == 0
                  select n;
                            </code>
                            </pre>
                            This selects the even numbers from the list.
                        </li>
                        <li class="list-group-item">
                            <strong>LINQ to SQL</strong>: Using LINQ to query SQL databases via C# objects. LINQ to SQL allows mapping C# classes to database tables and writing queries using LINQ. Example:
                            <pre>
                            <code>
DataContext db = new DataContext("connectionString");
var query = from c in db.GetTable&lt;Customer&gt;()
            where c.City == "Paris"
            select c;
                            </code>
                            </pre>
                            This selects customers whose city is "Paris."
                        </li>
                        <li class="list-group-item">
                            <strong>LINQ to XML</strong>: Allows manipulating and querying XML documents using LINQ. LINQ to XML offers a fluid API for working with XML documents. Example:
                            <pre>
                            <code>
XDocument doc = XDocument.Load("data.xml");
var query = from e in doc.Descendants("Employee")
            where (int)e.Element("Age") > 30
            select e;
                            </code>
                            </pre>
                            This selects employees whose age is greater than 30.
                        </li>
                        <li class="list-group-item">
                            <strong>LINQ to Entities</strong>: Used to query databases via Entity Framework. LINQ to Entities allows writing LINQ queries to interact with entities mapped to database tables. Example:
                            <pre>
                            <code>
var query = from o in context.Orders
            where o.OrderDate &gt; DateTime.Now.AddDays(-30)
            select o;
                            </code>
                            </pre>
                            This selects orders placed within the last 30 days.
                        </li>
                        <li class="list-group-item">
                            <strong>Deferred Execution</strong>: LINQ queries are not executed until the data is actually requested. This means the query is not executed when defined but when the data is iterated. Example:
                            <pre>
                            <code>
var query = from p in products
            where p.Price > 100
            select p;

// The query is executed here, when the data is requested
foreach (var product in query)
{
    Console.WriteLine(product.Name);
}
                            </code>
                            </pre>
                            This optimizes performance by delaying execution until the data is needed.
                        </li>
                    </ul>
                </div>
            </div>
        </div>

        <!-- Section LINQ Query Methods -->
        <div class="accordion-item">
            <h2 class="accordion-header">
                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#linqMethodsSection" aria-expanded="false" aria-controls="linqMethodsSection">
                    LINQ Query Methods
                </button>
            </h2>
            <div id="linqMethodsSection" class="accordion-collapse collapse">
                <div class="accordion-body">
                    <ul class="list-group">
                        <li class="list-group-item">
                            <strong>Where</strong>: Filters the elements of a collection based on a condition. This method returns only the elements that meet the specified condition. Example:
                            <pre><code>var adults = collection.Where(x => x.Age > 18);</code></pre>
                            This selects the elements where age is greater than 18.
                        </li>
                        <li class="list-group-item">
                            <strong>Select</strong>: Projects elements of a collection into a new form. This method transforms each element of a collection into a new type. Example:
                            <pre><code>var names = collection.Select(x => x.Name);</code></pre>
                            This selects the names of the elements in the collection.
                        </li>
                        <li class="list-group-item">
                            <strong>OrderBy / OrderByDescending</strong>: Sorts the elements of a collection in ascending or descending order. <code>OrderBy</code> sorts in ascending order, while <code>OrderByDescending</code> sorts in descending order. Example:
                            <pre>
                            <code>
var sortedByAge = collection.OrderBy(x => x.Age);
var sortedByAgeDesc = collection.OrderByDescending(x => x.Age);
                            </code>
                            </pre>
                            This sorts the elements by age in ascending and descending order, respectively.
                        </li>
                        <li class="list-group-item">
                            <strong>GroupBy</strong>: Groups the elements of a collection by a key. This method creates groups of elements that share the same key value. Example:
                            <pre><code>var groupedByCategory = collection.GroupBy(x => x.Category);</code></pre>
                            This groups the elements by category.
                        </li>
                        <li class="list-group-item">
                            <strong>Join</strong>: Joins two collections based on a common key. This method combines elements from two different collections based on a shared key. Example:
                            <pre><code>var joined = collection1.Join(collection2, x => x.Id, y => y.Id, (x, y) => new { x.Name, y.Description });</code></pre>
                            This joins the two collections on the <code>Id</code> key and creates a new collection with the <code>Name</code> and <code>Description</code> properties.
                        </li>
                        <li class="list-group-item">
                            <strong>First / FirstOrDefault</strong>: Returns the first element of a collection, or a default value if no element is found. <code>First</code> throws an exception if no element is found, while <code>FirstOrDefault</code> returns <code>null</code> or the default value of the type. Example:
                            <pre>
                            <code>
var firstJohn = collection.First(x => x.Name == "John");
var firstOrDefaultJohn = collection.FirstOrDefault(x => x.Name == "John");
                            </code>
                            </pre>
                            This returns the first element named "John" or <code>null</code> if none are found.
                        </li>
                        <li class="list-group-item">
                            <strong>Single / SingleOrDefault</strong>: Returns a single element or throws an exception if multiple elements match. <code>Single</code> throws an exception if no or multiple elements are found, while <code>SingleOrDefault</code> returns <code>null</code> or the default value of the type if no element is found. Example:
                            <pre>
                            <code>
var singleItem = collection.Single(x => x.Id == 1);
var singleOrDefaultItem = collection.SingleOrDefault(x => x.Id == 1);
                            </code>
                            </pre>
                            This returns the single element with Id 1 or <code>null</code> if none are found.
                        </li>
                        <li class="list-group-item">
                            <strong>Count</strong>: Returns the number of elements in a collection. This method counts the total number of elements in the collection. Example:
                            <pre><code>var count = collection.Count();</code></pre>
                            This returns the total number of elements in the collection.
                        </li>
                        <li class="list-group-item">
                            <strong>Sum</strong>: Returns the sum of the numeric values in a collection. This method adds up the values of a numeric property of each element in the collection. Example:
                            <pre><code>var totalPrice = collection.Sum(x => x.Price);</code></pre>
                            This returns the sum of the prices of the elements in the collection.
                        </li>
                        <li class="list-group-item">
                            <strong>Average</strong>: Returns the average of the

 numeric values in a collection. This method calculates the average of a numeric property of each element in the collection. Example:
                            <pre><code>var averageScore = collection.Average(x => x.Score);</code></pre>
                            This returns the average score of the elements in the collection.
                        </li>
                        <li class="list-group-item">
                            <strong>Min / Max</strong>: Returns the minimum or maximum value in a collection. <code>Min</code> returns the smallest value, while <code>Max</code> returns the largest value of a numeric property. Example:
                            <pre><code>var minPrice = collection.Min(x => x.Price);
var maxPrice = collection.Max(x => x.Price);</code></pre>
                            This returns the minimum and maximum price of the elements in the collection.
                        </li>
                        <li class="list-group-item">
                            <strong>Distinct</strong>: Removes duplicates from a collection. This method returns a new collection containing only unique elements. Example:
                            <pre><code>var distinctItems = collection.Distinct();</code></pre>
                            This returns a collection without duplicates.
                        </li>
                    </ul>
                </div>
            </div>
        </div>

        <!-- Section LINQ Query Syntax -->
        <div class="accordion-item">
            <h2 class="accordion-header">
                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#linqSyntaxSection" aria-expanded="false" aria-controls="linqSyntaxSection">
                    LINQ Query Syntax
                </button>
            </h2>
            <div id="linqSyntaxSection" class="accordion-collapse collapse">
                <div class="accordion-body">
                    <ul class="list-group">
                        <li class="list-group-item">
                            <strong>Query Syntax</strong>: A query style that resembles SQL queries. It is used to write queries declaratively, similar to SQL. Query syntax is often more readable for those familiar with SQL. Example:
                            <pre>
                            <code>
var adults = from x in collection
             where x.Age > 18
             select x;
                            </code>
                            </pre>
                            This selects all elements from the collection where the age is greater than 18.
                        </li>
                        <li class="list-group-item">
                            <strong>Method Syntax</strong>: A query style that uses method chaining (chaining methods). It is used to write queries using LINQ extension methods. Method syntax is often more concise and expressive. Example:
                            <pre>
                            <code>
var names = collection.Where(x => x.Age > 18)
                      .Select(x => x.Name);
                            </code>
                            </pre>
                            This filters the elements where age is greater than 18 and selects the names of the elements.
                        </li>
                        <li class="list-group-item">
                            <strong>Let</strong>: A keyword used in queries to store intermediate results. It is used to create temporary variables in a LINQ query, which can simplify complex queries and improve readability. Example:
                            <pre>
                            <code>
var query = from x in collection
            let total = x.Quantity * x.Price
            where total > 100
            select new { x.Name, Total = total };
                            </code>
                            </pre>
                            This calculates the total for each item by multiplying quantity by price, then selects items where the total is greater than 100.
                        </li>
                        <li class="list-group-item">
                            <strong>Into</strong>: Allows continuing a query after a grouping or join. It is used to create a new scope for grouped or joined results, allowing further manipulation of the results. Example:
                            <pre>
                            <code>
var grouped = from x in collection
              group x by x.Category into g
              select new { Category = g.Key, Items = g.ToList() };
                            </code>
                            </pre>
                            This groups elements by category and allows continuing the query with the group <code>g</code>.
                        </li>
                    </ul>
                </div>
            </div>
        </div>

        <!-- Section Performance and Optimization -->
        <div class="accordion-item">
            <h2 class="accordion-header">
                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#linqPerformanceSection" aria-expanded="false" aria-controls="linqPerformanceSection">
                    Performance and Optimization
                </button>
            </h2>
            <div id="linqPerformanceSection" class="accordion-collapse collapse">
                <div class="accordion-body">
                    <ul class="list-group">
                        <li class="list-group-item">
                            <strong>Deferred Execution</strong>: LINQ queries that are not executed immediately but when they are iterated. This optimizes performance by delaying execution until the results are actually needed. For example, a LINQ query is only executed when you iterate over the results with a <code>foreach</code> loop or call a method like <code>ToList()</code>. Example:
                            <pre>
                            <code>
var query = collection.Where(x => x.Age > 18);
// The query is executed here, when the data is requested
foreach (var item in query)
{
    Console.WriteLine(item.Name);
}
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>Immediate Execution</strong>: Queries that are executed immediately via methods like <code>ToList()</code> or <code>Count()</code>. These methods force the query to execute and return the results immediately. Example:
                            <pre><code>var result = collection.ToList();</code></pre>
                            This executes the query and stores the results in a list.
                        </li>
                        <li class="list-group-item">
                            <strong>AsNoTracking</strong>: Used with Entity Framework to improve performance by disabling entity tracking. When you use <code>AsNoTracking()</code>, the retrieved entities are not tracked by the <code>ChangeTracker</code>, which reduces memory overhead and improves the performance of read-only queries. Example:
                            <pre><code>var customers = context.Customers.AsNoTracking().ToList();</code></pre>
                            This retrieves customers without tracking changes.
                        </li>
                        <li class="list-group-item">
                            <strong>Projection</strong>: A technique to select only the necessary data to improve performance. By using projections, you can reduce the amount of data transferred and processed. Example:
                            <pre><code>var names = collection.Select(x => x.Name).ToList();</code></pre>
                            This selects only the names of the elements, thus reducing data load.
                        </li>
                        <li class="list-group-item">
                            <strong>Optimize Joins</strong>: Ensure to use <code>Join</code> with appropriate relationships to avoid inefficient SQL queries. Optimizing joins reduces the number of queries and improves overall performance. Example:
                            <pre>
                            <code>
var result = from a in context.TableA
             join b in context.TableB on a.Id equals b.AId
             select new { a, b };
                            </code>
                            </pre>
                            This performs an efficient join between two tables.
                        </li>
                    </ul>
                </div>
            </div>
        </div>

        <!-- Section LINQ Tools and Extensions -->
        <div class="accordion-item">
            <h2 class="accordion-header">
                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#linqToolsSection" aria-expanded="false" aria-controls="linqToolsSection">
                    LINQ Tools and Extensions
                </button>
            </h2>
            <div id="linqToolsSection" class="accordion-collapse collapse">
                <div class="accordion-body">
                    <ul class="list-group">
                        <li class="list-group-item">
                            <strong>LINQPad</strong>: A tool to test and interact with LINQ queries. LINQPad allows executing LINQ queries, visualizing results, and debugging queries. It supports LINQ to SQL, LINQ to Entities, LINQ to XML, and much more. It is an essential tool for developers working with LINQ. Example usage:
                            <pre>
                            <code>
// Write and execute a LINQ query in LINQPad
var query = from p in Products
            where p.Price > 100
            select p;
query.Dump(); // Dump() is a LINQPad-specific method to display results
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>ReSharper</strong>: A productivity tool that enhances support for LINQ queries in Visual Studio. ReSharper offers advanced refactoring, navigation, and code analysis features, making it easier to write and optimize LINQ queries. It also provides suggestions to improve performance and code readability. Example usage:
                            <pre>
                            <code>
// ReSharper can suggest improvements for LINQ queries
var query = collection.Where(x => x.Age > 18).Select(x => x.Name);
// ReSharper may suggest combining methods for improved readability
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>Dynamic LINQ</strong>: Allows creating LINQ queries from strings, often used in dynamic applications. Dynamic LINQ is useful when queries need to be constructed dynamically at runtime,

 for example, based on user input. It enables generating complex queries without writing static LINQ code. Example usage:
                            <pre>
                            <code>
using System.Linq.Dynamic.Core;

var query = collection.AsQueryable().Where("Age > 18").Select("Name");
                            </code>
                            </pre>
                            This allows creating dynamic LINQ queries from strings.
                        </li>
                    </ul>
                </div>
            </div>
        </div>
    </div>
</div>
<p>&nbsp;</p>
<div class="container mt-5">
    <h1 class="text-center text-primary mb-4">SQL Vocabulary</h1>

    <div class="accordion">
        <!-- Section Basic Queries -->
        <div class="accordion-item">
            <h2 class="accordion-header">
                <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#basicQueriesSection" aria-expanded="false" aria-controls="basicQueriesSection">
                    Basic Queries
                </button>
            </h2>
            <div id="basicQueriesSection" class="accordion-collapse collapse">
                <div class="accordion-body">
                    <ul class="list-group">
                        <li class="list-group-item">
                            <strong>SELECT</strong>: Extracts data from one or more tables. The SELECT clause is used to specify the columns you want to retrieve in an SQL query. It can be used with other clauses like WHERE, ORDER BY, and GROUP BY to refine the results. Usage example:
                            <pre>
                            <code>
-- Select all columns from a table
SELECT * FROM Employees;

-- Select specific columns
SELECT FirstName, LastName FROM Employees;
                                </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>FROM</strong>: Specifies the table(s) from which data will be retrieved. The FROM clause is used to indicate the source of the data in an SQL query. It can include joins to combine data from multiple tables. Usage example:
                            <pre>
                            <code>
-- Select data from a table
SELECT * FROM Employees;

-- Select data from multiple tables using a join
SELECT Employees.FirstName, Departments.DepartmentName
FROM Employees
JOIN Departments ON Employees.DepartmentID = Departments.DepartmentID;
                                </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>WHERE</strong>: Filters the results of a query based on a condition. The WHERE clause is used to specify criteria that must be met for records to be included in the query results. Usage example:
                            <pre>
                            <code>
-- Select data with a condition
SELECT * FROM Employees WHERE Age > 30;

-- Using multiple conditions
SELECT * FROM Employees WHERE Age > 30 AND DepartmentID = 1;
                                </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>INSERT INTO</strong>: Adds new data to a table. The INSERT INTO clause is used to insert new records into a table. You can specify the columns and values to insert. Usage example:
                            <pre>
                            <code>
-- Insert a new record
INSERT INTO Employees (FirstName, LastName, Age, DepartmentID)
VALUES ('John', 'Doe', 28, 1);
                                </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>UPDATE</strong>: Modifies existing records in a table. The UPDATE clause is used to update the values of columns in existing records. It is often used with the WHERE clause to specify which records to update. Usage example:
                            <pre>
                            <code>
-- Update a record
UPDATE Employees
SET Age = 29
WHERE EmployeeID = 1;
                                </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>DELETE</strong>: Deletes records in a table. The DELETE clause is used to remove records from a table. It is often used with the WHERE clause to specify which records to delete. Usage example:
                            <pre>
                            <code>
-- Delete a record
DELETE FROM Employees
WHERE EmployeeID = 1;
                                </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>ORDER BY</strong>: Sorts the results of a query by one or more columns. The ORDER BY clause is used to sort the results of an SQL query in ascending (ASC) or descending (DESC) order. Usage example:
                            <pre>
                            <code>
-- Sort results in ascending order
SELECT * FROM Employees
ORDER BY LastName ASC;

-- Sort results in descending order
SELECT * FROM Employees
ORDER BY LastName DESC;
                                </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>GROUP BY</strong>: Groups results by one or more columns to apply aggregate functions. The GROUP BY clause is used to group records with identical values in specified columns. It is often used with aggregate functions like COUNT, SUM, AVG, etc. Usage example:
                            <pre>
                            <code>
-- Group results and count employees by department
SELECT DepartmentID, COUNT(*) as EmployeeCount
FROM Employees
GROUP BY DepartmentID;
                                </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>HAVING</strong>: Filters grouped data after using GROUP BY. The HAVING clause is used to specify conditions on the groups created by the GROUP BY clause. Usage example:
                            <pre>
                            <code>
-- Filter departments with more than 5 employees
SELECT DepartmentID, COUNT(*) as EmployeeCount
FROM Employees
GROUP BY DepartmentID
HAVING COUNT(*) > 5;
                                </code>
                            </pre>
                        </li>
                    </ul>
                </div>
            </div>
        </div>

        <!-- Section Aggregation Functions -->
        <div class="accordion-item">
            <h2 class="accordion-header">
                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#aggregationFunctionsSection" aria-expanded="false" aria-controls="aggregationFunctionsSection">
                    Aggregation Functions
                </button>
            </h2>
            <div id="aggregationFunctionsSection" class="accordion-collapse collapse">
                <div class="accordion-body">
                    <ul class="list-group">
                        <li class="list-group-item">
                            <strong>COUNT()</strong>: Counts the number of records. The <code>COUNT()</code> function is used to return the total number of rows in a table or the number of non-null values in a specific column. It is often used in SQL queries to get statistics about the data. Usage example:
                            <pre>
                            <code>
-- Count the total number of employees
SELECT COUNT(*) FROM Employees;

-- Count the number of employees in a specific department
SELECT COUNT(*) FROM Employees WHERE DepartmentID = 1;
                                </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>SUM()</strong>: Calculates the sum of values in a numeric column. The <code>SUM()</code> function is used to add up all the values in a numeric column in a table. It is useful for obtaining totals, such as the total sales or total salaries. Usage example:
                            <pre>
                            <code>
-- Calculate the total salaries of employees
SELECT SUM(Salary) FROM Employees;

-- Calculate the total sales for a specific product
SELECT SUM(SalesAmount) FROM Sales WHERE ProductID = 1;
                                </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>AVG()</strong>: Calculates the average of values in a numeric column. The <code>AVG()</code> function is used to calculate the average of the values in a numeric column in a table. It is often used to get average statistics, such as average salary or average grades. Usage example:
                            <pre>
                            <code>
-- Calculate the average salary of employees
SELECT AVG(Salary) FROM Employees;

-- Calculate the average grades of students
SELECT AVG(Grade) FROM Students;
                                </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>MIN()</strong>: Returns the smallest value in a column. The <code>MIN()</code> function is used to find the minimum value in a specific column. It is useful for getting minimum values, such as the lowest salary or the earliest date. Usage example:
                            <pre>
                            <code>
-- Find the lowest salary of employees
SELECT MIN(Salary) FROM Employees;

-- Find the earliest date in sales records
SELECT MIN(SaleDate) FROM Sales;
                                </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>MAX()</strong>: Returns the largest value in a column. The <code>MAX()</code> function is used to find the maximum value in a specific column. It is useful for getting maximum values, such as the highest salary or the latest date. Usage example:
                            <pre>
                            <code>
-- Find the highest salary of employees
SELECT MAX(Salary) FROM Employees;

-- Find the latest date in sales records
SELECT MAX(SaleDate) FROM Sales;
                                </code>
                            </pre>
                        </li>
                    </ul>
                </div>
            </div>
        </div>

        <!-- Section Joins -->
        <div class="accordion-item">
            <h2 class="accordion-header">
                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#joinsSection" aria-expanded="false" aria-controls="joinsSection">
                    Joins (JOINs)
                </button>
            </h2>
            <div id="joinsSection" class="accordion-collapse collapse">
                <div class="accordion-body

">
                    <ul class="list-group">
                        <li class="list-group-item">
                            <strong>INNER JOIN</strong>: Combines rows from two tables when there is a match between columns of both tables. The <code>INNER JOIN</code> clause is used to return records that have matching values in both tables. It is commonly used to link tables on a foreign key. Usage example:
                            <pre>
                            <code>
-- Example of INNER JOIN
SELECT Employees.Name, Departments.DepartmentName
FROM Employees
INNER JOIN Departments ON Employees.DepartmentID = Departments.DepartmentID;
                                </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>LEFT JOIN</strong>: Returns all rows from the left table, and the matching rows from the right table. If no match is found, the right table's values are NULL. The <code>LEFT JOIN</code> clause is used to include all rows from the left table, even if they do not have a match in the right table. Usage example:
                            <pre>
                            <code>
-- Example of LEFT JOIN
SELECT Employees.Name, Departments.DepartmentName
FROM Employees
LEFT JOIN Departments ON Employees.DepartmentID = Departments.DepartmentID;
                                </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>RIGHT JOIN</strong>: Returns all rows from the right table, and the matching rows from the left table. If no match is found, the left table's values are NULL. The <code>RIGHT JOIN</code> clause is used to include all rows from the right table, even if they do not have a match in the left table. Usage example:
                            <pre>
                            <code>
-- Example of RIGHT JOIN
SELECT Employees.Name, Departments.DepartmentName
FROM Employees
RIGHT JOIN Departments ON Employees.DepartmentID = Departments.DepartmentID;
                                </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>FULL OUTER JOIN</strong>: Returns all rows when there is a match in either of the tables. Non-matching values are filled with NULL. The <code>FULL OUTER JOIN</code> clause is used to include all rows from both tables, even if they do not have a match in the other table. Usage example:
                            <pre>
                            <code>
-- Example of FULL OUTER JOIN
SELECT Employees.Name, Departments.DepartmentName
FROM Employees
FULL OUTER JOIN Departments ON Employees.DepartmentID = Departments.DepartmentID;
                                </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>CROSS JOIN</strong>: Cartesian product of both tables, meaning it returns all possible combinations between the rows of the two tables. The <code>CROSS JOIN</code> clause is used to return the Cartesian product of both tables, which can result in a large number of rows if the tables are large. Usage example:
                            <pre>
                            <code>
-- Example of CROSS JOIN
SELECT Employees.Name, Departments.DepartmentName
FROM Employees
CROSS JOIN Departments;
                                </code>
                            </pre>
                        </li>
                    </ul>
                </div>
            </div>
        </div>

        <!-- Section Constraints -->
        <div class="accordion-item">
            <h2 class="accordion-header">
                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#constraintsSection" aria-expanded="false" aria-controls="constraintsSection">
                    Constraints
                </button>
            </h2>
            <div id="constraintsSection" class="accordion-collapse collapse">
                <div class="accordion-body">
                    <ul class="list-group">
                        <li class="list-group-item">
                            <strong>PRIMARY KEY</strong>: Uniquely identifies each record in a table. A table can only have one primary key. The primary key is used to guarantee the uniqueness of records and to establish relationships between tables. Usage example:
                            <pre>
                            <code>
-- Define a primary key on the 'ID' column of the 'Employees' table
CREATE TABLE Employees (
    ID INT PRIMARY KEY,
    Name NVARCHAR(100),
    DepartmentID INT
);
                                </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>FOREIGN KEY</strong>: Prevents actions that would destroy links between tables. It is a key in one table that refers to the primary key of another table. Foreign keys are used to maintain referential integrity between tables. Usage example:
                            <pre>
                            <code>
-- Define a foreign key on the 'DepartmentID' column of the 'Employees' table referencing the 'ID' column of the 'Departments' table
CREATE TABLE Departments (
    ID INT PRIMARY KEY,
    DepartmentName NVARCHAR(100)
);

CREATE TABLE Employees (
    ID INT PRIMARY KEY,
    Name NVARCHAR(100),
    DepartmentID INT,
    FOREIGN KEY (DepartmentID) REFERENCES Departments(ID)
);
                                </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>NOT NULL</strong>: Prevents a field from accepting NULL values. The <code>NOT NULL</code> constraint is used to ensure that a column cannot have a NULL value, meaning each record must have a value for this column. Usage example:
                            <pre>
                            <code>
-- Define the 'Name' column as NOT NULL in the 'Employees' table
CREATE TABLE Employees (
    ID INT PRIMARY KEY,
    Name NVARCHAR(100) NOT NULL,
    DepartmentID INT
);
                                </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>UNIQUE</strong>: Ensures that all values in a column are unique. The <code>UNIQUE</code> constraint is used to ensure that no duplicate values are inserted in a specific column. Usage example:
                            <pre>
                            <code>
-- Define the 'Email' column as UNIQUE in the 'Employees' table
CREATE TABLE Employees (
    ID INT PRIMARY KEY,
    Name NVARCHAR(100),
    Email NVARCHAR(100) UNIQUE,
    DepartmentID INT
);
                                </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>CHECK</strong>: Defines a condition that must be true for all values in a column. The <code>CHECK</code> constraint is used to enforce a condition on column values, ensuring that only values that meet this condition are allowed. Usage example:
                            <pre>
                            <code>
-- Define a CHECK constraint on the 'Age' column to ensure values are greater than or equal to 18
CREATE TABLE Employees (
    ID INT PRIMARY KEY,
    Name NVARCHAR(100),
    Age INT CHECK (Age >= 18),
    DepartmentID INT
);
                                </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>DEFAULT</strong>: Sets a default value for a column if no value is specified. The <code>DEFAULT</code> constraint is used to assign a default value to a column when no value is provided during record insertion. Usage example:
                            <pre>
                            <code>
-- Set a default value for the 'HireDate' column in the 'Employees' table
CREATE TABLE Employees (
    ID INT PRIMARY KEY,
    Name NVARCHAR(100),
    HireDate DATE DEFAULT GETDATE(),
    DepartmentID INT
);
                                </code>
                            </pre>
                        </li>
                    </ul>
                </div>
            </div>
        </div>

        <!-- Section Advanced Functions -->
        <div class="accordion-item">
            <h2 class="accordion-header">
                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#advancedFunctionsSection" aria-expanded="false" aria-controls="advancedFunctionsSection">
                    Advanced Functions
                </button>
            </h2>
            <div id="advancedFunctionsSection" class="accordion-collapse collapse">
                <div class="accordion-body">
                    <ul class="list-group">
                        <li class="list-group-item">
                            <strong>COALESCE()</strong>: Returns the first non-NULL value from a list of arguments. The <code>COALESCE()</code> function is used to handle NULL values by returning the first non-NULL value found in a list of expressions. It is often used to provide default values. Usage example:
                            <pre>
                            <code>
-- Example of COALESCE to return the first non-NULL value
SELECT COALESCE(NULL, 'Default value', 'Other value') AS Result;
                                </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>CASE</strong>: Allows conditional statements in SQL queries. The <code>CASE</code> clause is used to add conditional logic in SQL queries, allowing different values to be returned based on specified conditions. Usage example:
                            <pre>
                            <code>
-- Example of CASE to return conditional values
SELECT Name,
        CASE
            WHEN Age &lt; 18 THEN 'Minor'
            WHEN Age &gt;= 18 THEN 'Adult'
            ELSE 'Unknown'
        END AS Status
FROM Employees;
                                </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>CAST()</strong>: Converts an expression from one data type to another. The <code>CAST()</code> function is used to convert an expression from one data type to another, which is useful for operations that require specific data types. Usage example:
                            <pre>
                            <code>
-- Example of CAST to convert an integer to a string
SELECT CAST(123 AS NVARCHAR(10)) AS StringValue;
                                </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>EXISTS</strong>: Checks if a subset of data exists and returns TRUE or FALSE. The <code>EXISTS</code> clause is used to check for the existence of rows in a subset of data, often in subqueries, and returns TRUE if the subset contains rows. Usage example:
                            <pre>
                            <code>
-- Example of EXISTS to check for the existence of rows
SELECT Name
FROM Employees
WHERE EXISTS (SELECT 1 FROM Departments WHERE Departments.ID = Employees.DepartmentID);
                                </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>SUBSTRING()</strong>: Extracts a portion of a string. The <code>SUBSTRING()</code> function is used to extract a substring from a string, specifying the starting position and the length of the substring. Usage example:
                            <pre>
                            <code>
-- Example of SUBSTRING to extract a substring
SELECT SUBSTRING('Hello, World!', 1, 5) AS SubStringValue;
                                </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>ROUND()</strong>: Rounds a numeric value to a specified number of decimal places. The <code>ROUND()</code> function is used to round a numeric value to a specified number of decimal places, which is useful for financial calculations and other operations requiring specific precision. Usage example:
                            <pre>
                            <code>
-- Example of ROUND to round a numeric value
SELECT ROUND(123.4567, 2) AS RoundedValue;
                                </code>
                            </pre>
                        </li>
                    </ul>
                </div>
            </div>
        </div>

        <!-- Section Transaction Management -->
        <div class="accordion-item">
            <h2 class="accordion-header">
                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#transactionsSection" aria-expanded="false" aria-controls="transactionsSection">
                    Transaction Management
                </button>
            </h2>
            <div id="transactionsSection" class="accordion-collapse collapse">
                <div class="accordion-body">
                    <ul class="list-group">
                        <li class="list-group-item">
                            <strong>BEGIN TRANSACTION</strong>: Starts a new transaction. The <code>BEGIN TRANSACTION</code> command is used to indicate the start of an explicit transaction. A transaction allows multiple SQL operations to be grouped into a single unit of work, ensuring that all operations are successfully completed or none of them are applied in case of failure. Usage example:
                            <pre>
                            <code>
-- Example of BEGIN TRANSACTION
BEGIN TRANSACTION;
-- SQL operations
UPDATE Accounts SET Balance = Balance - 100 WHERE AccountID = 1;
UPDATE Accounts SET Balance = Balance + 100 WHERE AccountID = 2;
                                </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>COMMIT</strong>: Commits the changes made in a transaction and makes them permanent. The <code>COMMIT</code> command is used to commit all the operations performed in the current transaction, making the changes permanent in the database. Usage example:
                            <pre>
                            <code>
-- Example of COMMIT
BEGIN TRANSACTION;
-- SQL operations
UPDATE Accounts SET Balance = Balance - 100 WHERE AccountID = 1;
UPDATE Accounts SET Balance = Balance + 100 WHERE AccountID = 2;
-- Commit the changes
COMMIT;
                                </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>ROLLBACK</strong>: Rolls back all changes made in the current transaction. The <code>ROLLBACK</code> command is used to undo all the operations performed in the current transaction, restoring the database to its state before the transaction began. Usage example:
                            <pre>
                            <code>
-- Example of ROLLBACK
BEGIN TRANSACTION;
-- SQL operations
UPDATE Accounts SET Balance = Balance - 100 WHERE AccountID = 1;
UPDATE Accounts SET Balance = Balance + 100 WHERE AccountID = 2;
-- Rollback the changes in case of error
ROLLBACK;
                                </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>SAVEPOINT</strong>: Sets a savepoint within a transaction that can be used for a partial rollback. The <code>SAVEPOINT</code> command is used to create a savepoint within a transaction, allowing you to roll back to that specific state without undoing the entire transaction. Usage example:
                            <pre>
                            <code>
-- Example of SAVEPOINT
BEGIN TRANSACTION;
-- SQL operations
UPDATE Accounts SET Balance = Balance - 100 WHERE AccountID = 1;
SAVEPOINT BeforeCredit;
UPDATE Accounts SET Balance = Balance + 100 WHERE AccountID = 2;
-- Rollback changes to the savepoint
ROLLBACK TO SAVEPOINT BeforeCredit;
-- Commit the remaining changes
COMMIT;
                                </code>
                            </pre>
                        </li>
                    </ul>
                </div>
            </div>
        </div>

    </div>
</div>
<p>&nbsp;</p>
<div class="container mt-5">
    <h1 class="text-center text-primary mb-4">Blazor Web App Vocabulary - Program.cs with Entity Framework Core</h1>

    <div class="accordion">
        <!-- Section Application Initialization -->
        <div class="accordion-item">
            <h2 class="accordion-header">
                <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#appInitializationSection" aria-expanded="false" aria-controls="appInitializationSection">
                    Application Initialization
                </button>
            </h2>
            <div id="appInitializationSection" class="accordion-collapse collapse">
                <div class="accordion-body">
                    <ul class="list-group">
                        <li class="list-group-item">
                            <strong>WebApplication.CreateBuilder()</strong>: Method used to create a <code>WebApplicationBuilder</code> that configures the application's services, hosting, and infrastructure. This method initializes a new web application builder with default settings, allowing you to configure services and the request pipeline. Example:
                            <pre>
                            <code>
// Example of creating a WebApplicationBuilder in C#
var builder = WebApplication.CreateBuilder(args);
builder.Services.AddRazorComponents();
var app = builder.Build();
app.Run();
                                </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>builder.Services</strong>: Property used to configure the services used by the application (e.g., dependency injection, authentication). This property exposes an <code>IServiceCollection</code> that allows adding services to the dependency injection container. Example:
                            <pre>
                            <code>
// Example of configuring services in C#
var builder = WebApplication.CreateBuilder(args);
builder.Services.AddRazorComponents();
builder.Services.AddAuthentication();
var app = builder.Build();
app.Run();
                                </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>AddRazorComponents()</strong>: Adds support for Blazor components in an application. This method configures the services necessary to use Razor components in a Blazor application. Example:
                            <pre>
                            <code>
// Example of adding support for Razor components in C#
var builder = WebApplication.CreateBuilder(args);
builder.Services.AddRazorComponents();
var app = builder.Build();
app.Run();
                                </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>AddServerSideBlazor()</strong>: Adds support for server-side Blazor in an application. This method configures the services necessary to run Blazor components on the server and make them interactive via SignalR. Example:
                            <pre>
                            <code>
// Example of adding support for Blazor Server in C#
var builder = WebApplication.CreateBuilder(args);
builder.Services.AddServerSideBlazor();
var app = builder.Build();
app.MapBlazorHub();
app.Run();
                                </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>builder.Build()</strong>: Builds an instance of <code>WebApplication</code> that will be executed. This method compiles the application's configuration and prepares the request pipeline for handling HTTP requests. Example:
                            <pre>
                            <code>
// Example of building an instance of WebApplication in C#
var builder = WebApplication.CreateBuilder(args);
var app = builder.Build();
app.Run();
                                </code>
                            </pre>
                        </li>
                    </ul>
                </div>
            </div>
        </div>

        <!-- Section Services Configuration -->
        <div class="accordion-item">
            <h2 class="accordion-header">
                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#servicesConfigurationSection" aria-expanded="false" aria-controls="servicesConfigurationSection">
                    Services Configuration (with Entity Framework Core)
                </button>
            </h2>
            <div id="servicesConfigurationSection" class="accordion-collapse collapse">
                <div class="accordion-body">
                    <ul class="list-group">
                        <li class="list-group-item">
                            <strong>builder.Services.AddSingleton()</strong>: Adds a service as a singleton. The same object will be shared across all requests. This method is used to register a service with a singleton lifetime, meaning a single instance of the service will be created and used throughout the application's lifetime. Example:
                            <pre>
                            <code>
// Example of adding a singleton service in C#
var builder = WebApplication.CreateBuilder(args);
builder.Services.AddSingleton&lt;IMyService, MyService&gt;();
var app = builder.Build();
app.Run();
                                </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>builder.Services.AddTransient()</strong>: Adds a service as transient, creating a new instance for each request. This method is used to register a service with a transient lifetime, meaning a new instance of the service will be created each time it is requested. Example:
                            <pre>
                            <code>
// Example of adding a transient service in C#
var builder = WebApplication.CreateBuilder(args);
builder.Services.AddTransient&lt;IMyService, MyService&gt;();
var app = builder.Build();
app.Run();
                                </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>builder.Services.AddScoped()</strong>: Adds a service with a "scoped" lifetime, one instance per user session. This method is used to register a service with a lifetime limited to the scope of a request or session, meaning a new instance of the service will be created for each user session. Example:
                            <pre>
                            <code>
// Example of adding a scoped service in C#
var builder = WebApplication.CreateBuilder(args);
builder.Services.AddScoped&lt;IMyService, MyService&gt;();
var app = builder.Build();
app.Run();
                                </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>builder.Services.AddHttpClient()</strong>: Allows registering and configuring an HTTP client service for external HTTP requests. This method is used to configure instances of <code>HttpClient</code> with specific settings, like default headers, timeouts, and message handlers. Example:
                            <pre>
                            <code>
// Example of adding an HttpClient service in C#
var builder = WebApplication.CreateBuilder(args);
builder.Services.AddHttpClient&lt;IMyService, MyService&gt;(client =>
{
    client.BaseAddress = new Uri("https://api.example.com/");
    client.DefaultRequestHeaders.Add("Accept", "application/json");
});
var app = builder.Build();
app.Run();
                                </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>builder.Services.AddAuthorizationCore()</strong>: Adds authorization services to a Blazor application, typically used to manage access to specific pages or components. This method is used to configure basic authorization services necessary to control access to resources based on user roles or claims. Example:
                            <pre>
                            <code>
// Example of adding authorization services in C#
var builder = WebApplication.CreateBuilder(args);
builder.Services.AddAuthorizationCore();
var app = builder.Build();
app.Run();
                                </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>builder.Services.AddDbContext&lt;TContext&gt;()</strong>: Adds and configures an Entity Framework Core database context service. This method is used to register a database context with specific options, such as the database provider and connection string. Example:
                            <pre>
                            <code>
// Example of adding a database context in C#
var builder = WebApplication.CreateBuilder(args);
builder.Services.AddDbContext&lt;MyDbContext&gt;(options =>
    options.UseSqlServer("Server=myServerAddress;Database=myDataBase;User Id=myUsername;Password=myPassword;"));
var app = builder.Build();
app.Run();
                                </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>UseSqlServer()</strong>: Configures SQL Server as the database provider for Entity Framework Core. This method is used to specify that SQL Server will be used as the database for the Entity Framework Core context. Example:
                            <pre>
                            <code>
// Example of configuring SQL Server in C#
var builder = WebApplication.CreateBuilder(args);
builder.Services.AddDbContext&lt;MyDbContext&gt;(options =>
    options.UseSqlServer("Server=myServerAddress;Database=myDataBase;User Id=myUsername;Password=myPassword;"));
var app = builder.Build();
app.Run();
                                </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>UseSqlite()</strong>: Configures SQLite as the database provider in a lightweight application. This method is used to specify that SQLite will be used as the database for the Entity Framework Core context. Example:
                            <pre>
                            <code>
// Example of configuring SQLite in C#
var builder = WebApplication.CreateBuilder(args);
builder.Services.AddDbContext&lt;MyDbContext&gt;(options =>
    options.UseSqlite("Data Source=mydatabase.db"));
var app = builder.Build();
app.Run();
                                </code>
                            </pre>
                        </li>
                    </ul>
                </div>
            </div>
        </div>

        <!-- Section Endpoints Management -->
        <div class="accordion-item">
            <h2 class="accordion-header">
                <button class="accordion-button collapsed" type="button"
                        data-bs-toggle="collapse" data-bs-target="#endpointsManagementSection" aria-expanded="false" aria-controls="endpointsManagementSection">
                    Endpoints Management
                </button>
            </h2>
            <div id="endpointsManagementSection" class="accordion-collapse collapse">
                <div class="accordion-body">
                    <ul class="list-group">
                        <li class="list-group-item">
                            <strong>app.MapBlazorHub()</strong>: Configures routes for real-time communication via SignalR for Blazor components. This allows Blazor components to communicate with the server using SignalR, which is essential for Blazor Server applications. Example:
                            <pre>
                            <code>
var builder = WebApplication.CreateBuilder(args);
var app = builder.Build();

app.MapBlazorHub();
app.MapFallbackToPage("/_Host");

app.Run();
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>app.MapFallbackToPage()</strong>: Sets a default (fallback) page if no route matches the incoming request. This is useful for handling 404 errors and redirecting users to a specific page. Example:
                            <pre>
                            <code>
var builder = WebApplication.CreateBuilder(args);
var app = builder.Build();

app.MapBlazorHub();
app.MapFallbackToPage("/_Host");

app.Run();
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>app.MapControllers()</strong>: Enables routing for MVC or API controllers in a Blazor Server application. This allows defining routes for controller actions. Example:
                            <pre>
                            <code>
var builder = WebApplication.CreateBuilder(args);
var app = builder.Build();

app.UseRouting();
app.MapControllers();

app.Run();
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>app.UseRouting()</strong>: Enables routing in the application to manage incoming requests. This is necessary to use routing middleware and define the application's routes. Example:
                            <pre>
                            <code>
var builder = WebApplication.CreateBuilder(args);
var app = builder.Build();

app.UseRouting();

app.Run();
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>app.UseEndpoints()</strong>: Used to manually configure the routing endpoints in the application. This allows defining routes and endpoints for HTTP requests. Example:
                            <pre>
                            <code>
var builder = WebApplication.CreateBuilder(args);
var app = builder.Build();

app.UseRouting();
app.UseEndpoints(endpoints =>
{
    endpoints.MapBlazorHub();
    endpoints.MapFallbackToPage("/_Host");
    endpoints.MapControllers();
});

app.Run();
                            </code>
                            </pre>
                        </li>
                    </ul>
                </div>
            </div>
        </div>

        <!-- Section Middleware and HTTP Pipeline -->
        <div class="accordion-item">
            <h2 class="accordion-header">
                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#middlewareSection" aria-expanded="false" aria-controls="middlewareSection">
                    Middleware and HTTP Pipeline
                </button>
            </h2>
            <div id="middlewareSection" class="accordion-collapse collapse">
                <div class="accordion-body">
                    <ul class="list-group">
                        <li class="list-group-item">
                            <strong>app.UseMiddleware&lt;T&gt;()</strong>: Adds custom middleware to the application's HTTP pipeline. Middleware components handle incoming HTTP requests and outgoing responses. Example:
                            <pre>
                            <code>
public class CustomMiddleware
{
    private readonly RequestDelegate _next;

    public CustomMiddleware(RequestDelegate next)
    {
        _next = next;
    }

    public async Task InvokeAsync(HttpContext context)
    {
        // Middleware logic
        await context.Response.WriteAsync("Custom middleware executed.");
        await _next(context);
    }
}

// In the Configure method of Startup.cs
app.UseMiddleware&lt;CustomMiddleware&gt;();
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>app.UseAuthentication()</strong>: Enables authentication in the application to verify user identity. This is essential for securing applications and restricting access to resources. Example:
                            <pre>
                            <code>
// In the Configure method of Startup.cs
app.UseAuthentication();
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>app.UseAuthorization()</strong>: Enables authorization, which controls access to resources based on the user's authentication. This works in conjunction with authentication to enforce access rules. Example:
                            <pre>
                            <code>
// In the Configure method of Startup.cs
app.UseAuthorization();
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>app.UseStaticFiles()</strong>: Enables the handling of static files (HTML, CSS, JS) in the application. This is necessary to serve static files to clients. Example:
                            <pre>
                            <code>
// In the Configure method of Startup.cs
app.UseStaticFiles();
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>app.UseHttpsRedirection()</strong>: Automatically redirects all HTTP requests to HTTPS to secure communications. This is important to ensure that all data exchanged between the client and server is encrypted. Example:
                            <pre>
                            <code>
// In the Configure method of Startup.cs
app.UseHttpsRedirection();
                            </code>
                            </pre>
                        </li>
                    </ul>
                </div>
            </div>
        </div>

        <!-- Section Database Migration -->
        <div class="accordion-item">
            <h2 class="accordion-header">
                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#dbMigrationSection" aria-expanded="false" aria-controls="dbMigrationSection">
                    Database Migration (Entity Framework Core)
                </button>
            </h2>
            <div id="dbMigrationSection" class="accordion-collapse collapse">
                <div class="accordion-body">
                    <ul class="list-group">
                        <li class="list-group-item">
                            <strong>Database.EnsureCreated()</strong>: Checks if the database is created and creates it if it does not exist, but does not apply migrations. This is useful for development or test scenarios where you want to quickly initialize a database. Example:
                            <pre>
                            <code>
using (var context = new MyDbContext())
{
    context.Database.EnsureCreated();
}
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>Database.Migrate()</strong>: Applies all pending migrations to ensure the database is up-to-date with the Entity Framework model. This is essential to keep the data model in sync with the database. Example:
                            <pre>
                            <code>
using (var context = new MyDbContext())
{
    context.Database.Migrate();
}
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>dotnet ef migrations add &lt;MigrationName&gt;</strong>: CLI command used to add a migration to the application that describes changes to the database schema. This generates a migration file that can be applied to the database. Example:
                            <pre>
                            <code>
dotnet ef migrations add InitialCreate
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>dotnet ef database update</strong>: CLI command that applies migrations to the database. This updates the database to match the current data model. Example:
                            <pre>
                            <code>
dotnet ef database update
                            </code>
                            </pre>
                        </li>
                    </ul>
                </div>
            </div>
        </div>

        <!-- Section Running the Application -->
        <div class="accordion-item">
            <h2 class="accordion-header">
                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#runAppSection" aria-expanded="false" aria-controls="runAppSection">
                    Running the Application
                </button>
            </h2>
            <div id="runAppSection" class="accordion-collapse collapse">
                <div class="accordion-body">
                    <ul class="list-group">
                        <li class="list-group-item">
                            <strong>app.Run()</strong>: Method used to start the Blazor Web application after configuring all services, middleware, and endpoints. This method blocks the calling thread and begins listening for HTTP requests. Example:
                            <pre>
                            <code>
var builder = WebApplication.CreateBuilder(args);
var app = builder.Build();

app.UseRouting();
app.UseEndpoints(endpoints =>
{
    endpoints.MapBlazorHub();
    endpoints.MapFallbackToPage("/_Host");
});

app.Run();
                            </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>Environment</strong>: Variable used to define the environment in which the application is running (e.g., Development, Production). This allows configuring the application differently based on the environment. Example:
                            <pre>
                            <code>
var builder = WebApplication.CreateBuilder(args);
var app = builder.Build();

if (app.Environment.IsDevelopment())
{
    app.UseDeveloperExceptionPage();
}
else
{
    app.UseExceptionHandler("/Error");
    app.UseHsts();
}



app.Run();
                            </code>
                            </pre>
                        </li>
                    </ul>
                </div>
            </div>
        </div>
    </div>
</div>
<p>&nbsp;</p>
<div class="container mt-5">
    <h1 class="text-center text-primary mb-4">GitHub Vocabulary</h1>

    <div class="accordion">
        <!-- Section GitHub Basics -->
        <div class="accordion-item">
            <h2 class="accordion-header">
                <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#gitHubBasicsSection" aria-expanded="false" aria-controls="gitHubBasicsSection">
                    GitHub Basic Concepts
                </button>
            </h2>
            <div id="gitHubBasicsSection" class="accordion-collapse collapse">
                <div class="accordion-body">
                    <ul class="list-group">
                        <li class="list-group-item">
                            <strong>Repository (Repo)</strong>: A space or project where your code and history are stored on GitHub. A repository contains all the files of your project along with their revision history. It allows you to collaborate with other developers and track code changes. Example:
                            <pre>
                            <code>
// Creating a new repository on GitHub
git init my-repo
cd my-repo
git remote add origin https://github.com/username/my-repo.git
git push -u origin main
                                </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>Branch</strong>: An alternative version of a repository where you can develop new features independently from the main branch. Branches allow you to work on different features or bug fixes without affecting the stable code in the main branch. Example:
                            <pre>
                            <code>
// Creating and switching to a new branch
git checkout -b new-feature
                                </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>Commit</strong>: A change or set of changes recorded in a repository. A commit captures the current state of the files in the repository and logs a message describing the changes. Example:
                            <pre>
                            <code>
// Adding files to the commit and saving changes
git add .
git commit -m "Added new feature"
                                </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>Clone</strong>: Copy a remote repository to your local machine. Cloning a repository allows you to work on a local copy of the project and synchronize changes with the remote repository. Example:
                            <pre>
                            <code>
// Cloning a GitHub repository
git clone https://github.com/username/repo.git
                                </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>Fork</strong>: Copy a project from a GitHub repository to your own account, allowing you to modify the code without affecting the original. A fork is often used to contribute to open-source projects. Example:
                            <pre>
                            <code>
// Forking a repository on GitHub via the web interface
// Click the "Fork" button on the repository page
                                </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>Pull Request (PR)</strong>: A request to merge your changes into the main branch or another project. A pull request allows you to propose changes, discuss their relevance, and review them before merging. Example:
                            <pre>
                            <code>
// Creating a pull request on GitHub via the web interface
// Go to the repository page and click "New pull request"
                                </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>Merge</strong>: Combine one branch into another (usually the main branch). Merging integrates the changes from one branch into another, combining their commit histories. Example:
                            <pre>
                            <code>
// Merging a branch into the main branch
git checkout main
git merge new-feature
                                </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>Git</strong>: A distributed version control system used by GitHub to track changes in code. Git allows managing the history of changes, collaborating with other developers, and handling different versions of the code. Example:
                            <pre>
                            <code>
// Initializing a new Git repository
git init
                                </code>
                            </pre>
                        </li>
                    </ul>
                </div>
            </div>
        </div>

        <!-- Section Project Management -->
        <div class="accordion-item">
            <h2 class="accordion-header">
                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#projectManagementSection" aria-expanded="false" aria-controls="projectManagementSection">
                    Project Management on GitHub
                </button>
            </h2>
            <div id="projectManagementSection" class="accordion-collapse collapse">
                <div class="accordion-body">
                    <ul class="list-group">
                        <li class="list-group-item">
                            <strong>Issue</strong>: A ticket created to report a bug, request a feature, or ask a question. Issues allow tracking problems and improvements in a project. They can be commented on, labeled, assigned to developers, and linked to pull requests for better task management. Example:
                            <pre>
                            <code>
// Creating an issue on GitHub via the web interface
// Go to the repository page and click "Issues" then "New issue"
                                </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>Milestone</strong>: A set of issues or pull requests related to a specific feature or version. Milestones help organize and plan work by grouping related tasks. They allow tracking progress toward specific goals and managing project versions. Example:
                            <pre>
                            <code>
// Creating a milestone on GitHub via the web interface
// Go to the repository page, click "Milestones" then "New milestone"
                                </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>Labels</strong>: Tags that allow categorizing issues and pull requests. Labels make task management and searching easier by adding categories like "bug," "enhancement," "documentation," etc. They help prioritize and organize work. Example:
                            <pre>
                            <code>
// Adding a label to an issue on GitHub via the web interface
// Open an issue, click "Labels," and select the appropriate labels
                                </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>Projects</strong>: Built-in project management tools that allow organizing tasks in Kanban-style boards. Projects provide an overview of tasks in progress, to do, and done. They help visualize workflows and manage tasks more efficiently. Example:
                            <pre>
                            <code>
// Creating a project on GitHub via the web interface
// Go to the repository page, click "Projects" then "New project"
                                </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>Assignees</strong>: People assigned to an issue or pull request to be responsible for its resolution. Assigning developers to specific tasks clarifies responsibilities and helps track who is working on what. This improves collaboration and task management. Example:
                            <pre>
                            <code>
// Assigning an issue to a developer on GitHub via the web interface
// Open an issue, click "Assignees," and select the appropriate developer
                                </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>Mentions</strong>: Use &#64; followed by a username to directly notify someone in an issue or comment. Mentions draw attention to the relevant users and facilitate communication and collaboration within the team. Example:
                            <pre>
                            <code>
// Mentioning a user in a comment on GitHub
// Type &#64;username in the comment to notify the user
                                </code>
                            </pre>
                        </li>
                    </ul>
                </div>
            </div>
        </div>

        <!-- Section Collaboration -->
        <div class="accordion-item">
            <h2 class="accordion-header">
                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collaborationSection" aria-expanded="false" aria-controls="collaborationSection">
                    Collaboration on GitHub
                </button>
            </h2>
            <div id="collaborationSection" class="accordion-collapse collapse">
                <div class="accordion-body">
                    <ul class="list-group">
                        <li class="list-group-item">
                            <strong>Collaborators</strong>: Users with access to a repository who can contribute directly to the code. Collaborators can clone the repository, create branches, submit commits, and open pull requests. They play a key role in collaborative development and project management on GitHub. Example:
                            <pre>
                            <code>
// Adding a collaborator to a repository on GitHub via the web interface
// Go to the repository page, click "Settings" then "Collaborators" and add the user
                                </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>Contributor</strong>: A person who has submitted a pull request or contributed to an open-source project. Contributors can be team members or external developers who propose improvements, bug fixes

                            , or new features. Their participation is essential for the evolution and improvement of open-source projects. Example:
                            <pre>
                            <code>
// Contributing to an open-source project via a pull request
// Fork the repository, make your changes, then open a pull request to propose your changes
                                </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>Code Review</strong>: The process of reviewing code submitted in a pull request before merging changes. Code review helps detect errors, improve code quality, and share knowledge among team members. It is often done by collaborators or project maintainers. Example:
                            <pre>
                            <code>
// Conducting a code review on GitHub via the web interface
// Go to the pull request, click "Files changed," and add your comments and suggestions
                                </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>Blame</strong>: A GitHub feature to see who made a specific change in a file. The <code>git blame</code> command tracks the history of changes line by line, identifying the author and the associated commit. This helps understand the origin of changes and assign responsibility. Example:
                            <pre>
                            <code>
// Using the git blame command to see the history of changes
git blame filename
                                </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>GitHub Actions</strong>: A continuous integration and delivery (CI/CD) platform that automates workflows from your GitHub repository. GitHub Actions allows creating custom workflows to build, test, and deploy code automatically. This improves development process efficiency and reliability. Example:
                            <pre>
                            <code>
// Creating a GitHub Actions workflow to build and test code
// Create a .yml file in your repository's .github/workflows directory
name: CI

on: [push, pull_request]

jobs:
    build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up .NET
        uses: actions/setup-dotnet@v1
        with:
        dotnet-version: '5.0.x'
    - name: Build with dotnet
        run: dotnet build --configuration Release
    - name: Test with dotnet
        run: dotnet test --no-build --verbosity normal
                                </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>Wiki</strong>: Collaborative documentation for a project, stored directly in a repository. The wiki allows creating and maintaining detailed documentation accessible to all contributors. It is often used to document features, usage guides, development processes, and important project information. Example:
                            <pre>
                            <code>
// Creating and editing a wiki page on GitHub via the web interface
// Go to the repository page, click "Wiki" then "New Page" to add a new documentation page
                                </code>
                            </pre>
                        </li>
                    </ul>
                </div>
            </div>
        </div>

        <!-- Section Security and Versioning -->
        <div class="accordion-item">
            <h2 class="accordion-header">
                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#securityVersioningSection" aria-expanded="false" aria-controls="securityVersioningSection">
                    Security and Versioning
                </button>
            </h2>
            <div id="securityVersioningSection" class="accordion-collapse collapse">
                <div class="accordion-body">
                    <ul class="list-group">
                        <li class="list-group-item">
                            <strong>SSH Key</strong>: A security key used to access your GitHub account and perform secure operations. An SSH key is made up of a pair of keys (public and private). The public key is added to your GitHub account, while the private key remains on your machine. This allows secure authentication without having to enter your password every time. Example:
                            <pre>
                            <code>
// Generating an SSH key and adding it to GitHub
ssh-keygen -t rsa -b 4096 -C "your_email@example.com"
cat ~/.ssh/id_rsa.pub
// Copy the public key and add it to your GitHub account under "Settings" > "SSH and GPG keys"
                                </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>Access Token</strong>: A token used to make secure requests to the GitHub API. Access tokens are used to authenticate applications and scripts interacting with the GitHub API. They offer a secure way to manage permissions without using your GitHub password. Example:
                            <pre>
                            <code>
// Creating a personal access token on GitHub
// Go to "Settings" > "Developer settings" > "Personal access tokens" > "Generate new token"
// Use the generated token to authenticate API requests
curl -H "Authorization: token YOUR_ACCESS_TOKEN" https://api.github.com/user
                                </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>Version Tag</strong>: A tag used to mark a specific version of the code in a repository. Version tags are often used to indicate stable releases or important reference points in the project's history. For example, a tag <code>v1.0.0</code> might indicate the first stable version of a project. Example:
                            <pre>
                            <code>
// Creating and pushing a version tag on GitHub
git tag v1.0.0
git push origin v1.0.0
                                </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>Release</strong>: The publication of a stable version of a project with binaries, release notes, and tags. Releases allow distributing specific versions of your project to users. They often include executables, libraries, and information about the changes since the last version. Example:
                            <pre>
                            <code>
// Creating a release on GitHub via the web interface
// Go to the repository page, click "Releases" then "Draft a new release"
                                </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>Dependency Graph</strong>: A tool that displays dependencies and alerts you if vulnerabilities are detected. The dependency graph allows visualizing the libraries and packages your project depends on. It helps identify necessary updates and manage security vulnerabilities. Example:
                            <pre>
                            <code>
// Viewing the dependency graph on GitHub
// Go to the repository page, click "Insights" then "Dependency graph"
                                </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>Branch Protection</strong>: A GitHub feature to protect a branch from unauthorized modifications (e.g., requiring review before a merge). Branch protection rules can include requirements such as mandatory code reviews, successful CI tests, and restrictions on who can push changes. Example:
                            <pre>
                            <code>
// Configuring branch protection rules on GitHub
// Go to the repository page, click "Settings" > "Branches" > "Add rule"
                                </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>GitHub Pages</strong>: A GitHub feature that allows hosting static web pages directly from a repository. GitHub Pages is often used to host documentation sites, blogs, or portfolios. It supports static site generators like Jekyll and allows easy deployment of websites from specific branches of your repository. Example:
                            <pre>
                            <code>
// Deploying a site with GitHub Pages
// Go to the repository page, click "Settings" > "Pages" and configure the deployment source
                                </code>
                            </pre>
                        </li>
                    </ul>
                </div>
            </div>
        </div>

        <!-- Section Advanced Usage -->
        <div class="accordion-item">
            <h2 class="accordion-header">
                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#advancedUsageSection" aria-expanded="false" aria-controls="advancedUsageSection">
                    Advanced Usage
                </button>
            </h2>
            <div id="advancedUsageSection" class="accordion-collapse collapse">
                <div class="accordion-body">
                    <ul class="list-group">
                        <li class="list-group-item">
                            <strong>Webhooks</strong>: Connection points that allow receiving real-time notifications when an event occurs in a GitHub repository. Webhooks can be configured to trigger specific actions, such as sending notifications, executing scripts, or integrating with external services, in response to events like commits, pull requests, or issues. Example:
                            <pre>
                            <code>
// Configuring a webhook on GitHub via the web interface
// Go to the repository page, click "Settings" > "Webhooks" > "Add webhook"
// Enter the webhook URL and select the events to monitor
                                </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>GitHub API</strong>: An interface for automating and interacting with GitHub features via HTTP requests. The GitHub API allows managing repositories, issues, pull requests, users, and more. It is used to create custom integrations, project management tools, and workflow automations. Example:
                            <pre>
                            <code>
// Using the GitHub API to list a user's repositories


curl -H "Authorization: token YOUR_ACCESS_TOKEN" https://api.github.com/user/repos
                                </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>Actions Secrets</strong>: Secure environment variables used in GitHub Actions workflows to protect sensitive information. Secrets are encrypted and accessible only to authorized workflows. They are used to store API keys, access tokens, passwords, and other sensitive information needed to run workflows. Example:
                            <pre>
                            <code>
// Adding a secret to a GitHub repository via the web interface
// Go to the repository page, click "Settings" > "Secrets" > "New repository secret"
// Use the secret in a GitHub Actions workflow
name: CI

on: [push]

jobs:
    build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
        uses: actions/checkout@v2
    - name: Use secret
        run: echo ${{ secrets.MY_SECRET }}
                                </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>Squash Merge</strong>: Merging a branch into a single commit to keep the Git history clean. Squash merge combines all commits from a branch into a single commit before merging them into the target branch. This simplifies the project history and makes changes easier to track. Example:
                            <pre>
                            <code>
// Performing a squash merge on GitHub via the web interface
// Go to the pull request, click the merge button, and select "Squash and merge"
                                </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>Rebase</strong>: Replay the commits of one branch onto another, creating a linear history. Rebase allows moving or combining commits by applying the changes from one branch onto another as if they were created from that branch. This helps keep a clean and linear commit history. Example:
                            <pre>
                            <code>
// Rebase a branch onto the main branch
git checkout feature-branch
git rebase main
                                </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>GitHub CLI</strong>: A command-line interface for interacting with GitHub directly from a terminal. The GitHub CLI (Command Line Interface) offers commands to manage repositories, issues, pull requests, actions, and more. It makes it easier to automate tasks and integrate GitHub into scripts and development workflows. Example:
                            <pre>
                            <code>
// Installing GitHub CLI and creating an issue
gh issue create --title "Bug report" --body "Bug description"
                                </code>
                            </pre>
                        </li>
                    </ul>
                </div>
            </div>
        </div>
    </div>
</div>
<p>&nbsp;</p>
<div class="container mt-5">
    <h1 class="text-center text-primary mb-4">Azure Vocabulary</h1>

    <div class="accordion">
        <!-- Section Azure Basic Concepts -->
        <div class="accordion-item">
            <h2 class="accordion-header">
                <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#azureBasicsSection" aria-expanded="false" aria-controls="azureBasicsSection">
                    Basic Azure Concepts
                </button>
            </h2>
            <div id="azureBasicsSection" class="accordion-collapse collapse">
                <div class="accordion-body">
                    <ul class="list-group">
                        <li class="list-group-item">
                            <strong>Azure App Service</strong>: A service that allows you to create and host web apps, APIs, and mobile apps in a secure and scalable cloud environment. Azure App Service supports multiple programming languages, including .NET, Java, Node.js, PHP, and Python. It offers features such as continuous deployment, integration with GitHub, automatic scaling, and SSL certificate management. Example:
                            <pre>
                            <code>
// Deploying an ASP.NET Core web app on Azure App Service
az webapp up --name mywebapp --resource-group myResourceGroup --plan myAppServicePlan
                                </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>Azure Virtual Machines</strong>: Virtual machines that allow you to run operating systems and applications in the cloud without direct hardware management. Azure Virtual Machines offer complete flexibility in terms of hardware and software configuration, allowing you to choose the OS, machine size, and storage options. They are ideal for workloads that require granular control over resources. Example:
                            <pre>
                            <code>
// Creating a Windows Server virtual machine on Azure
az vm create --resource-group myResourceGroup --name myVM --image Win2019Datacenter --admin-username azureuser --admin-password myPassword123!
                                </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>Azure Storage</strong>: A scalable storage service for managing blobs, queues, files, and tables in the cloud. Azure Storage offers several storage types, including Blob Storage for unstructured data, Queue Storage for managing message queues, File Storage for SMB-accessible file shares, and Table Storage for NoSQL data. It provides high availability, data durability, and geographic redundancy options. Example:
                            <pre>
                            <code>
// Uploading a file to Azure Blob Storage
az storage blob upload --account-name myStorageAccount --container-name myContainer --name myBlob --file myFile.txt
                                </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>Azure Active Directory (Azure AD)</strong>: An identity and access management service that helps businesses protect access to applications and resources. Azure AD provides features such as Single Sign-On (SSO), user and group management, integration with SaaS applications, and identity protection with advanced security policies. It also integrates with on-premises directories via Azure AD Connect. Example:
                            <pre>
                            <code>
// Creating a user in Azure AD
az ad user create --display-name "John Doe" --user-principal-name johndoe@mydomain.com --password MyPassword123!
                                </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>Azure Functions</strong>: A serverless platform that enables you to create applications and services using an event-driven architecture. Azure Functions supports multiple programming languages, including C#, JavaScript, Python, and Java. Functions can be triggered by various events, such as data changes in Azure Storage, messages in Azure Service Bus, or HTTP requests. They allow building scalable applications without managing the underlying infrastructure. Example:
                            <pre>
                            <code>
// Creating an Azure function in C#
[FunctionName("HttpTriggerCSharp")]
public static async Task&lt;IActionResult&gt; Run(
    [HttpTrigger(AuthorizationLevel.Function, "get", "post", Route = null)] HttpRequest req,
    ILogger log)
{
    log.LogInformation("C# HTTP trigger function processed a request.");
    string name = req.Query["name"];
    return name != null
        ? (ActionResult)new OkObjectResult($"Hello, {name}")
        : new BadRequestObjectResult("Please pass a name on the query string or in the request body");
}
                                </code>
                            </pre>
                        </li>
                    </ul>
                </div>
            </div>
        </div>

        <!-- Section Core Azure Services -->
        <div class="accordion-item">
            <h2 class="accordion-header">
                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#azureServicesSection" aria-expanded="false" aria-controls="azureServicesSection">
                    Core Azure Services
                </button>
            </h2>
            <div id="azureServicesSection" class="accordion-collapse collapse">
                <div class="accordion-body">
                    <ul class="list-group">
                        <li class="list-group-item">
                            <strong>Azure SQL Database</strong>: A managed relational database that enables you to create, manage, and scale SQL databases in the cloud. Azure SQL Database provides features such as high availability, disaster recovery, automatic backups, and elastic scaling. It supports SQL queries, ACID transactions, and integration with other Azure services for analytics and reporting. Example:
                            <pre>
                            <code>
// Connecting to an Azure SQL Database in C#
string connectionString = "Server=tcp:myserver.database.windows.net,1433;Initial Catalog=mydatabase;Persist Security Info=False;User ID=myuser;Password=mypassword;MultipleActiveResultSets=False;Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;";
using (SqlConnection connection = new SqlConnection(connectionString))
{
    connection.Open();
    SqlCommand command = new SqlCommand("SELECT * FROM mytable", connection);
    SqlDataReader reader = command.ExecuteReader();
    while (reader.Read())
    {
        Console.WriteLine($"{reader["ColumnName"]}");
    }
}
                                </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>Azure Kubernetes Service (AKS)</strong>: A container management service that enables deploying, managing, and scaling containerized applications using Kubernetes. AKS simplifies cluster management by automating tasks such as updates, monitoring, and scaling. It integrates with other Azure services, such as Azure DevOps for CI/CD pipelines and Azure Monitor for performance monitoring. Example:
                            <pre>
                            <code>
// Deploying an AKS cluster
az aks create --resource-group myResourceGroup --name myAKSCluster --node-count 1 --enable-addons monitoring --generate-ssh-keys
                                </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>Azure Cosmos DB</strong>: A globally distributed NoSQL database for managing large amounts of data with high availability and low latency. Azure Cosmos DB supports multiple data models, including documents, graphs, wide-column, and key-value. It offers performance guarantees, multi-region replication, and adjustable consistency options to meet the specific needs of applications. Example:
                            <pre>
                            <code>
// Connecting to Azure Cosmos DB in C#
CosmosClient client = new CosmosClient("accountEndpoint", "accountKey");
Database database = await client.CreateDatabaseIfNotExistsAsync("myDatabase");
Container container = await database.CreateContainerIfNotExistsAsync("myContainer", "/partitionKey");
ItemResponse&lt;MyItem&gt; response = await container.CreateItemAsync(new MyItem { Id = "1", Name = "Item1" }, new PartitionKey("partitionKey"));
                                </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>Azure DevOps</strong>: A suite of tools for managing the entire application lifecycle, from planning to deployment, through development and testing. Azure DevOps includes services such as Azure Repos for version control, Azure Pipelines for continuous integration and delivery (CI/CD), Azure Boards for project and task management, and Azure Test Plans for automated and manual testing. Example:
                            <pre>
                            <code>
// Defining a CI/CD pipeline in Azure Pipelines
trigger:
- main

pool:
    vmImage: 'ubuntu-latest'

steps:
- task: UseDotNet@2
    inputs:
    packageType: 'sdk'
    version: '5.x'
    installationPath: $(Agent.ToolsDirectory)/dotnet

- script: dotnet build --configuration Release
    displayName: 'Build project'

- script: dotnet test --no-build --verbosity normal
    displayName: 'Run tests'
                                </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>Azure Logic Apps</strong>: A service for creating automated workflows that integrate apps, data, and systems within the cloud. Azure Logic Apps allows designing workflows visually using a graphical interface and easily connecting services such as Office 365, Dynamics 365, Salesforce, and more. It supports event-based triggers and actions to automate complex business processes. Example:
                            <pre>
                            <code>
// Creating a Logic App to send an email when a file is added to Blob Storage
{
    "definition": {
        "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition

.json#",
        "actions": {
            "Send_an_email": {
                "inputs": {
                    "body": "A new file has been added to the Blob Storage.",
                    "subject": "New File Alert",
                    "to": "user@example.com"
                },
                "runAfter": {},
                "type": "Microsoft.Outlook.SendEmail"
            }
        },
        "triggers": {
            "When_a_blob_is_added_or_modified": {
                "inputs": {
                    "parameters": {
                        "blobPath": "mycontainer/{name}"
                    },
                    "serviceProviderConfiguration": {
                        "connectionName": "azureblob",
                        "operationId": "OnBlobCreatedOrModified"
                    }
                },
                "recurrence": {
                    "frequency": "Minute",
                    "interval": 5
                },
                "type": "ApiConnection"
            }
        }
    }
}
                                </code>
                            </pre>
                        </li>
                    </ul>
                </div>
            </div>
        </div>

        <!-- Section Security and Management -->
        <div class="accordion-item">
            <h2 class="accordion-header">
                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#securitySection" aria-expanded="false" aria-controls="securitySection">
                    Azure Security and Management
                </button>
            </h2>
            <div id="securitySection" class="accordion-collapse collapse">
                <div class="accordion-body">
                    <ul class="list-group">
                        <li class="list-group-item">
                            <strong>Azure Security Center</strong>: A security management tool that provides a centralized view for monitoring the security of resources in Azure and on-premises. Azure Security Center provides security recommendations, detects threats and vulnerabilities, and helps strengthen the security posture of your resources. It integrates features such as patch management, compliance assessment, and real-time threat detection. Example:
                            <pre>
                            <code>
// Enable Azure Security Center on a subscription
az security auto-provisioning-setting update --name default --auto-provision "On"
                                </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>Azure Monitor</strong>: A performance and availability management platform that monitors applications, infrastructure, and networks. Azure Monitor collects and analyzes telemetry data to provide insights into the performance and health of your resources. It includes features such as alerts, customizable dashboards, and integration with incident management tools like Azure Log Analytics and Application Insights. Example:
                            <pre>
                            <code>
// Create an alert in Azure Monitor
az monitor metrics alert create --name "HighCPUAlert" --resource-group "myResourceGroup" --scopes "/subscriptions/{subscription-id}/resourceGroups/{resource-group}/providers/Microsoft.Compute/virtualMachines/{vm-name}" --condition "avg Percentage CPU > 80" --description "Alert when CPU usage is over 80%"
                                </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>Azure Policy</strong>: A governance tool that allows you to create rules to manage and enforce resource compliance in Azure. Azure Policy helps ensure that your resources comply with your organization's standards and requirements by applying compliance policies. It enables you to define rules for specific configurations, monitor compliance in real-time, and automatically remediate non-compliant resources. Example:
                            <pre>
                            <code>
// Create a policy to deny resources without tags
az policy definition create --name "require-tags" --rules '{ "if": { "field": "tags", "exists": "false" }, "then": { "effect": "deny" } }' --mode "All"
                                </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>Azure Key Vault</strong>: A service for the centralized management of cryptographic keys, secrets, and certificates to secure your data and applications. Azure Key Vault allows storing and managing encryption keys, secrets (such as passwords and API keys), and SSL/TLS certificates securely. It offers features such as role-based access control, integration with Azure services, and version management of secrets. Example:
                            <pre>
                            <code>
// Create an Azure Key Vault
az keyvault create --name "myKeyVault" --resource-group "myResourceGroup" --location "eastus"
                                </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>Azure Backup</strong>: A data backup service that ensures the protection of files, servers, and virtual machines in the cloud. Azure Backup provides a simple and reliable backup solution to protect your data from loss and corruption. It supports backing up Azure virtual machines, SQL databases, files and folders, and on-premises servers. It includes features such as backup policy management, granular restoration, and encryption of data in transit and at rest. Example:
                            <pre>
                            <code>
// Configure a backup for an Azure virtual machine
az backup protection enable-for-vm --resource-group "myResourceGroup" --vault-name "myRecoveryServicesVault" --vm "myVM"
                                </code>
                            </pre>
                        </li>
                    </ul>
                </div>
            </div>
        </div>

        <!-- Section Azure Networking -->
        <div class="accordion-item">
            <h2 class="accordion-header">
                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#networkingSection" aria-expanded="false" aria-controls="networkingSection">
                    Azure Networking
                </button>
            </h2>
            <div id="networkingSection" class="accordion-collapse collapse">
                <div class="accordion-body">
                    <ul class="list-group">
                        <li class="list-group-item">
                            <strong>Azure Virtual Network (VNet)</strong>: A service that allows you to create private networks in Azure to connect resources and secure network traffic. Azure VNet allows segmenting the network into subnets, defining security rules with Network Security Groups (NSGs), and configuring custom routes. It supports hybrid connectivity with on-premises networks via VPN or ExpressRoute connections and integrates with other Azure services like Azure Firewall and Azure Bastion. Example:
                            <pre>
                            <code>
// Creating a VNet with a subnet
az network vnet create --name myVNet --resource-group myResourceGroup --address-prefix 10.0.0.0/16 --subnet-name mySubnet --subnet-prefix 10.0.1.0/24
                                </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>Azure Load Balancer</strong>: A tool that distributes incoming traffic to multiple resources to improve application availability and resilience. Azure Load Balancer supports load balancing scenarios for web apps, cloud services, and virtual machines. It offers features such as health monitoring of instances, rule-based load distribution, and support for TCP and UDP protocols. Example:
                            <pre>
                            <code>
// Creating a Load Balancer
az network lb create --resource-group myResourceGroup --name myLoadBalancer --sku Basic --frontend-ip-name myFrontEnd --backend-pool-name myBackEndPool
                                </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>Azure Traffic Manager</strong>: A network traffic management service that directs users to optimal endpoints based on performance or priority. Azure Traffic Manager uses routing profiles to distribute traffic based on latency, geography, or endpoint priority. It helps improve application availability by redirecting traffic in case of endpoint failure and integrates with services like Azure App Service and Azure Functions. Example:
                            <pre>
                            <code>
// Creating a Traffic Manager profile
az network traffic-manager profile create --name myTrafficManagerProfile --resource-group myResourceGroup --routing-method Performance --unique-dns-name myapptrafficmanager
                                </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>Azure VPN Gateway</strong>: A service for establishing a secure VPN connection between on-premises networks and Azure. Azure VPN Gateway supports site-to-site, point-to-site, and VNet-to-VNet VPN connections. It offers robust encryption and authentication options to secure communications and allows configuring redundant VPN gateways for high availability. Example:
                            <pre>
                            <code>
// Creating a VPN Gateway
az network vnet-gateway create --resource-group myResourceGroup --name myVpnGateway --vnet myVNet --public-ip-address myPublicIP --gateway-type Vpn --vpn-type RouteBased --sku VpnGw1 --no-wait
                                </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>Azure CDN</strong>: A content delivery network (CDN) that delivers content quickly and efficiently to users worldwide. Azure CDN caches static content like images, videos, and JavaScript files at strategic locations to reduce latency and improve loading performance. It offers features such as caching rule management, DDoS protection, and integration with services like Azure Storage and Azure Media Services. Example:
                            <pre>
                            <code>
// Creating a CDN profile
az cdn profile create --name myCdnProfile --resource-group myResourceGroup --sku Standard_Microsoft
                                </code>
                            </pre>
                        </li>
                    </ul>
                </div>
            </div>
        </div>

        <!-- Section Development and AI -->
        <div class="accordion-item">
            <h2 class="accordion-header">
                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#

devAISection" aria-expanded="false" aria-controls="devAISection">
                    Development and AI on Azure
                </button>
            </h2>
            <div id="devAISection" class="accordion-collapse collapse">
                <div class="accordion-body">
                    <ul class="list-group">
                        <li class="list-group-item">
                            <strong>Azure Machine Learning</strong>: A platform for training, deploying, and managing machine learning models at scale in the cloud. Azure Machine Learning offers tools for model development, including Jupyter notebooks, integrated development environments (IDEs), and popular frameworks like TensorFlow and PyTorch. It allows automating machine learning workflows with pipelines, managing experiments, and tracking models. It also provides deployment features to put models into production via containers or web services. Example:
                            <pre>
                            <code>
// Creating an ML workspace
az ml workspace create --name myMLWorkspace --resource-group myResourceGroup --location eastus
                                </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>Azure Cognitive Services</strong>: A collection of APIs that add AI capabilities, such as speech and visual recognition, to your applications. Azure Cognitive Services includes services for computer vision, speech recognition, natural language understanding, and sentiment analysis. These services can be easily integrated into applications to add AI capabilities without requiring deep machine learning expertise. Example:
                            <pre>
                            <code>
// Using the Azure Cognitive Services Face API
az cognitiveservices account create --name myCognitiveService --resource-group myResourceGroup --kind Face --sku S0 --location eastus
                                </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>Azure Bot Service</strong>: A platform for building intelligent bots that interact with users through channels like Teams, Skype, or websites. Azure Bot Service allows developing, testing, and deploying bots using frameworks such as the Bot Framework SDK. It offers features for managing dialogues, integrating with natural language services like LUIS (Language Understanding), and connecting to various communication channels for omnichannel interaction. Example:
                            <pre>
                            <code>
// Creating a bot with Azure Bot Service
az bot create --resource-group myResourceGroup --name myBot --kind webapp --location eastus --sku S1 --appid myAppId --password myAppPassword
                                </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>Azure DevTest Labs</strong>: A service for quickly setting up test and development environments based on developers' needs. Azure DevTest Labs allows creating pre-configured development and test environments with virtual machines, networks, and storage resources. It offers features for cost management, automating deployment tasks, and integrating with CI/CD tools to accelerate the development cycle. Example:
                            <pre>
                            <code>
// Creating a DevTest lab
az lab create --resource-group myResourceGroup --name myDevTestLab
                                </code>
                            </pre>
                        </li>
                        <li class="list-group-item">
                            <strong>Azure Logic Apps</strong>: A low-code platform for automating business processes through workflows that integrate various services and systems. Azure Logic Apps allows designing workflows visually using a graphical interface and easily connecting services such as Office 365, Dynamics 365, Salesforce, and more. It supports event-based triggers and actions to automate complex business processes. It also offers features for error handling, workflow monitoring, and integration with security and compliance services. Example:
                            <pre>
                            <code>
// Creating a Logic App to send an email when a file is added to Blob Storage
{
    "definition": {
        "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
        "actions": {
            "Send_an_email": {
                "inputs": {
                    "body": "A new file has been added to the Blob Storage.",
                    "subject": "New File Alert",
                    "to": "user@example.com"
                },
                "runAfter": {},
                "type": "Microsoft.Outlook.SendEmail"
            }
        },
        "triggers": {
            "When_a_blob_is_added_or_modified": {
                "inputs": {
                    "parameters": {
                        "blobPath": "mycontainer/{name}"
                    },
                    "serviceProviderConfiguration": {
                        "connectionName": "azureblob",
                        "operationId": "OnBlobCreatedOrModified"
                    }
                },
                "recurrence": {
                    "frequency": "Minute",
                    "interval": 5
                },
                "type": "ApiConnection"
            }
        }
    }
}
                                </code>
                            </pre>
                        </li>
                    </ul>
                </div>
            </div>
        </div>
    </div>
</div>
<p>&nbsp;</p>
<p class="h4">
    <br /><br /><br /><br />End
</p>