@page "/typescriptfrontend_en"

@using Microsoft.Extensions.Localization
@using System.Globalization;

@rendermode InteractiveServer

<PageTitle>Creating a Typescript Front End Application</PageTitle>

<p class="h2 text-center">Creating a Typescript Front End Application</p>
<p>&nbsp;</p>
<p class="h4">
    Start Visual Studio 2022.
    A quick way is to press the Windows button and start typing <strong>Visual Studio...</strong>.
    You should see the application <strong>Visual Studio 2022</strong>. Once inside Visual Studio 2022, you will see a screen
    like this.
</p>
<p>&nbsp;</p>
<div class="card border-3">
    <div class="card-body">
        <img src="/images/typescriptfrontend/VS2022StartUpWindow.png" alt="Visual Studio 2022 Start Up Window" />
    </div>
</div>
<p>&nbsp;</p>
<p class="h4">
    Click on <strong>Create a new project</strong>. Another window will open with several project options.
    In the search window, you can start typing <strong>Typescript</strong>.
    This will show you Typescript-type projects. By clicking on <strong>Next</strong>, another window will
    ask for more specific project parameters.
</p>
<p>&nbsp;</p>
<div class="card border-3">
    <div class="card-body">
        <img src="/images/typescriptfrontend/CreateBlankTypescriptProject.png" alt="Blazor Web App Project Creation Window" />
    </div>
</div>
<p>&nbsp;</p>
<p class="h4">
    This application will use <strong>BouletteBlazorWebApp</strong> to fetch the information we will
    use. This includes User and PreferredColor.
    <br /><br />
    <a href="https://bouletteblazorwebapp.azurewebsites.net/en/api/users" target="_blank">
        https://bouletteblazorwebapp.azurewebsites.net/en/api/users
    </a>
    <br />
    <a href="https://bouletteblazorwebapp.azurewebsites.net/en/api/preferredcolors" target="_blank">
        https://bouletteblazorwebapp.azurewebsites.net/en/api/preferredcolors
    </a>
    <br /><br />
    This new application will have the same name in GitHub and Azure. Therefore, it is important that this name
    is unique and clearly indicates the type of application. In the future, other applications could
    be part of our GitHub and Azure. See the image below. Here, we are creating a project named
    <strong>TypescriptFrontEnd</strong> which will be saved in the directory <strong>C:\_PascalTraining\</strong>. We have also
    chosen to place the solution in the same directory as the project. Once the parameters are selected,
    we press <strong>Next</strong>.
    <br /><br />
    <strong>Note:</strong> For easier debugging, it might be preferable to have the BouletteBlazorWebApp project on
    the local computer and run it by pressing F5 (debugging) or Ctrl-F5 (no debugging).
    <br /><br />
    <a href="https://localhost:7168/en/api/users" target="_blank">
        https://localhost:7168/en/api/users
    </a>
    <br />
    <a href="https://localhost:7168/en/api/preferredcolors" target="_blank">
        https://localhost:7168/en/api/preferredcolors
    </a>
    <br /><br />
</p>
<p>&nbsp;</p>
<div class="card border-3">
    <div class="card-body">
        <img src="/images/typescriptfrontend/ConfigureNewVSProject.png" alt="Configuring a New Visual Studio Project" />
    </div>
</div>
<p>&nbsp;</p>
<p class="h4">
    Here are the initial files for the TypescriptFrontEnd project.
</p>
<p>&nbsp;</p>
<div class="card border-3">
    <div class="card-body">
        <img src="/images/typescriptfrontend/StartupProjectFiles.png" alt="Automatically Generated Files for Blazor Web App" />
    </div>
</div>
<p>&nbsp;</p>
<p class="h4">
    The first thing to do is to tell <strong>Typescript</strong> to compile all files
    ending in .ts, not just app.ts. In fact, this file will probably be removed in the future.
    Open the file <strong>tsconfig.json</strong> and add this at the very end of the document.
    Don't forget the comma after "}"
    <br />
    <code>
        "include" : ["**/*.ts"]
    </code>
</p>
<p>&nbsp;</p>
<div class="card border-3">
    <div class="card-body">
        <img src="/images/typescriptfrontend/tsconfig_jsonChanged.png" alt="Location of secrets.json file" />
    </div>
</div>
<p>&nbsp;</p>
<p class="h4">
    We will also change the basic project structure to simplify and properly organize the project,
    which will certainly grow significantly. So the app.ts file alone will not suffice.
    Below is a proposed structure that should work for now. It may change depending on future needs.
</p>
<p>&nbsp;</p>
<div class="card border-3">
    <div class="card-body">
        <img src="/images/typescriptfrontend/NouvelleStructure.png" alt="Copying Connection String Information" />
    </div>
</div>
<p>&nbsp;</p>
<p class="h4">
    Throughout the code development process, we will use GitHub Copilot Chat.
    To open this tool, simply click on the GitHub Copilot icon (see image below).
</p>
<p>&nbsp;</p>
<div class="card border-3">
    <div class="card-body">
        <img src="/images/typescriptfrontend/ClickToOpenGitHubCopilot.png" alt="Copying Connection String Information" />
    </div>
</div>
<p>&nbsp;</p>
<p class="h4">
    Given that there will be several steps and that each step may not be fully reproducible using GitHub Copilot Chat, we will continue with a video.
    See the video below for the next steps.
</p>
<p>&nbsp;</p>
<p class="h4">
    Vidéo to come!
</p>
<p>&nbsp;</p>
<p class="h4">
    End
    <br /><br /><br /><br />
</p>
