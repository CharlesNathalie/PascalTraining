@page "/typescriptfrontend_en"

@using Microsoft.Extensions.Localization
@using System.Globalization;

@rendermode InteractiveServer

<PageTitle>Creating a Typescript Front End Application</PageTitle>

<p class="h2 text-center">Creating a Typescript Front End Application</p>
<p>&nbsp;</p>
<p class="h4">
    Start Visual Studio 2022.
    A quick way is to press the Windows button and start typing <strong>Visual Studio...</strong>.
    You should see the application <strong>Visual Studio 2022</strong>. Once inside Visual Studio 2022, you will see a screen
    like this.
</p>
<p>&nbsp;</p>
<div class="card border-3">
    <div class="card-body">
        <img src="/images/typescriptfrontend/VS2022StartUpWindow.png" alt="Visual Studio 2022 Start Up Window" />
    </div>
</div>
<p>&nbsp;</p>
<p class="h4">
    Click on <strong>Create a new project</strong>. Another window will open with several project options.
    In the search window, you can start typing <strong>Typescript</strong>.
    This will show you Typescript-type projects. By clicking on <strong>Next</strong>, another window will
    ask for more specific project parameters.
</p>
<p>&nbsp;</p>
<div class="card border-3">
    <div class="card-body">
        <img src="/images/typescriptfrontend/CreateBlankTypescriptProject.png" alt="Blazor Web App Project Creation Window" />
    </div>
</div>
<p>&nbsp;</p>
<p class="h4">
    This application will use <strong>BouletteBlazorWebApp</strong> to fetch the information we will
    use. This includes User and PreferredColor.
    <br /><br />
    <a href="https://bouletteblazorwebapp.azurewebsites.net/en/api/users" target="_blank">
        https://bouletteblazorwebapp.azurewebsites.net/en/api/users
    </a>
    <br />
    <a href="https://bouletteblazorwebapp.azurewebsites.net/en/api/preferredcolors" target="_blank">
        https://bouletteblazorwebapp.azurewebsites.net/en/api/preferredcolors
    </a>
    <br /><br />
    This new application will have the same name in GitHub and Azure. Therefore, it is important that this name
    is unique and clearly indicates the type of application. In the future, other applications could
    be part of our GitHub and Azure. See the image below. Here, we are creating a project named
    <strong>TypescriptFrontEnd</strong> which will be saved in the directory <strong>C:\_PascalTraining\</strong>. We have also
    chosen to place the solution in the same directory as the project. Once the parameters are selected,
    we press <strong>Next</strong>.
    <br /><br />
    <strong>Note:</strong> For easier debugging, it might be preferable to have the BouletteBlazorWebApp project on
    the local computer and run it by pressing F5 (debugging) or Ctrl-F5 (no debugging).
    <br /><br />
    <a href="https://localhost:7168/en/api/users" target="_blank">
        https://localhost:7168/en/api/users
    </a>
    <br />
    <a href="https://localhost:7168/en/api/preferredcolors" target="_blank">
        https://localhost:7168/en/api/preferredcolors
    </a>
    <br /><br />
</p>
<p>&nbsp;</p>
<div class="card border-3">
    <div class="card-body">
        <img src="/images/typescriptfrontend/ConfigureNewVSProject.png" alt="Configuring a New Visual Studio Project" />
    </div>
</div>
<p>&nbsp;</p>
<p class="h4">
    Here are the initial files for the TypescriptFrontEnd project.
</p>
<p>&nbsp;</p>
<div class="card border-3">
    <div class="card-body">
        <img src="/images/typescriptfrontend/StartupProjectFiles.png" alt="Automatically Generated Files for Blazor Web App" />
    </div>
</div>
<p>&nbsp;</p>
<p class="h4">
    The first thing to do is to tell <strong>Typescript</strong> to compile all files
    ending in .ts, not just app.ts. In fact, this file will probably be removed in the future.
    Open the file <strong>tsconfig.json</strong> and add this at the very end of the document.
    Don't forget the comma after "}"
    <br />
    <code>
        "include" : ["**/*.ts"]
    </code>
</p>
<p>&nbsp;</p>
<div class="card border-3">
    <div class="card-body">
        <img src="/images/typescriptfrontend/tsconfig_jsonChanged.png" alt="Location of secrets.json file" />
    </div>
</div>
<p>&nbsp;</p>
<p class="h4">
    We will also change the basic project structure to simplify and properly organize the project,
    which will certainly grow significantly. So the app.ts file alone will not suffice.
    Below is a proposed structure that should work for now. It may change depending on future needs.
</p>
<p>&nbsp;</p>
<div class="card border-3">
    <div class="card-body">
        <img src="/images/typescriptfrontend/NouvelleStructure.png" alt="Copying Connection String Information" />
    </div>
</div>
<p>&nbsp;</p>
<p class="h4">
    Throughout the code development process, we will use GitHub Copilot Chat.
    To open this tool, simply click on the GitHub Copilot icon (see image below).
</p>
<p>&nbsp;</p>
<div class="card border-3">
    <div class="card-body">
        <img src="/images/typescriptfrontend/ClickToOpenGitHubCopilot.png" alt="Copying Connection String Information" />
    </div>
</div>
<p>&nbsp;</p>
<p class="h4">
    Now we will open the app_00/models/model.ts document and replace its content
    with the result of the prompt below.
    <br /><br />
    NOTE: GitHub Copilot Chat also understands French, but I prefer
    to write prompts in English since there are many terms
    that are difficult to translate.
    <br /><br />
    GitHub Copilot Prompt
    <pre>
please create a Typescript interface with the object below
do not use the I in front of the object
public class User {
    public int UserID { get; set; } = 0;
    public string FirstName { get; set; } = string.Empty;
    public string LastName { get; set; } = string.Empty;
    public DateTime DateOfBirth { get; set; } = new DateTime(1900, 1, 1);
}
    </pre>
</p>
<p>&nbsp;</p>
<p class="h4">
    Below is the prompt and the results. To copy the prompt result, simply
    click on the copy icon. To see the code in the open document, just click on "Preview".
    <br /><br />
    If copy is used, press Ctrl+V to paste the content into the document.
</p>
<p>&nbsp;</p>
<div class="card border-3">
    <div class="card-body">
        <img src="/images/typescriptfrontend/Prompt1AndResults.png" alt="Copying Connection String Information" />
    </div>
</div>
<p>&nbsp;</p>
<p class="h4">
    If "Preview" is used, you will need to click on "Accept".
</p>
<p>&nbsp;</p>
<div class="card border-3">
    <div class="card-body">
        <img src="/images/typescriptfrontend/AcceptCopilotCode.png" alt="Copying Connection String Information" />
    </div>
</div>
<p>&nbsp;</p>
<p class="h4">
    This step will always be repeated for each <strong>Prompt</strong>.
</p>
<p>&nbsp;</p>
<p class="h4">
    GitHub Copilot sub prompt
    <br /><br />
    <pre>
What is a typescript interface?

Copilot's Response:

A TypeScript interface is a way to define the structure of an object. 
It specifies the properties and their types that an object should have. 
Interfaces are used for type-checking during development to ensure that objects 
conform to a specific structure, which helps catch errors and improve code quality.

Here's a breakdown of the key features of TypeScript interfaces:

1.	Property Definitions: Interfaces define the properties an object must have, along with their types.
2.	Optional Properties: Properties can be marked as optional using a question mark (?).
3.	Read-Only Properties: Properties can be marked as read-only using the readonly keyword.
4.	Method Definitions: Interfaces can also define methods that an object must implement.
    </pre>
</p>
<p>&nbsp;</p>
<p class="h4">
    GitHub Copilot Prompt
    <pre>
#file:'model.ts' 
please create html code to present a list of Users in a table
to get data from
https://localhost:7168/en/api/users 
Also add https://bouletteblazorwebapp.azure

websites.net/en/api/users but comment it
Show result in a table
</pre>
</p>
<p class="h4">
    Copy the HTML code result into the "app_00/html/user.html" file
    Compile the application with <strong>Ctrl+Shift+B</strong>
    <br />
    Now we will see the results. We can use
    VS 2022 and use the solution. Right-click on the document
    app_00/html/user.html and select <strong>Open With...</strong>
    then choose a browser from the list, such as <strong>Google Chrome</strong>.
    It is also possible to go to File Explorer and open the same document by
    double-clicking on the file name.
    Copying the link below into a new browser tab will give the same result.
    <br /><br />
    file:///C:/_PascalTraining/TypescriptFrontEnd/app_00/html/user.html
</p>
<p>&nbsp;</p>
<div class="card border-3">
    <div class="card-body">
        <img src="/images/typescriptfrontend/FileExplorerUserHtml.png" alt="Copying Connection String Information" />
    </div>
</div>
<p>&nbsp;</p>
<p class="h4">
    First result
</p>
<p>&nbsp;</p>
<div class="card border-3">
    <div class="card-body">
        <img src="/images/typescriptfrontend/FirstResult.png" alt="Copying Connection String Information" />
    </div>
</div>
<p>&nbsp;</p>
<p class="h4">
    By changing <strong>https://localhost:7168/en/api/users</strong>
    <br />
    to <strong>https://bouletteblazorwebapp.azurewebsites.net/en/api/users</strong>
    <br />
    we then get the following. We must recompile with Ctrl+Shift+B.
</p>
<p>&nbsp;</p>
<div class="card border-3">
    <div class="card-body">
        <img src="/images/typescriptfrontend/SecondResult.png" alt="Copying Connection String Information" />
    </div>
</div>
<p>&nbsp;</p>
<p class="h4">
    GitHub Copilot sub prompt
    <br /><br />
    <pre>
With the document "app_00/html/user.html" open and focused, we can
ask GitHub Copilot Chat a question.

Please explain user.html code?

I'll let you read the answer.
    </pre>
</p>
<p>&nbsp;</p>
<p class="h4">
    Now we will extract the script code from the HTML document to
    have a better structure.
    <br /><br />
    GitHub Copilot sub prompt
    <br /><br />
    <pre>
#file:'model.ts' #file:'user.html' 
Please take the script out of the document by creating a "aa_00/js/user.ts" under the app_00 namespace
Make sure Typescript compiler uses strict and no implicit types
Import User from the model.ts file
    </pre>
    Copy the new code into the appropriate files and recompile everything with <strong>Ctrl+Shift+B</strong>

</p>
<p>&nbsp;</p>
<p class="h4">
    Now we will extract the stylesheet code from the HTML document to
    have a better structure.
    <br /><br />
    GitHub Copilot sub prompt
    <br /><br />
    <pre>
#file:'user.html' 
Please take the stylesheet out of the document by creating "aa_00/css/app_00.css"
    </pre>
    Copy the new code into the appropriate files and recompile everything with <strong>Ctrl+Shift+B</strong>
</p>
<p>&nbsp;</p>
<p class="h4">
    Now we will extract the URLs from the fetch function
    <br /><br />
    GitHub Copilot sub prompt
    <br /><br />
    <pre>
#file:'user.ts'
get the URL out and make these constants
    </pre>
    Now we know that after every code change, we always
    Copy the code to the appropriate files and recompile everything with <strong>Ctrl+Shift+B</strong>
</p>
<p>&nbsp;</p>
<p class="h4">
    Now we will use Bootstrap to improve the CSS
    <br /><br />
    GitHub Copilot sub prompt
    <br /><br />
    <pre>
#file:'user.html' #file:'user.ts'
Please use the latest version of Bootstrap
you can download from https://cdn.jsdelivr.net
    </pre>
    Copy and compile
</p>
<p class="h4">
    End
    <br /><br /><br /><br />
</p>

@* please create all the CRUD functions using Bootstrap modal
please make sure the errors are managed in a separate function
please use namespace app_00
please use functions to simplify the code
 *@
