@page "/typescriptfrontend_fr"

@using Microsoft.Extensions.Localization
@using System.Globalization;

@rendermode InteractiveServer

<PageTitle>Création d'une application Typescript Front End</PageTitle>

<p class="h2 text-center">Création d'une application Typescript Front End</p>
<p>&nbsp;</p>
<p class="h4">
    Il faut démarrer Visual Studio 2022.
    Une manière rapide est d'appuyer sur le bouton Windows et de commencer à écrire <strong>Visual Studio...</strong>.
    Vous devriez voir l'application <strong>Visual Studio 2022</strong>. Une fois dans Visual Studio 2022, vous verrez un écran
    comme celui-ci.
</p>
<p>&nbsp;</p>
<div class="card border-3">
    <div class="card-body">
        <img src="/images/typescriptfrontend/VS2022StartUpWindow.png" alt="Fenêtre de démarrage de Visual Studio 2022" />
    </div>
</div>
<p>&nbsp;</p>
<p class="h4">
    Cliquez sur <strong>Create a new project</strong>. Une autre fenêtre va s'ouvrir avec plusieurs choix de
    projets. Dans la fenêtre de recherche, vous pouvez commencer à écrire <strong>Typescript</strong>.
    Cela vous montrera les projets de type Typescript. En cliquant sur <strong>Next</strong>, une autre fenêtre vous
    demandera des paramètres plus spécifiques au projet.
</p>
<p>&nbsp;</p>
<div class="card border-3">
    <div class="card-body">
        <img src="/images/typescriptfrontend/CreateBlankTypescriptProject.png" alt="Fenêtre de création de projet Blazor Web App" />
    </div>
</div>
<p>&nbsp;</p>
<p class="h4">
    Cette application va usiliser <strong>BouletteBlazorWebApp</strong> pour aller chercher l'information qu'on va
    usiliser. Il sagit de User et PreferredColor.
    <br /><br />
    <a href="https://bouletteblazorwebapp.azurewebsites.net/en/api/users" target="_blank">
        https://bouletteblazorwebapp.azurewebsites.net/en/api/users
    </a>
    <br />
    <a href="https://bouletteblazorwebapp.azurewebsites.net/en/api/preferredcolors" target="_blank">
        https://bouletteblazorwebapp.azurewebsites.net/en/api/preferredcolors
    </a>
    <br /><br />
    Cette nouvelle application portera le même nom dans GitHub et Azure. Il est donc important que ce nom
    soit unique et indique clairement le type d'application. À l'avenir, d'autres applications pourraient
    faire partie de notre GitHub et Azure. Voir l'image ci-dessous. Ici, nous créons un projet nommé
    <strong>TypescriptFrontEnd</strong> qui sera sauvegardé dans le répertoire <strong>C:\_PascalTraining\</strong>. Nous avons aussi
    choisi de placer la solution dans le même répertoire que le projet. Une fois les paramètres choisis,
    nous appuyons sur <strong>Next</strong>.
    <br /><br />
    <strong>Note:</strong> Pour debugger plus facilement il est peut-être préférable d'avoir le project BouletteBlazorWebApp sur
    l'ordinateur local et le faire marcher en appuyant sur F5 (debugging) ou Ctrl-F5 (no debugging).
    <br /><br />
    <a href="https://localhost:7168/en/api/users" target="_blank">
        https://localhost:7168/en/api/users
    </a>
    <br />
    <a href="https://localhost:7168/en/api/preferredcolors" target="_blank">
        https://localhost:7168/en/api/preferredcolors
    </a>
    <br /><br />
</p>
<p>&nbsp;</p>
<div class="card border-3">
    <div class="card-body">
        <img src="/images/typescriptfrontend/ConfigureNewVSProject.png" alt="Configuration d'un nouveau projet Visual Studio" />
    </div>
</div>
<p>&nbsp;</p>
<p class="h4">
    Voici les quelques fichiers de départ du projet TypescriptFrontEnd.
</p>
<p>&nbsp;</p>
<div class="card border-3">
    <div class="card-body">
        <img src="/images/typescriptfrontend/StartupProjectFiles.png" alt="Fichiers générés automatiquement pour le Blazor Web App" />
    </div>
</div>
<p>&nbsp;</p>
<p class="h4">
    Première chose à faire est de dire à <strong>Typescript</strong> de compiler tous les filières
    se terminant par .ts et non seulement app.ts. D'ailleur cette filière sera probablement enlevé dans le future.
    Il faut ouvrir la filière <strong>tsconfig.json</strong> et d'y inscrire à la toute fin du document.
    Noubliez pas la virgule après "}"
    <br />
    <code>
        "include" : ["**/*.ts"]
    </code>
</p>
<p>&nbsp;</p>
<div class="card border-3">
    <div class="card-body">
        <img src="/images/typescriptfrontend/tsconfig_jsonChanged.png" alt="Emplacement du fichier secrets.json" />
    </div>
</div>
<p>&nbsp;</p>
<p class="h4">
    Nous allons aussi changer la structure de base du projet afin de simplifier et bien structurer le projet
    qui va certainement s'accroitre considérablement. Donc la filière app.ts ne fera pas l'affaire seul.
    Voici une struture proposé ci-dessous qui devrait faire l'affaire pour le moment. Il se peut qu'elle
    change dépendament des besoins futures.
</p>
<p>&nbsp;</p>
<div class="card border-3">
    <div class="card-body">
        <img src="/images/typescriptfrontend/NouvelleStructure.png" alt="Copie des informations de la chaîne de connexion" />
    </div>
</div>
<p>&nbsp;</p>
<p class="h4">
    Tout le long de la production de code nous allons utiliser GitHub Copilot Chat.
    Pour ouvrir cette outil, il suffit de cliquer sur l'icon GitHub Copilot (voir image ci-dessous).
</p>
<p>&nbsp;</p>
<div class="card border-3">
    <div class="card-body">
        <img src="/images/typescriptfrontend/ClickToOpenGitHubCopilot.png" alt="Copie des informations de la chaîne de connexion" />
    </div>
</div>
<p>&nbsp;</p>
<p class="h4">
    Maintenant nous allons ouvrir le document app_00/models/model.ts et remplacer son contenu
    par le résultat du prompt ci-dessous.
    <br /><br />
    NOTE: GitHut Copilot Chat comprend aussi le français, mais je préfère
    faire les prompts en anglais puisqu'il y a beaucoup de term qui
    ne se traduise difficillement.
    <br /><br />
    GitHub Copilot Prompt
    <pre>
please create a Typescipt interface with the object below
do not use the I in front of the object
public class User {
    public int UserID { get; set; } = 0;
    public string FirstName { get; set; } = string.Empty;
    public string LastName { get; set; } = string.Empty;
    public DateTime DateOfBirth { get; set; } = new DateTime(1900, 1, 1);
}
    </pre>
</p>
<p>&nbsp;</p>
<p class="h4">
    Ci-dessous se trouve le prompt et les résultats. Pour copier le résultat du prompt, il suffit
    de cliquer sur l'icon de copier. Pour voir le code dans le document ouvert, il suffit de
    cliquer sur "Preview".
    <br /><br />
    Dans le cas ou copier est utilisé, Ctrl+V pour coller le contenu au document.
</p>
<p>&nbsp;</p>
<div class="card border-3">
    <div class="card-body">
        <img src="/images/typescriptfrontend/Prompt1AndResults.png" alt="Copie des informations de la chaîne de connexion" />
    </div>
</div>
<p>&nbsp;</p>
<p class="h4">
    Dans le cas ou le "Preview" est utilisé, il faudra cliquer sur "Accept".
</p>
<p>&nbsp;</p>
<div class="card border-3">
    <div class="card-body">
        <img src="/images/typescriptfrontend/AcceptCopilotCode.png" alt="Copie des informations de la chaîne de connexion" />
    </div>
</div>
<p>&nbsp;</p>
<p class="h4">
    Cette étape sera toujours à répéter pour chaque <strong>Prompt</strong>.
</p>
<p>&nbsp;</p>
<p class="h4">
    GitHub Copilot sub prompt
    <br /><br />
    <pre>
What is a typescript interface ?

Réponse de Copilot.

A TypeScript interface is a way to define the structure of an object. 
It specifies the properties and their types that an object should have. 
Interfaces are used for type-checking during development to ensure that objects 
conform to a specific structure, which helps catch errors and improve code quality.

Here's a breakdown of the key features of TypeScript interfaces:

1.	Property Definitions: Interfaces define the properties an object must have, along with their types.
2.	Optional Properties: Properties can be marked as optional using a question mark (?).
3.	Read-Only Properties: Properties can be marked as read-only using the readonly keyword.
4.	Method Definitions: Interfaces can also define methods that an object must implement.
    </pre>
</p>
<p>&nbsp;</p>
<p class="h4">
    GitHub Copilot Prompt
    <pre>
#file:'model.ts' 
please create html code present a list of Users in a table
to get data from
https://localhost:7168/en/api/users 
Also add https://bouletteblazorwebapp.azurewebsites.net/en/api/users but comment it
Show result in a table
</pre>
</p>
<p class="h4">
    Copie le résultat du code HTML dans la filière "app_00/html/user.html"
    Compile l'application <strong>Ctrl+Shift+B</strong>
    <br />
    Maintenant nous allons voir les résultats. Nous pouvons usiliser
    VS 2022 et usiliser solution. Il faut faire un right button sur le document
    app_00/html/user.html et choisir <strong>Open With...</strong>
    ensuite un browser dans la liste <strong>Google Chrome</strong> par example.
    Il est aussi possible d'aller a file explorer et ouvrir le même document en
    double cliquant sur le nom de la filière.
    En copiant le lien ci-dessous dans un nouveau tab d'un browser va donner
    la même chose.
    <br /><br />
    file:///C:/_PascalTraining/TypescriptFrontEnd/app_00/html/user.html
</p>
<p>&nbsp;</p>
<div class="card border-3">
    <div class="card-body">
        <img src="/images/typescriptfrontend/FileExplorerUserHtml.png" alt="Copie des informations de la chaîne de connexion" />
    </div>
</div>
<p>&nbsp;</p>
<p class="h4">
    First result
</p>
<p>&nbsp;</p>
<div class="card border-3">
    <div class="card-body">
        <img src="/images/typescriptfrontend/FirstResult.png" alt="Copie des informations de la chaîne de connexion" />
    </div>
</div>
<p>&nbsp;</p>
<p class="h4">
    En changant <strong>https://localhost:7168/en/api/users</strong>
    <br />
    par <strong>https://bouletteblazorwebapp.azurewebsites.net/en/api/users</strong>
    <br />
    nous obtenant alors. Nous devons recompiler Ctrl+Shift+B.
</p>
<p>&nbsp;</p>
<div class="card border-3">
    <div class="card-body">
        <img src="/images/typescriptfrontend/SecondResult.png" alt="Copie des informations de la chaîne de connexion" />
    </div>
</div>
<p>&nbsp;</p>
<p class="h4">
    GitHub Copilot sub prompt
    <br /><br />
    <pre>
En aillant le document "app_00/html/user.html" ouvert et focus, nous pouvant
poser la question a GitHub Copilot Chat.

Please explain user.html code ?

Je vais te laisser lire la réponse.
    </pre>

</p>
<p>&nbsp;</p>
<p class="h4">
    Nous allons maintenant sortir le code script du document html afin
    d'avoir une meilleur structure.
    <br /><br />
    GitHub Copilot sub prompt
    <br /><br />
    <pre>
#file:'model.ts' #file:'user.html' 
Please take the script out of the document by creating a "aa_00/js/user.ts" under the app_00 namespace
Make sure Typecript compiler uses strict and no implicit types
Import User from the model.ts doc
    </pre>
    Copie le nouveau code dans les filières appropriés et recompile le tout <strrong>Ctrl+Shift+B</strrong>
    
</p>
<p>&nbsp;</p>
<p class="h4">
    Nous allons maintenant sortir le code style sheet du document html afin
    d'avoir une meilleur structure.
    <br /><br />
    GitHub Copilot sub prompt
    <br /><br />
    <pre>
#file:'user.html' 
Please take the style sheet out of the document by creating a "aa_00/css/app_00.css"
    </pre>
    Copie le nouveau code dans les filières appropriés et recompile le tout <strrong>Ctrl+Shift+B</strrong>
</p>
<p>&nbsp;</p>
<p class="h4">
    Nous allons maintenant sortir les url de la fonctioin fetch 
    <br /><br />
    GitHub Copilot sub prompt
    <br /><br />
    <pre>
#file:'user.ts'
get the url out and make these const
    </pre>
    Maintenant nous savons qu'après chaque changement du code il faut toujours
    Copier le code aux filières appropriés et recompiler le tout <strrong>Ctrl+Shift+B</strrong>
</p>
<p>&nbsp;</p>
<p class="h4">
    Nous allons maintenant usiliser Bootstrap pour améliorer le css 
    <br /><br />
    GitHub Copilot sub prompt
    <br /><br />
    <pre>
#file:'user.html' #file:'user.ts'
pls use the latest version of Bootstrap
you can download from https://cdn.jsdelivr.net
    </pre>
    Copier et compiler
</p>
<p class="h4">
    Fin
    <br /><br /><br /><br />
</p>

@* pls create all the CRUD functions using bootstrap modal
pls make sure the errors are managed in a separate function
pls use namespace app_00
pls use functions to simplify the code
 *@
