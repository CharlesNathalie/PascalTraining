@page "/typescriptfrontend_fr"

@using Microsoft.Extensions.Localization
@using System.Globalization;

@rendermode InteractiveServer

<PageTitle>Création d'une application Typescript Front End</PageTitle>

<p class="h2 text-center">Création d'une application Typescript Front End</p>
<p>&nbsp;</p>
<p class="h4">
    Il faut démarrer Visual Studio 2022.
    Une manière rapide est d'appuyer sur le bouton Windows et de commencer à écrire <strong>Visual Studio...</strong>.
    Vous devriez voir l'application <strong>Visual Studio 2022</strong>. Une fois dans Visual Studio 2022, vous verrez un écran
    comme celui-ci.
</p>
<p>&nbsp;</p>
<div class="card border-3">
    <div class="card-body">
        <img src="/images/typescriptfrontend/VS2022StartUpWindow.png" alt="Fenêtre de démarrage de Visual Studio 2022" />
    </div>
</div>
<p>&nbsp;</p>
<p class="h4">
    Cliquez sur <strong>Create a new project</strong>. Une autre fenêtre va s'ouvrir avec plusieurs choix de
    projets. Dans la fenêtre de recherche, vous pouvez commencer à écrire <strong>Typescript</strong>.
    Cela vous montrera les projets de type Typescript. En cliquant sur <strong>Next</strong>, une autre fenêtre vous
    demandera des paramètres plus spécifiques au projet.
</p>
<p>&nbsp;</p>
<div class="card border-3">
    <div class="card-body">
        <img src="/images/typescriptfrontend/CreateBlankTypescriptProject.png" alt="Fenêtre de création de projet Blazor Web App" />
    </div>
</div>
<p>&nbsp;</p>
<p class="h4">
    Cette application va usiliser <strong>BouletteBlazorWebApp</strong> pour aller chercher l'information qu'on va
    usiliser. Il sagit de User et PreferredColor.
    <br /><br />
    <a href="https://bouletteblazorwebapp.azurewebsites.net/en/api/users" target="_blank">
        https://bouletteblazorwebapp.azurewebsites.net/en/api/users
    </a>
    <br />
    <a href="https://bouletteblazorwebapp.azurewebsites.net/en/api/preferredcolors" target="_blank">
        https://bouletteblazorwebapp.azurewebsites.net/en/api/preferredcolors
    </a>
    <br /><br />
    Cette nouvelle application portera le même nom dans GitHub et Azure. Il est donc important que ce nom
    soit unique et indique clairement le type d'application. À l'avenir, d'autres applications pourraient
    faire partie de notre GitHub et Azure. Voir l'image ci-dessous. Ici, nous créons un projet nommé
    <strong>TypescriptFrontEnd</strong> qui sera sauvegardé dans le répertoire <strong>C:\_PascalTraining\</strong>. Nous avons aussi
    choisi de placer la solution dans le même répertoire que le projet. Une fois les paramètres choisis,
    nous appuyons sur <strong>Next</strong>.
    <br /><br />
    <strong>Note:</strong> Pour debugger plus facilement il est peut-être préférable d'avoir le project BouletteBlazorWebApp sur
    l'ordinateur local et le faire marcher en appuyant sur F5 (debugging) ou Ctrl-F5 (no debugging).
    <br /><br />
    <a href="https://localhost:7168/en/api/users" target="_blank">
        https://localhost:7168/en/api/users
    </a>
    <br />
    <a href="https://localhost:7168/en/api/preferredcolors" target="_blank">
        https://localhost:7168/en/api/preferredcolors
    </a>
    <br /><br />
</p>
<p>&nbsp;</p>
<div class="card border-3">
    <div class="card-body">
        <img src="/images/typescriptfrontend/ConfigureNewVSProject.png" alt="Configuration d'un nouveau projet Visual Studio" />
    </div>
</div>
<p>&nbsp;</p>
<p class="h4">
    Voici les quelques fichiers de départ du projet TypescriptFrontEnd.
</p>
<p>&nbsp;</p>
<div class="card border-3">
    <div class="card-body">
        <img src="/images/typescriptfrontend/StartupProjectFiles.png" alt="Fichiers générés automatiquement pour le Blazor Web App" />
    </div>
</div>
<p>&nbsp;</p>
<p class="h4">
    Première chose à faire est de dire à <strong>Typescript</strong> de compiler tous les filières
    se terminant par .ts et non seulement app.ts. D'ailleur cette filière sera probablement enlevé dans le future.
    Il faut ouvrir la filière <strong>tsconfig.json</strong> et d'y inscrire à la toute fin du document.
    Noubliez pas la virgule après "}"
    <br />
    <code>
        "include" : ["**/*.ts"]
    </code>
</p>
<p>&nbsp;</p>
<div class="card border-3">
    <div class="card-body">
        <img src="/images/typescriptfrontend/tsconfig_jsonChanged.png" alt="Emplacement du fichier secrets.json" />
    </div>
</div>
<p>&nbsp;</p>
<p class="h4">
    Nous allons aussi changer la structure de base du projet afin de simplifier et bien structurer le projet
    qui va certainement s'accroitre considérablement. Donc la filière app.ts ne fera pas l'affaire seul.
    Voici une struture proposé ci-dessous qui devrait faire l'affaire pour le moment. Il se peut qu'elle
    change dépendament des besoins futures.
</p>
<p>&nbsp;</p>
<div class="card border-3">
    <div class="card-body">
        <img src="/images/typescriptfrontend/NouvelleStructure.png" alt="Copie des informations de la chaîne de connexion" />
    </div>
</div>
<p>&nbsp;</p>
<p class="h4">
    Tout le long de la production de code nous allons utiliser GitHub Copilot Chat.
    Pour ouvrir cette outil, il suffit de cliquer sur l'icon GitHub Copilot (voir image ci-dessous).
</p>
<p>&nbsp;</p>
<div class="card border-3">
    <div class="card-body">
        <img src="/images/typescriptfrontend/ClickToOpenGitHubCopilot.png" alt="Copie des informations de la chaîne de connexion" />
    </div>
</div>
<p>&nbsp;</p>
<p class="h4">
    Étant donné qu'il va y avoir plusieurs étapes et que chaque étape ne pourra peut-être pas
    être reproduite à partir de GitHub Copilot Chat, nous allons poursuivre par vidéo.
    Voir la vidéo ci-dessous pour les prochaines étapes.
</p>
<p>&nbsp;</p>
<p class="h4">
    Vidéo à venir!
</p>
<p>&nbsp;</p>
<p class="h4">
    Fin
    <br /><br /><br /><br />
</p>
